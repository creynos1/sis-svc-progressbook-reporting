<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebReportsApi</name>
    </assembly>
    <members>
        <member name="T:WebReports.Api.Api">
            <summary>
            The Api class is the main interaction class between eWebReports and the host application.  All API session parameters are accessed through this class.  An Api 
            object should be the first thing that is created to interact with eWebReports.
            </summary>
            EX-9487: Autotask requires SessionInfo to be CLS-Compliant.  Also added the attribute to the Api class since it is the main
            entry point for interaction with Exago.
        </member>
        <member name="M:WebReports.Api.Api.#ctor">
            <summary>
            Initialize the API object, this is for internal use only.
            </summary>
        </member>
        <member name="M:WebReports.Api.Api.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize the API object with the provided configuration and sets the application virtual path.
            </summary>
            <param name="appPath">The virtual path to the eWebReports application.</param>
            <param name="configFn">Optional file name (default is WebReports.xml) of the configuration to use, this file name must exist in the eWebReports config directory or cloud storage.</param>
            <param name="configStorageConnStr">Optional connection string for location of configuration files storage. Defaults to Config folder if value is null.</param>
        </member>
        <member name="M:WebReports.Api.Api.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initialize the API object with the provided configuration and sets the application virtual path.
            </summary>
            <param name="appPath">The virtual path to the eWebReports application.</param>
            <param name="isLogCustomConfigure">Set to true if your application uses Apache log4net.  If set to false, Exago will configure log4net itself which may cause problems with application logging.</param>
            <param name="configFn">Optional file name (default is WebReports.xml) of the configuration to use, this file name must exist in the eWebReports config directory or cloud storage.</param>
            <param name="configStorageConnStr">Optional connection string for location of configuration files storage. Defaults to Config folder if value is null.</param>
        </member>
        <member name="P:WebReports.Api.Api.WebReportsBaseUrl">
            <summary>
            The URL string that points to the eWebReports web application
            </summary>
        </member>
        <member name="M:WebReports.Api.Api.LoadFromWebServiceApi(System.String,System.String)">
            <summary>
            This is used for internal purposes only.
            </summary>
            <param name="appPath">The application path.</param>
            <param name="apiId">The API Id.</param>
        </member>
        <member name="P:WebReports.Api.Api.ApiReportOptions">
            <summary>
            Obtain a wrApiReportOptions instance. Values filled in here are used
            in the new report wizard when Action == NewAdvancedReport
            [EX-9535]
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.Action">
            <summary>
            The action that should be taken when the eWebReports application is accessed via <see cref="M:WebReports.Api.Api.GetUrlParamString(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ShowTabs">
            <summary>
            Whether tabs and the help button should be shown in the eWebReports application.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.AppPath">
            <summary>
            The virtual application path to the eWebReports application.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.TempPath">
            <summary>
            The absolute path where eWebReports uses to store temporary files.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ExportPath">
            <summary>
            The absolute path where eWebReports uses to store exported reports.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.PageInfo">
            <summary>
            The PageInfo object for this API session.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.SetupData">
            <summary>
            The SetupData object for this API session.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.Roles">
            <summary>
            The collection of Roles that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.Parameters">
            <summary>
            The collection of Parameters that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.DataSources">
            <summary>
            The collection of DataSources that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.Entities">
            <summary>
            The collection of Entities that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.Joins">
            <summary>
            The collection of Joins that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.CustomFunctions">
            <summary>
            The collection of UDFFunctions (AKA Custom Functions) that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ServerEvents">
            <summary>
            The collection of ServerEvents that exist within the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.Report">
            <summary>
            The currently active Report
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ReportObjectFactory">
            <summary>
            The report object factory, this should be used to access report objects.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ReportScheduler">
            <summary>
            The ReportScheduler object used for scheduling asynchronous report executions.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ReportSchedulerSynchronous">
            <summary>
            The ReportScheduler object used for scheduling synchronous report executions.
            </summary>
        </member>
        <member name="P:WebReports.Api.Api.ReportManagement">
            <summary>
            The ReportMgmtBase object used to access the report repository.
            </summary>
        </member>
        <member name="M:WebReports.Api.Api.GetUrlParamString(System.String,System.Boolean)">
            <summary>
            Returns the URL parameter string used to redirect browser or frame to eWebReports.  Append this string to your eWebReports URL.
            </summary>
            <param name="webPageName">
            The page to return within the url. If not specified "ExagoHome" will be used resulting in the page ExagoHome.aspx being returned.
            </param>
            <param name="showErrorDetail">
            Whether the eWebReports application should show detailed error messages. If not specified, this will be false.
            </param>
            <returns>The URL parameter string that should be appended to the eWebReports application URL.</returns>
        </member>
        <member name="M:WebReports.Api.Api.GetApiKey">
            <summary>
            Returns the Api Key for use with the JavaScript Api.
            </summary>
            <returns>The Api Key portion of the URL for use with the JavaScript Api</returns>
        </member>
        <member name="M:WebReports.Api.Api.SaveData(System.Boolean)">
            <summary>
            Save this API configuration data into eWebReports temporary storage.
            </summary>
            <param name="isPermanent">When true, this will overwrite the current configuration</param>
            <returns>The encrypted and encoded url data that can be used for re-loading the API configuration data.</returns>
        </member>
        <member name="P:WebReports.Api.Api.ApiKey">
            <summary>
            NOTE: When establishing an API instance for a user, GetApiKey (JS embedding) or GetUrlParamString (iframe embedding)
            must be called in order to persist that user's effective configuration to disk.  This getter is provided as a
            convenience to retrive the current API key after calling one of those functions.
            <para>Returns the unique API key for the current Exago API instance.</para>
            </summary>
        </member>
        <member name="P:WebReports.Api.wrApiReportOptions.HasEntityObject">
            <summary>
            Return True if the object has the specification for a entity
            </summary>
        </member>
        <member name="M:WebReports.Api.wrApiReportOptions.Copy(WebReports.Api.wrApiReportOptions)">
            <summary>
            Load a new copy of the object with the same values as here
            Returns the target object [EX-9722]
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:WebReports.Api.wrApiReportOptions.SaveData(System.Data.DataSet)">
            <summary>
            Save the instance to a row in the apireortoptions data table
            </summary>
            <param name="ds">A DataSet inititalized from the WebReportsSchema</param>
        </member>
        <member name="M:WebReports.Api.wrApiReportOptions.LoadData(System.Data.DataSet)">
            <summary>
            Load the contents of the apireportoptions from the specified dataset
            </summary>
            <param name="ds">A DataSet inititalized from the WebReportsSchema</param>
        </member>
        <member name="M:WebReports.Api.wrApiReportOptions.Clear">
            <summary>
            Clear all the values in this object
            </summary>
        </member>
        <member name="M:WebReports.Api.wrApiReportOptions.CreateEntity(WebReports.Api.Common.PageInfo)">
            <summary>
            Return an Entity from the specification contained in this object
            </summary>
            <param name="pageInfo">An initialized PageInfo object</param>
            <returns>An initialized Entity</returns>
        </member>
        <member name="M:WebReports.Api.CloudStorage.CloudStorageBase.TestConnection">
            <summary>
            Save a value to cloud storage and retrieve to verify the connection
            </summary>
        </member>
        <member name="M:WebReports.Api.CloudStorage.CloudStorageBase.StoreTempFile(WebReports.Api.Common.PageInfo,System.String,WebReports.Api.CloudStorage.CloudStoragePathType)">
            <summary>
            Store the indicated file to cloud storage
            </summary>
            <param name="pageInfo"></param>
            <param name="fn">Full path the file to save</param>
            <param name="appendPathType"></param>
        </member>
        <member name="M:WebReports.Api.CloudStorage.CloudStorageBase.RetrieveTempFile(WebReports.Api.Common.PageInfo,System.String,WebReports.Api.CloudStorage.CloudStoragePathType,System.Boolean)">
            <summary>
            Retrieve data from cloud storage and save to the indicated file
            The data is keyed from the file name although fn should be a full path
            By default we only pull data from the cloud if the local file
            does not exist. If checkIfNewer is true then we will test time stamps
            and retrieve if the cloud file is newer
            </summary>
            <param name="pageInfo"></param>
            <param name="fn">Path to location to save data</param>
            <param name="appendPathType"></param>
            <param name="checkIfNewer">Check if the cloud file is newer</param>
            <returns>True if we found data to save; false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CloudStorage.CloudStorageBase.DeleteTempFile(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Delete the cloud storage associated with the file
            </summary>
            <param name="pageInfo"></param>
            <param name="fn"></param>
        </member>
        <member name="M:WebReports.Api.CloudStorage.CloudStorageBase.CleanupTempFiles(WebReports.Api.Common.PageInfo)">
            <summary>
            Execute a cleanup operation on the cloud storage removing all files
            with a timestamp older than the configurated age.
            </summary>
            <param name="pageInfo"></param>
        </member>
        <member name="M:WebReports.Api.CloudStorage.CloudStorageBase.TestTempStorageConnection(WebReports.Api.Common.PageInfo)">
            <summary>
            Test to see if temp storage is valid
            </summary>
            <param name="pageInfo"></param>
        </member>
        <member name="M:WebReports.Api.Common.PerfLog.LogMsg(System.String)">
            <summary>
            Log a message using the logging level specifed by this.loggingLevel
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WebReports.Api.Common.PerfLog.IsLogLevelEnabled(WebReports.Api.Common.PerfLog.Level)">
            <summary>
            Determine if the specified logging level is enabled
            </summary>
            <param name="loggingLevel"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Common.SystemAudit">
            <summary>
            Given the SQLite database file name, this is a common means of both writing to and 
            extracting from the given Monitoring database.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.#ctor(System.String)">
            <summary>
            SystemAudit constructor
            </summary>
            <param name="dbFile">The fully qualified filesystem file name of the SQLite database file.</param>
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.Initialize(System.String)">
            <summary>
            Initialize the Monitoring database, given the SQLite database file name
            </summary>
            <param name="dbFile">The fully qualified filesystem file name of the SQLite database file.</param>
            <exception cref="T:System.Exception">Thrown if the given SQLite database file doesn't exist.</exception>
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.Audit(WebReports.Api.Common.ExecutionAuditObject)">
            <summary>
            Means to save Audit data to the pre-configured SQLite Monitoring database for the specfic 
            ExecutionAuditObject overload.  By requiring ExecutionAuditObject input, the expected data
            is specific to saving the data to multiple - ReportAudit and ExecutionDetails - Monitoring 
            database tables.
            </summary>
            <param name="data">ExecutionAuditObject is the complete data necessary to save Execution Audit 
            information to the db</param>
            <returns>auditId from the "begin" insert so it can be provided back to a separate call to this 
            method when inserting the "end" transaction; auditId returned from an "end" transaction is
            irrelevant</returns>
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.Audit(WebReports.Api.Common.GenericReportAuditObject)">
            <summary>
            Means to save Audit data to the pre-configured SQLite Monitoring database for the specfic 
            GenericReportAuditObject overload.  By requiring GenericReportAuditObject input, the expected data
            is specific to saving the data to the appropriate Monitoring database tables.
            </summary>
            <param name="data">GenericReportAuditObject is the complete data necessary to save "generic" (currently
            non-execution audit) information to the db</param>
            <returns>long value indicating success (0) or failure (1) of the save to database</returns> 
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.Audit(WebReports.Api.Common.NonReportAuditObject)">
            <summary>
            Means to save Audit data to the pre-configured SQLite Monitoring database for the specfic 
            NonReportAuditObject overload.  By requiring NonReportAuditObject input, the expected data
            is specific to saving the data to the appropriate Monitoring database tables.
            </summary>
            <param name="data">NonReportAuditObject is the complete data necessary to save non-report
            information to the db</param>
            <returns>long value indicating success (0) or failure (1) of the save to database</returns> 
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.Extract">
            <summary>
            After data has been saved to the local, pre-configured Monitoring databases via the Audit methods
            above, this method can be used to Extract that information.  It is expected that it will be
            subsequently saved to a central database for downstream reporting purposes.
            </summary>
            <returns>a Dictionary&lt;string, DataSet&gt; object containing one or more keys and associated DataSets</returns>
        </member>
        <member name="M:WebReports.Api.Common.SystemAudit.CreateStatisticsDict(System.String,System.Double,System.Double,System.String)">
            <summary>
            Scheduler server statistics are not collected from a local database table.  Instead, they are 
            collected real-time and saved in a DataSet such that the data can be handled in the same way
            that data retrieved from a database is handled.  Given the appropriate data, this method generates
            the data structure necessary for Scheduler server statistics.
            </summary>
            <param name="hostname">The name of the host.</param>
            <param name="idleCpu">The percent of CPU available for processing.</param>
            <param name="freeMemory">The amount of unused RAM.</param>
            <param name="timestamp">The timestamp representing when the data was collected.</param>
            <returns>Dictionary&lt;string, DataSet&gt; object containing provided information and arranged 
            specifically for downstream consumption.</returns>
        </member>
        <member name="T:WebReports.Api.Common.ExecutionAuditObject">
            <summary>
            An overloaded Object containing data specific to handling data associated with auditing report 
            executions.  This object is specifically-shaped to help define which Audit method will process 
            the data.
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.GenericReportAuditObject">
            <summary>
            An overloaded Object containing data specific to handling data associated with auditing report 
            component usage.  This object is specifically-shaped to help define which Audit method will process 
            the data.
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.NonReportAuditObject">
            <summary>
            An overloaded Object containing data specific to handling data associated with auditing non-report 
            component usage.  This object is specifically-shaped to help define which Audit method will process 
            the data.
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.AuditTransactionType">
            <summary>
            This is a glorified enum with the added benefit of providing a string-based value
            that can be used in database inserts.  These constitute what is currently collected 
            as Audit data.  Each object can be configured via appsettings as to whether or not
            the item is collected/audited.  If not configured, however, any given item will be
            collected/audited by default.
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.AuditConfig">
            <summary>
            Helper class supporting AuditTransactionType.  Consists of an transaction type name and a 
            boolean indicating whether said transaction type is collected/audited.
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.CircularList`1">
            <summary>
            A CircularList is an extension of the generic list with a circular cursor. The cursor is used to iterate through the
            list, when the end of the list is reached the cursor will automatically wrap back to the beginning.
            </summary>
            <typeparam name="T">The object type contained within this circular list</typeparam>
        </member>
        <member name="M:WebReports.Api.Common.CircularList`1.GetNextOrFirst">
            <summary>
            Retrieve the next element, or if at the end of the list, the first element
            </summary>
            <returns>The next element, or if at the end of the list, the first element</returns>
        </member>
        <member name="M:WebReports.Api.Common.CircularList`1.Reset">
            <summary>
            Reset the cursor back to the beginning of the list
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.Debug.CreateEncryptedDebugPackage(WebReports.Api.Common.PageInfo)">
            <summary>
            Returns the debug package as a zip file encrypted using the SymmetricCryptography class as a byte array
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.LanguageDictionary.GetInfo(System.String,System.String)">
            <summary>Gets a LanguageInfo object by language ID</summary>
            <param name="id">ID of the language element to return</param>
            <param name="fallback">The value to return if id is not an existing language ID</param>
        </member>
        <member name="M:WebReports.Api.Common.LanguageDictionary.GetInfo(System.String,System.Boolean)">
            <summary>Gets a LanguageInfo object by language ID</summary>
            <param name="id">ID of the language element to return</param>
            <param name="textFallback">If set to true, GetInfo will return id as plaintext if there is no matching language element</param>
        </member>
        <member name="P:WebReports.Api.Common.UdfFunction.ArgumentsList">
            <summary>
            Information about the arguments that the function accepts
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.UdfFunction.VariableArguments">
            <summary>
            True if the function is allowed to take a variable number of arguments, false otherwise
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.UdfFunction.MinArguments">
            <summary>
            The minumum number of arguments that the function may accept.  This is derived from UdfFunction.Arguments.
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.UdfFunction.MaxArguments">
            <summary>
            The maximum number of arguments that the function may accept.  This is derived from UdfFunction.Arguments.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.UdfFunction.EvaluateFunction(System.String)">
            <summary>
            evaluate function, returning as an object, which is further converted by the caller.
            </summary>
            <param name="pageInfo">PageInfo, sued for compilation</param>
            <param name="functionType">A string we can use for type checking, or in case there is special processing of that function return type</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.UdfFunction.DisplayHtml(WebReports.Api.Common.PageInfo)">
            <summary>
            Provide a translated Html Description string according to this scheme:
            find a translation for the Name.  (using the special wrFunctionId suffix)
            if there is no Name translation, see if there is a Description 
             if there's no Description, use that (translated) function name. The Description translation Id is the text itself.
             if there is one, use that (translated) description. 
             By default, the built in functions - which all have translations -
              will have no descriptions, so that they can be changed by an admin if needed. 
              
            </summary>
            <returns>HTML-safe description for Display</returns>
        </member>
        <member name="T:WebReports.Api.Common.UdfFunctionArgumentInfo">
            <summary>
            UdfFunctionArgumentInfo represents an argument to a custom function
            </summary>
        </member>
        <member name="F:WebReports.Api.Common.UdfFunctionArgumentInfo.Name">
            <summary>The argument name</summary>
        </member>
        <member name="F:WebReports.Api.Common.UdfFunctionArgumentInfo.Required">
            <summary>True if the argument is required, false if the argument is optional</summary>
        </member>
        <member name="F:WebReports.Api.Common.UdfFunctionArgumentInfo.Description">
            <summary>A description for the argument.  This may be a language ID or plain text.</summary>
        </member>
        <member name="P:WebReports.Api.Common.General.IsWriteLog">
            <summary>
            Enable/Disable logging.
            This is obsolete; use LoggingLevel
            EX-9911
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.LoggingLevel">
            <summary>
            Set the logging level : NONE, ERROR, WARN, INFO, DEBUG
            EX-9911
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.EffectiveDbRowLimit">
            <summary>
            Gets the effective database row limit, taking both DbRowLimit and VisualizationDbRowLimit into account if we are in a visualization execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.DbRowLimitParamName">
            <summary>
            Used to support DB Row Limiting with stored procs
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.DbRowRangeStartParamName">
            <summary>
            Used to specify a start row index with stored procs
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.DbRowRangeEndParamName">
            <summary>
            Used to specify an end row index with stored procs
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.UseExecutionCache">
            <summary>
            global enable for execution cache [EX-9209]
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.General.IsAllowReportCustomSQLObjects">
            <summary>
            WARNING: Turning this on allows report writers to execute arbitrary SQL against allowed data sources. 
            The connection string must have READ-ONLY access or else you risk unauthorized modification or deletion of data.
            Visit the Exago support site for more information.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.General.CheckPassword(System.String,System.String)">
            <summary>
            Extract salt and encrypt typed password string
            </summary>
            
        </member>
        <member name="M:WebReports.Api.Common.General.EncryptPassword(System.String)">
            <summary>
            Called when the user updates their password.  Creates a new salt string, encrypts the new password and then stores the combined string
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.Parameter.SaveDisplayValue">
            <summary>
            Unaltered displayvalue as it was originally set with no culture settings or formatting applied.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.ParameterCollection.RetrieveParameter(System.String)">
            <summary>
            Search the parameter collection for the parameter identified by the parameter
            </summary>
            <param name="paramId">Identity of the parameter to return</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.ParameterCollection.IncrementPageNumber(System.Int32)">
            <summary>
            Sometimes PageNumber is not a number (mainly for RTF/PDF export)
            so we check to make sure that is a valid number before we try
            and increment it
            </summary>
            <param name="increment"></param>
        </member>
        <member name="T:WebReports.Api.Common.Constants">
            <summary>
            Summary description for Constants.
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.Cookie">
            <summary>
            Summary description for Cookie.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.DataValue.getNumber(System.Int32,System.Int32,System.String,System.Int32@,System.Boolean@)">
            ParseDateTime: analogous to the javascript routine for date parsing.
            The main thing here is that it can parse the foreign names and mysterious short day names
            Here are some helper functions 
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.Add(WebReports.Api.Reports.Entity)">
            <summary>
            Add a new Entity to the collection
            [EX-9901] Added to permit the SafeMode to ensure that the IDs and NAMEs are unique
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetEntityClone(System.String,System.String)">
            <summary>
            [EX-9901] Get a cloned entity.
            If the entity (entityName) does not exist then clone cloneName;
            If a new entity is created it is added to the collection
            </summary>
            <param name="entityName">Name of the target entity</param>
            <param name="cloneName">Source of the cloning</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetMnemonicFromId(System.String)">
            <summary>
            Seach the entities by Id or by DbName for the indicated entity name
            If the id is located as an Id or DbName then return the 
            associated entity name. If not found return the id itself
            </summary>
            <param name="id">entity or entity.column</param>
            <returns>Resolved entity name</returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetColumnNames(WebReports.Api.Common.PageInfo,System.String,System.Boolean)">
            <summary>
            Gets the column names used in a formula
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetColumnNamesUsingMetadata(WebReports.Api.Common.PageInfo,System.String,System.Boolean)">
            <summary>
            Search for the column entities in formula and list them
            </summary>
            <param name="pageInfo">PageInfo Object</param>
            <param name="formulaText">Formula to be parsed</param>
            <param name="isMnemonic">If true, means formula is using Mnemonic names of Column. If false, means formula is using Column names of Column.</param>
            <returns>Returns list of column names found in formula</returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetEntity(System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrives an entity by it's Name or Id property
            </summary>
            <param name="identifier">The identifier by which to get the Entity (either the entity's Name or Id, based on the getById parameter)</param>
            <param name="getById">If true, Entitys who's Id property match identifier are returned, else Entitys who's Name property match identifier are returned</param>
            <param name="checkForColumn">If true and identifier contains at least one dot ('.') character, only the portion of identifier before the first dot is used to find the Entity</param>
            <returns>The matched Entity from the collection, or null if no match was found</returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetEntityByDbName(System.String)">
            <summary>
            Retrieves an Entity by its DbName property
            </summary>
            <param name="entityDbName">The DbName of the Entity to search for</param>
            <returns>The matched Entity from the collection, or null if no match was found</returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.ShouldAlias(WebReports.Api.Reports.Entity,System.Boolean)">
            <summary>
            Indicate whether an Entity name needs to be aliased
            Only needs to be aliased if there is a prior one in the collection with the same dbname on the same datasource
            See note on keeping this private in comments for GetDataObjectAliasName below.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetDataObjectAliasName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a generic aliased data object name
            </summary>
            IMPORTANT:  We always want external callers to access this method by entityName (and not pass an actual Entity) becaue of the mismatch
            between SetupData.Entities and Report.Entities.  Since we use indexing here, an Entity passed from e.g. SetupData (as in Sort.Entity) will 
            return an index of -1 in Report.Entities.
            [EX-9901] If we want an alias use its name unless this feature is suppressed and we use the old wrEindex construct
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetDataObjectNameForSql(System.String,System.Char[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Determines whether or not the name should be aliased and returns the appropriate string
            </summary>
            IMPORTANT:  We always want external callers to access this method by entityName (and not pass an actual Entity) becaue of the mismatch
            between SetupData.Entities and Report.Entities.  Since we use indexing here, an Entity passed from e.g. SetupData (as in Sort.Entity) will 
            return an index of -1 in Report.Entities.
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetDataObjectNameForSql(WebReports.Api.Reports.Entity,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            IMPORTANT: This method should remain private.  We want external callers to call by Entityname 
            using the method above due to the possible mismatch of Entities between setup data and report entities.
            We will often get SQL Aliasing errors if an Entity from setup data is passed directly here and
            we search for the entity in the report collection.  WHen passing by name we ensure we retrieve
            the proper entity from the collection when checking alias-ness and grabbing the alias index 
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.GetEntity(WebReports.Api.Common.PageInfo,System.String,System.String)">
            <summary>
            Gets an entity by name that exists in the category specified by categoryName
            Note: to search without category specify String.Empty
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="categoryName">The [optional] name of the category that the entity must exist in</param>
            <param name="entityName">The entity name</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.ConvertFormulaDbToAliasNames">
            <summary>
            For any formulas that are part of Entities in the collection (eg. column metadata
            custom column values), converts data object and field names in the formula to
            their user-facing aliases.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.SaveToJson">
            <summary>
            Save the collection to a Json string
            which can be saved along with a class
            which uses XML Serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.EntityCollection.LoadFromJson(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Restore a collection from a string produced by SaveToJson()
            </summary>
            <param name="pageInfo"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.ResetFromPageInfo(WebReports.Api.Common.PageInfo)">
            <summary>
            This function was created specifically for EX-9347.  Updates the pageInfo object reference in SetupData
            and select members to point to the pageInfo specified as input.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.SetUdfDateFunction(System.String,System.Int32,System.String)">
            <summary>
             Helper to create Date-based Udfs. All other parameters are defaulted.
            </summary>
            <param name="name">Function Name, mixed case, no = or ()</param>
            <param name="weight">helps order the functions in the filter function list</param>
            <param name="programCode">C# code snippet to compile</param>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.SetUdfFormulaFunction(System.String,System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Helper to create formula-based Udfs. Some parameters are defaulted.
            </summary>
            <param name="categories">Existing Exago dategory in which to group this function</param>
            <param name="description">Description of the function that will be displayed to the end users</param>
            <param name="filterReturnType">Return type of custom function</param>
            <param name="hasVariableArguments">Specifies whether or not function takes variable number of arguments</param>
            <param name="language">High-level language of the code for the function. Can be C#, JavaScript or VB.Net</param>
            <param name="name">Function Name, mixed case, no = or ()</param>
            <param name="programCode">Code snippet to compile</param>
            <param name="references">Semicolon-separated list of any dlls that need to be referenced by the Custom Function</param>
            <param name="weight">Helps order the functions in the filter function list</param>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.ResolveFilterFunctionList">
            <summary>
            Decide whether to add the built-in date Udfs or not
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.EstablishBuiltInDateFunctions">
            <summary>
            Add (or replace) these built in Udf date functions.
            These may refer to Today and CurQuarter in sessionInfo
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.ResolveFormulaFunctionList">
            <summary>
            [EX-8824] Decide whether to add the built-in formula Udfs or not
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.EstablishBuiltInFormulaFunctions">
            <summary>
            [EX-8824] Add (or replace) builtin Udf formula functions.
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.SetupData.MonitoringDbPath">
            <summary>
            Get/set path to centralized monitoring SQLite database 
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.SetupData.MonitoringDbName">
            <summary>
            Get/set name of centralized monitoring SQLite database file
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.AddEntityToCollection(WebReports.Api.Reports.Entity)">
            <summary>
            Add the entity to the collection. Remove any existing entity of the same name
            [EX-9722] Safer way to add Entities
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.TryGetUserId">
            <summary>
            Return the userid id but only if the parameters collection has already been loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.TryGetCompanyId">
            <summary>
            Return the company id but only if the parameters collection has already been loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.SetupData.DataSetSaveTest">
            <summary>
            This is used only by the API test ConfigTest.TestConfigSaveLoad
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Common.Utilities.MinCompactionInterval">
            <summary>
            Returns the minimum interval to use for garbage collector compaction
            null return value indicates that no compaction should be used.
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.Utilities.largeObjectHeapCompactionMode">
             <summary>
            GCSettings.LargeObjectHeapCompactionMode was added in .NET 4.5.1 and is not available in 4.5.
            If the install is running on a system with this property, we want to use it to compact the large object heap
            every so often.
             </summary>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.CSSColorStringToHex(System.String)">
            <summary>
            Converts a valid CSS color string to an RGB hex string of the form #RRGGBB.
            </summary>
            <param name="color">The CSS color</param>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.CSSColorStringToColor(System.String)">
            <summary>
            Converts a valid CSS color string to a System.Drawing.Color object
            </summary>
            <param name="color">The CSS color</param>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.IndexToLetter(System.Int32)">
            <summary>
            Convert an index into a letter, similar to excel columns
            </summary>
            <param name="index">The 0-based index</param>
            <returns>The corresponding letter</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.LettersToIndex(System.String)">
            <summary>
            Convert letters into an index, similar to excel columns
            </summary>
            <param name="index">The letter(s)</param>
            <returns>The corresponding letter</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.WordWrapString(WebReports.Api.Common.PageInfo,System.String,System.Single,System.Drawing.Font,System.String)">
            <summary>
            Given a string of text that is to be drawn into some known area, split the string into multiple lines. The string
            will create a new line when an explicit line feed is recognized or an implicit word wrap occurs.
            </summary>
            <param name="str">The string to word wrap, may have explicit line-splits in it</param>
            <param name="width">The width of the area the string is to fit (in points)</param>
            <param name="font">The font that will be used to draw the text</param>
            <param name="lineSplit">The string that signifies the end of a line</param>
            <returns>An array of strings, each entry is a line</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.Wordify(System.String,System.Char[],System.String)">
            <summary>
            Split a string into word strings and boundary strings
            </summary>
            <param name="str">The string to wordify</param>
            <param name="wordSplit">A character array, each entry signifies the end of a word</param>
            <param name="lineSplit">The string that signifies the end of a line</param>
            <returns>An array of strings. Each entry is a word, a word boundaray character, or a newLine string</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetApplicationDir(System.String)">
            <summary>
            Returns the base application directory plus an optional subdirectory
            </summary>
            <param name="subdir">Optional subdirectory</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetConfigFile(WebReports.Api.Common.PageInfo,System.String,System.String,System.Boolean)">
            <summary>
            Returns the path to a file based off of the Config directory on disk
            </summary>
            <param name="pageInfo"></param>
            <param name="fileName">File to return path to</param>
            <param name="subDir">Optional subdirectory where file exists</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.IsFormulaSortable(System.String)">
            <summary>
            Determines whether a formula containing the given string would be able to be sorted.
            Formulas that contain aggregates or the LoadImage, ExcelFormula, or Hyperlink functions are not sortable
            </summary>
            <param name="formulaText"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.UpdateObjectValue(System.Object,System.String,System.Object)">
            <summary>
            Assigns a value to a property of the given object if <paramref name="value"/> is not null.
            </summary>
            <param name="chart">The object to modify</param>
            <param name="name">The name of the property to modify</param>
            <param name="value">The value to assign to the property</param>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.Compare(System.String,System.String)">
            <summary>
            Given two strings, do a smart compare:
                 * If the strings can be converted to a date, compare them as dates
                 * If the strings can be converted to a number, compare them as numbers
                 * Otherwise, compare them as strings
            </summary>
            <param name="value1">The first string value</param>
            <param name="value2">The second string value</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetExcelLabel(System.Int32)">
            <summary>
            Returns an Excel like alphabetic label given a column number
            </summary>
            <param name="colNum">Numeric value of column</param>
            <returns>Alphabetic label</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.TryOpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.Int32,System.Int32)">
            <summary>
            Attempts to open a FileStream repeatedly, which can be useful if there are multiple threads 
            that may try to lock the file at the same time.
            </summary>
            <param name="filePath">The path to the file to open</param>
            <param name="mode">The mode parameter to pass to the System.IO.FileStream constructor</param>
            <param name="access">The access parameter to pass to the System.IO.FileStream constructor</param>
            <param name="timesToRetry">The maximum number of times to try opening the file in case of failure.  After this many attempts, the exception causing the error will be thrown.</param>
            <param name="timeBetweenAttempts">The time, in milliseconds, between file open attempts.</param>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.ParseQuotedCommaSepString(System.String)">
            <summary>
            Takes in a string, which is a comma-separated list of elements where
            each element is in double quotes, and returns a list of the individual string elements
            </summary>
            <param name="stringToParse">The string to be parsed</param>
            <returns>A list of the individual elements in the string</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetBestValueType(System.String)">
            <summary>
            Tries to parse the input value as the following objects (in order): decimal, DateTime, string,
            then returns the parsed object
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetElemTypeStrFromReportType(WebReports.Api.wrReportType)">
            <summary>
            Provide a string-based representation of a wrReportType object
            </summary>
            <param name="type">A wrReportType object to represent as a string.</param>
            <returns>String-based representation of a provided wrReportType object.</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.SystemAuditMgr(WebReports.Api.Common.PageInfo,WebReports.Api.Common.AuditConfig,System.String,System.Int64)">
            <summary>
            Centralized report auditing method.  Manages "generic" and "execution" report audit actions.
            "Generic" refers to simple, one-line audits, whereas "execution" requires
            both a begin and end component of the audit and inserts into multiple db tables.
            </summary>
            <param name="pageInfo">the PageInfo object containing all pertinent report info that will be audited</param>
            <param name="type">The AuditTransactionType object, providing both a string representation of the transaction type
            and a boolean indicating whether or not this transaction type is configured to be collected.</param>
            <param name="transactionId">a unique identifier for an execution transaction</param>
            <param name="auditId">is a database key for an end execution transaction, as provided by the begin execution transaction</param> 
            <returns>long success (0) or failure (1), if a "generic" report audit action; returns an auditId if an 
            execution transaction</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetIPv4(System.String)">
            <summary>
            Helper utility to retrieve the IPv4 value of current machine or another machine, if provided
            </summary>
            <param name="address">A machine other than the current machine for which to determine the IPv4</param>
            <returns>A string representation of the machine's IPV4</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.IsPathASubPath(System.String,System.String)">
            <summary>
            Determine if a path is a subdirectory of a specified directory
            </summary>
            <param name="path">Path to a file or directory</param>
            <param name="baseDirectory">Path to a directory</param>
            <returns>True if the directory indicated by path is within the baseDirectory</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetDirectoryUri(System.String)">
            <summary>
            Return a Uri for the directory indicated by the path which may be a file or directory indicator
            </summary>
            <param name="path">Path to a file or directory</param>
            <returns>Null if the path does not reference an existing file or directory, otherwise a Uri to the directory</returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.CorrectNewLineInData(System.String)">
            <summary>
            Data from source and parameters needs to be preprocessed to remove
            CR/LF and replace with the NewLineConstant. The export methods
            expect this value and correctly convert to an appropriate form
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.CorrectNewLineInData(System.Text.StringBuilder)">
            <summary>
            Data from source and parameters needs to be preprocessed to remove
            CR/LF and replace with the NewLineConstant. The export methods
            expect this value and correctly convert to an appropriate form
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.GetClientScript(System.String)">
            <summary>
            Returns the contents of the specified js resource loaded from js.resource
            </summary>
            <param name="scriptName">The name of the file whose contents should be retrieved, e.g. AccordionCtrl.js (case insensitive)</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.Utilities.LoadJSResources(System.String)">
            <summary>
            Reads the js.resource file and adds each file as a string to Utilities.clientScripts
            </summary>
            <param name="jsResourceFilePath"></param>
        </member>
        <member name="M:WebReports.Api.Common.JoinCollection.SafeAdd(WebReports.Api.Reports.Join)">
            <summary>
            Add the JOIN to the collection but only if it does not duplicate an existing one
            </summary>
            <param name="join"></param>
        </member>
        <member name="M:WebReports.Api.Common.JoinCollection.GetItem(WebReports.Api.Reports.Join)">
            <summary>
            Find an existing Join that binds the same entities
            </summary>
            <param name="join"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.JoinCollection.SaveToJson">
            <summary>
            Used to construct a string representation of the collection.
            Used to store the collection in report objects which are saved
            via XML Serialization, such as ExpressViews
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.JoinCollection.LoadFromJson(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Reestablish the collection from a string created by SaveToJson()
            </summary>
            <param name="pageInfo"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.JoinCollection.SaveToCdata">
            <summary>
            Return an XmlCDataSection contain the XML used to serialize this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Common.JoinCollection.LoadFromCData(WebReports.Api.Common.PageInfo,System.Xml.XmlCDataSection)">
            <summary>
            Restore a collection from an XmlCDataSection
            </summary>
            <param name="pageInfo"></param>
            <param name="cdata"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Common.SystemLog">
            <summary>
            A small class used to provide a way to log data to the Windows system event log.
            In order to avoid any install complexity we use the Application log
            The event id, 234, is selected at random to provide an identifier
            to locate these events
            Note that we ignore any exceptions thrown
            </summary>
        </member>
        <member name="T:WebReports.Api.Common.Logger">
            <summary>
            Logger - a singleton class wrapping a log4net ILog object.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.Logger.#ctor(System.String)">
            <summary>
             Untyped Logger
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:WebReports.Api.Common.Logger.Instance(System.String)">
            <summary>
            Create or fetch the Logger singleton
            </summary>
            <returns>The Logger singleton</returns>
        </member>
        <member name="M:WebReports.Api.Common.Logger.CallerWrappedMessage(System.Object)">
            <summary>
            Adds caller information to a logged message string.
            </summary>
            <param name="message">A message for the log</param>
            <returns>The message with caller information prepended</returns>
            This special attribute is supposed to help the stack look the same under debug and release versions 
        </member>
        <member name="M:WebReports.Api.Common.Logger.ReportStateToEventLog(System.String)">
            <summary>
            Report the current state of the logging to the system event log.
            We list all the current Appenders and if we find a RollingFileAppender we
            log where it is logging and attempt to see if we have permissions to write to that log file
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.Log.LogFileName">
            <summary>
            Provides the default name for logging.
            In an Api environment we use a different name to avoid 
            conflicting with the main application which is usually
            running in a different IIS process and thus cannot write
            to the same file.
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.Log.GetLogger(System.String)">
            <summary>
            Return a Logger using the Instance method
            </summary>
            <returns></returns>
        </member>
        <member name="F:WebReports.Api.Common.Log.lockObject">
            <summary>
            A little something we can lock
            </summary>
        </member>
        <member name="P:WebReports.Api.Common.Log.IsDefaultConfiguration">
            <summary>
            Set to true if no log4net configuration is found and we manually set our configuration
            </summary>
        </member>
        <member name="M:WebReports.Api.Common.Log.UpdateSettingsFromSession(System.Boolean,System.String,System.String)">
            <summary>
            Called from PageInfo.Initialize.  If not using a config file, we need to pass the logging directory
            and whether or not to actually log to this class from PageInfo because we don't have that information
            when the logger is instantiated at application start.
            [EX-9911] Can now specify a logging level
            </summary>
            <param name="isLogging">Whether or not logging should be enabled</param>
            <param name="logDir">The directory in which to log (the file "WebReportsLog.txt" is used)</param>
            <param name="loggingLevel">Level of logging: ERROR, WARN, DEBUG, INFO</param>
        </member>
        <member name="M:WebReports.Api.Common.PageInfo.GetMnemonicFromIdUsingMetadata(System.String)">
            <summary>
            Getting mnemonic name of column from the original column name using ColumnMetadata
            </summary>
            <param name="id">Column name to be used for finding corresponding Mnemonic name</param>
            <returns>Mnemonic name of Column</returns>
        </member>
        <member name="M:WebReports.Api.Common.PageInfo.GetIdFromMnemonicUsingMetadata(System.String)">
            <summary>
             Getting original column name from the mnemonic name of column using ColumnMetadata
            </summary>
            <param name="mnemonicName">Mnemonic name to be used for finding corresponding Column name</param>
            <returns>Original name of Column</returns>
        </member>
        <member name="T:WebReports.Api.Data.DataTableFormulaEvaluator">
            <summary>
            This class is responsible for evaluating dataTables by formulas
            </summary>
        </member>
        <member name="M:WebReports.Api.Data.DataTableFormulaEvaluator.FilterDataTableByFormula(WebReports.Api.Common.PageInfo,System.Data.DataTable,System.Collections.Generic.List{WebReports.Api.Reports.Filter})">
            <summary>
            Filters a data table by a list of filters 
            </summary>
            <param name="pageInfo"></param>
            <param name="dt">DataTabe to be filtered</param>
            <param name="filters">List of filters.</param>
        </member>
        <member name="M:WebReports.Api.Data.DataTableFormulaEvaluator.GetFilterBooleanStringForRow(System.Collections.Generic.List{WebReports.Api.Reports.Filter},WebReports.Api.Reports.FilterValueProvider,System.Data.DataRow)">
            <summary>
            Evaluates each filter for a given row.
            Constructs a boolean expression (as a string) based on the filter groupings and results of formulas
            </summary>
            <param name="filters"></param>
            <param name="formulaValueProvider"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.DataTableFormulaEvaluator.EvaluateFormulaFilterRow(System.IComparable,System.Collections.Generic.List{System.String},WebReports.Api.wrFilterOperator)">
            <summary>
            Takes the formula return value of a row and decides whether not the row should be removed
            </summary>
            <param name="formulaReturnValue">Value of filter formula for a row</param>
            <param name="valueArray">Array of values</param>
            <param name="filterOperator">Operator of the filter</param>
        </member>
        <member name="M:WebReports.Api.Data.FormulaDataTypeParser.GetExpectedReturnType(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.CellFormula)">
            <summary>
            Pulls the root node of the AST (the outer most function) and gets the return type of that function
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.FormulaDataTypeParser.GetIfStatementReturnType(WebReports.Api.Common.PageInfo,Infragistics.WebUI.UltraWebCalcManager.TreeNode{System.String},Infragistics.WebUI.UltraWebCalcManager.FormulaParser,System.String,WebReports.Api.Reports.CellFormula)">
            <summary>
            Derives the return type of an if statement
            If it is ambiguous (i.e. if(true, 1, "bananas") spit out string
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.FormulaDataTypeParser.GetValueTokenType(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.CellFormula,Infragistics.WebUI.CalcEngine.IUltraCalcValueToken)">
            <summary>
            Takes the UltraCalc's value token and gets an Exago's datatype
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.FormulaDataTypeParser.GetFunctionReturnType(System.String)">
            <summary>
            Takes a return type from FunctionInfos and translates it to an Exago Datatype
            Value is for if/switch statements and is handled elsewhere
            </summary>
            <param name="functionReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.FormulaDataTypeParser.GetParameterDataType(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Take an exago datafield variable and spit out the data type
            </summary>
            <param name="pageInfo"></param>
            <param name="variableName"></param>
            <param name="isDataField"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.FormulaDataTypeParser.FlattenFormulaFilterText(WebReports.Api.Common.PageInfo,System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Takes in formula text and expands any custom columns into formula text (and potentially flattens those formulas)
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Data.MinPriorityQueue`1">
            <summary>
            Generic Priority Queue implementaion. Items are added into a dictionary with the key being their Priority(int)
            If priorities are duplicated, they are added to a queue.
            </summary>
            <typeparam name="T">Type of value to be sorted by priority</typeparam>
        </member>
        <member name="M:WebReports.Api.Data.MinPriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds a value duplicate priorites are handled in the order they were added.
            </summary>
            <param name="value"></param>
            <param name="priority"></param>
        </member>
        <member name="M:WebReports.Api.Data.MinPriorityQueue`1.Dequeue">
            <summary>
            Pops the value with the highest priority!
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Data.SchemaCache">
            <summary>
            This class implements a simple dictionary cache to store database schema for single server requests in order to reduce the hits to the database
            </summary>
        </member>
        <member name="M:WebReports.Api.Data.SchemaCache.ContainsSchema(System.String)">
            <summary>Determines if schema for a specific entity has already been stored</summary>
            <param name="entityKey">The entity key whose value is checked</param>
            <returns>A boolean value indicating whether the schema has been stored</returns>
        </member>
        <member name="M:WebReports.Api.Data.SchemaCache.AddSchema(System.String,System.Data.DataTable)">
            <summary>Adds the schema for the specific entity</summary>
            <param name="entityKey">The entity key associated with the schema</param>
            <param name="schema">The schema for the entity</param>
        </member>
        <member name="M:WebReports.Api.Data.SchemaCache.GetSchema(System.String)">
            <summary>Gets the stored schema</summary>
            <param name="entityKey">The entity key whose schema we are getting</param>
            <returns>The DataTable containing the schema</returns>
        </member>
        <member name="M:WebReports.Api.Data.SqlAggregateHelper.GetNumberOfGroups(System.Collections.Generic.List{WebReports.Api.Reports.Section})">
            <summary>
            Calculates the number of unique groups in the given list of group sections
            </summary>
            <param name="groupSections"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.SqlAggregateHelper.GetInnermostGroup(System.Collections.Generic.List{WebReports.Api.Reports.Section},WebReports.Api.Reports.ReportSortCollection)">
            <summary>
            Finds the innermost group, according to the sorts
            </summary>
            <param name="groupSections"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.AddNode(System.String)">
            <summary>
            Adds a node to the graph
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.GetValues">
            <summary>
            Gets all of the values out of the edges in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.AddEdge(WebReports.Api.Data.GraphNode{`0},WebReports.Api.Data.GraphNode{`0},`0,System.Int32)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="cost"></param>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.DeleteNode(System.String)">
            <summary>
            Removes a node and any edges that connect to it
            </summary>
            <param name="nodeKey"></param>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.GetShortestPath(System.String,System.String,WebReports.Api.Data.Graph{`0})">
            <summary>
            Implements Dijkstra's shortest path algorithm. Run time is O(log E + V log V)
            </summary>
            <param name="graph"></param>
            <param name="joins"> optional param, if not null, we're using GetShortestPath to get the Steiner Tree</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.Data.Graph`1.GetSteinerTree(System.Collections.Generic.List{System.String},WebReports.Api.Data.Graph{`0})" -->
        <member name="M:WebReports.Api.Data.Graph`1.GetCompleteDistanceGraph(WebReports.Api.Data.Graph{`0},System.Collections.Generic.List{System.String},System.Int32[0:,0:]@)">
            <summary>
            Implementation of Floyd Warshall's algorithm. O(V^3) run time.
            Creates a new COMPLETE Graph where each edge's cost is the cost of the SHORTEST path between nodes
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.GetPathFromMatrix(System.Int32[0:,0:],WebReports.Api.Data.Graph{`0},System.String,System.String,System.Int32@)">
            <summary>
            Using the path matrix, looks up the shortest path between fromNode and toNode. Works like state machine
            </summary>
            <param name="matrix"></param>
            <param name="graph"></param>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="pathCost"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.GetMinimumSpanningTree(WebReports.Api.Data.Graph{`0})">
            <summary>
            Implemenation of Kruskal's MST Algorithm. Run time of O(E log V)
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.UnionSubset(System.Collections.Generic.List{WebReports.Api.Data.GraphNode{`0}},WebReports.Api.Data.GraphNode{`0},WebReports.Api.Data.GraphNode{`0})">
            <summary>
            Combines two subsets. Used in Kruskal
            </summary>
            <param name="subsetList"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.ReplaceEdgesWithShortestPath(WebReports.Api.Data.Graph{`0},WebReports.Api.Data.Graph{`0},System.Int32[0:,0:])">
            <summary>
            Takes T (MST of the complete distance graph), and the pathMatrix(state machine that tells us the shortest path between two nodes)
            and replaces the edges in T with the shortest paths
            </summary>
            <param name="mst"></param>
            <param name="pathMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.ConstructSteinerTree(WebReports.Api.Data.Graph{`0},System.Collections.Generic.List{System.String})">
            <summary>
            Construct the Steiner tree graph by deleting nodes and edges not in the nodeName collection. O(V^2)
            </summary>
            <param name="graph"></param>
            <param name="nodeNames"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.PruneTree(WebReports.Api.Data.Graph{`0},System.Collections.Generic.List{WebReports.Api.Data.GraphEdge{`0}})">
            <summary>
            Removes all edges EXCEPT the ones provided
            </summary>
            <param name="edgesToKeep"></param>
        </member>
        <member name="M:WebReports.Api.Data.Graph`1.FromTestInput(System.String)">
            <summary>
            Returns a new Graph loaded from a test input file.  This function is used for unit-testing the Graph class.
            Test input files should look like this:
            a b c // Space-separated list of node names
            a b -1 // Edge definition (space-separated fromnode, tonode, integer weight)
            a c -2
            
            Test files may contain zero edges, in which case the file will contain only one line, the list of nodes.  There must be at least one node in the graph.
            </summary>
            <param name="filePath">The test file from which to load the graph</param>
        </member>
        <member name="M:WebReports.Api.Data.GraphNode`1.AddEdge(WebReports.Api.Data.GraphNode{`0},`0,System.Int32)">
            <summary>
            Adds an edge to this instance of a graph node
            </summary>
            <param name="toNode"></param>
            <param name="cost"></param>
        </member>
        <member name="T:WebReports.Api.Data.ODBCDbConnect">
            <summary>
            This namespace defines the database connection to an ODBC database implementing the DBConnect interface.
            </summary>
        </member>
        <member name="T:WebReports.Api.Data.MySqlDbConnect">
            <summary>
            This namespace defines the database connection to a MySQL database implementing the DBConnect interface.
            </summary>
        </member>
        <member name="M:WebReports.Api.Data.MethodObject.GetMethod(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Overload for use by UI where the LoadAssembleyInExternalDomain is extracted from the current pageInfo
            </summary>
            <param name="pageInfo"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Data.PostgresDbConnect">
            <summary>
            This namespace defines the database connection to a Postgres database implementing the DBConnect interface.
            </summary>
        </member>
        <member name="T:WebReports.Api.Data.DbConfig">
            <summary>
            Config for a single Database that can be deserialized from a json config file
            </summary>
        </member>
        <member name="F:WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod.None">
            <summary>Range limiting SQL should not be used</summary>
        </member>
        <member name="F:WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod.LimitOffset">
            <summary>SELECT ... LIMIT rangeSize OFFSET offsetRow</summary>
        </member>
        <member name="F:WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod.OffsetFetch">
            <summary>SELECT ... OFFSET offsetRow ROWS FETCH NEXT rangeSize ROWS ONLY</summary>
        </member>
        <member name="F:WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod.RowNumberWithTop">
            <summary>SELECT TOP endingRow ROW_NUMBER() Over(Order By (...)) as wrRowNum ... as wrRowNumbered WHERE wrRowNumbered.wrRowNum BETWEEN startingRow AND endingRow</summary>
        </member>
        <member name="F:WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod.RowNumber">
            <summary>SELECT ROW_NUMBER() Over(Order By (...)) as wrRowNum ... as wrRowNumbered WHERE wrRowNumbered.wrRowNum BETWEEN startingRow AND endingRow</summary>
        </member>
        <member name="F:WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod.RowNumberNoAlias">
            <summary>SELECT ROW_NUMBER() Over(Order By (...)) as wrRowNum ... WHERE wrRowNum BETWEEN startingRow AND endingRow</summary>
        </member>
        <member name="M:WebReports.Api.Data.DbConnect.AddRowRangeSql(System.String,System.String,WebReports.Api.Data.DbConnect.WrRowRangeSqlMethod,System.Int32,System.Int32)">
            <summary>
            Adds range limiting sql to input sql string based on method indicated
            </summary>
            <param name="baseSql">Original Sql statement to ammend</param>
            <param name="method">SQL syntax method to limit to specified range</param>
            <param name="rangeStart">The starting row number to be returned</param>
            <param name="rangeEnd">The final row number to be returned</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.DbConnect.HasProcedureParams(System.String,System.String[])">
            <summary>
            Checks whether or not the stored procedure being tested includes ALL of the requested parameters
            </summary>
            <param name="procName"></param>
            <param name="paramNames"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Data.DataSource">
            <summary>
            A DataSource represents a connection to a set of data (database, xml file, etc).
            </summary>
        </member>
        <member name="M:WebReports.Api.Data.DataSource.#ctor(WebReports.Api.Common.PageInfo,System.Int32)">
            <summary>
            Initialize a new DataSource object with the provided identifier.
            </summary>
            <param name="id">The identifer to assign this DataSource.</param>
            <param name="pageInfo">The PageInfo object.</param>
        </member>
        <member name="M:WebReports.Api.Data.DataSource.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Initialize a new DataSource object, assigning it a unique identifier.
            </summary>
            <param name="pageInfo">The PageInfo object.</param>
        </member>
        <member name="M:WebReports.Api.Data.DataSource.#ctor(WebReports.Api.Common.PageInfo,System.String,System.String)">
            <summary>
            Initialize a new DataSource object of a specific type, assigning it a unique identifier.
            </summary>
            <param name="dbType">The type of datasource, one of <see cref="T:WebReports.Api.Common.Constants.DatabaseType"/>.</param>
            <param name="dataConnStr">The connection string to the datasource.</param>
            <param name="pageInfo">The PageInfo object.</param>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.Id">
            <summary>
            The unique identifier for this DataSource.
            </summary>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.OrigId">
            <summary>
            The original unique identifier for this DataSource.
            </summary>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.Name">
            <summary>
            The name of this DataSource.
            </summary>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.DbType">
            <summary>
            The type of this DataSource, one of <see cref="T:WebReports.Api.Common.Constants.DatabaseType"/>.
            </summary>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.OdbcDelim">
            <summary>
            The ODBC database specific delimiters for this DataSource.
            </summary>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.DataConnStr">
            <summary>
            The connection string for this DataSource.
            </summary>
        </member>
        <member name="P:WebReports.Api.Data.DataSource.Schema">
            <summary>
            The schema (owner name) for this DataSource (databases only).
            </summary>
        </member>
        <member name="T:WebReports.Api.Data.DataSourceCollection">
            <summary>
            A collection of DataSource objects
            </summary>
        </member>
        <member name="M:WebReports.Api.Data.DataSourceCollection.#ctor(WebReports.Api.Common.PageInfo,System.Data.DataTable)">
            <summary>
            Initialize a new DataSource collection from a given DataTable.
            </summary>
            <param name="pageInfo">The PageInfo object.</param>
            <param name="dt">The DataTable to load the DataSource objects from</param>
        </member>
        <member name="M:WebReports.Api.Data.DataSourceCollection.GetItem(System.Int32)">
            <summary>
            Retrieve the DataSource with the given identifier.
            </summary>
            <param name="id">The identifier of the DataSource to retrieve.</param>
            <returns>The DataSource with the given identifier, or null if no such DataSource exists.</returns>
        </member>
        <member name="M:WebReports.Api.Data.DataSourceCollection.GetDataSource(System.String)">
            <summary>
            Retrieve the DataSource with the given name.
            </summary>
            <param name="name">The name of the DataSource to retrieve.</param>
            <returns>The DataSource with the given name, or null if no such DataSource exists.</returns>
        </member>
        <member name="M:WebReports.Api.Data.DataSourceCollection.SaveData(System.Data.DataSet)">
            <summary>
            Save the collection of DataSource objects to a DataSet.
            </summary>
            <param name="ds">The DataSet to save the collection of DataSource objects to.</param>
        </member>
        <member name="M:WebReports.Api.Data.DataObjectBase.HasDifferentEntityFormulaFilters">
            <summary>
            Returns true if this dataObject has filters applied to it that uses a different dataobject
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.DataObjectBase.GetSortString(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the sort string used for this object given its sorts.  If any of the sorts are formula sorts,
            this function returns a partial sort string representing up to the first formula sort.
            </summary>
        </member>
        <member name="M:WebReports.Api.Data.DataObjectBase.GetDataColumnsArray(System.Boolean)">
            <summary>
            Returns string array of data columns collection. Used for GetObjectData calls during batch report processing
            </summary>
            <param name="onlyColumnNames">when true, this will return the name of the columns only, and not [objectName].[ColumnName]</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Data.DataObjectBase.SortAndFilter(System.Data.DataSet,System.Boolean)">
            <summary>
            Sort and filter the dataset. Also set column aliases
            </summary>
            <param name="ds"></param>
            <param name="suppressSortAndFilter">If true we don't execute the sort/filter unless they contain formula sorts</param>
            <returns>Updated DataSet</returns>
        </member>
        <member name="M:WebReports.Api.Data.DataObjectBase.ConsolidateTypeForComparison(System.IComparable,System.IComparable,System.IComparable@,System.IComparable@,System.Boolean)">
            <summary>
            Takes two elements that do not match in terms of type and attempts to match the types. First, if one of the elements is null(stored as empty string), it will match the null to the other value's type
            If neither value is null, the left type is matched to the right's type. Failing that, both values are converted to strings to avoid throwing an error.
            Extended fix for EX-8439. Intended to fix errors thrown by 1037's element1.CompareTo(element2) by guaranteeing both elements are of the same type.
            </summary>
            <param name="leftElement"></param>
            <param name="rightElement"></param>
            <returns>type matched IComparable leftElement, type matched IComparable rightElement</returns>
        </member>
        <member name="M:WebReports.Api.Data.DataObjectBase.ConsolidateNullType(System.IComparable,System.Type)">
            <summary>
            Used to consolidate types between 2 Icomparables when their "null" values don't match in data type. **** Changes LEFT to match RIGHT's Type.*******
            "Nulls" are converted to "", thus CompareTo will throw error if comparing "" to a Non-Null, non-string value. See EX-8439
            NOTE: This is may allow some weirdness to come through that I didn't think of. As far as I can see stuff like: if(somecondition,Null(),0) seem to work fine.
            </summary>
            <param name="nullElement"></param>
            <param name="targetType"></param>
            <returns>nullElement</returns>
        </member>
        <member name="T:WebReports.Api.Data.OracleDbConnect">
            <summary>
            Summary description for OracleSql.
            </summary>
        </member>
        <member name="T:WebReports.Api.Export.GroupTreeExporter">
            <summary>
            Builds a tree out of cell collections and sends them to the 'real' exporter.
            
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.Export(WebReports.Api.Reports.ReportExecutionData,System.String,WebReports.Api.ExecuteData.ExecuteFilters,WebReports.Api.ExecuteData.ExecuteSorts,WebReports.Api.Reports.TopNItem)">
            <summary>
            List of indexes that match the conditions for top n
            </summary>
            <param name="execution"></param>
            <param name="executionData"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.Process(WebReports.Api.Reports.ExecuteCellCollection,WebReports.Api.Reports.Section)">
            <summary>
            Overload. Process a CellCollection. Add it to the tree. processthis
            </summary>
            <param name="cells">Collection of cells with the final values of a particular section. Mostly just the data.</param>
            <param name="section">Section the we are currently processing. Context for the cellCollection we are processing</param>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.Process(WebReports.Api.Reports.ExecuteCellCollection)">
            <summary>
            implemented so the interface will leave me alone 
            </summary>
            <param name="cells"></param>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.GetSectionNodeName(WebReports.Api.Reports.Section)">
            <summary>
            Translate a section's GroupBreakName for a node. If the section is Detail, a reportfooter, or a report header, group break name is null, so we come up with our own
            </summary>
            <param name="section">Section that we want to translate</param>
            <returns>String that represents the na</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.GetDataTableRowsFromTopN(WebReports.Api.Reports.TopNItem)">
            <summary>
            Grabs all of the Datarows after sorting and filtering for top n
            </summary>
            <param name="topN"></param>
            <returns>List of indexes. Used for re-writing _Data and _Intermediate Files</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.FindNodeByGroupName(WebReports.Api.Export.GroupTreeNode,System.String)">
            <summary>
            Iterative search for node above the start node.
            </summary>
            <param name="startNode">Node that we start searching at</param>
            <param name="name">Group name that we are searching for in a node</param>
            <returns>GroupTreeNode that matches the given name</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.GetGroupNameByCellId(System.Int32)">
            <summary>
            Find the group that this particular cell belongs to by starting at the lowest node and moving up to root.
            </summary>
            <param name="cellId"></param>
            <returns>String name of the group that this cell belongs to</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.GetNodesAtDepth(WebReports.Api.Export.GroupTreeNode,System.Int32)">
            <summary>
            Get a list of all nodes at a specific depth
            </summary>
            <param name="node"></param>
            <param name="depth"></param>
            <returns>List of all the nodes at a specific depth</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.GetDecendantsByGroupName(WebReports.Api.Export.GroupTreeNode,System.String)">
            <summary>
            Grab all of the descendants of a node at a specified group
            </summary>
            <param name="node">Node we want to find the decendants of</param>
            <param name="groupName">Group we want to get nodes for</param>
            <returns>List of GroupNodes that match the group name and are descendants of the starting node</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.PrintTreeJson">
            <summary>
            A really simple and dumb way to print out trees as Json
            </summary>
            <returns>string representing a tree in JSON format</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.PrintTree">
            <summary>
            A really simple and dumb way to print out trees : )
            recursively traverse tree and build a tree looking thing
            </summary>
            <returns>string representing a tree</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeExporter.Expand(WebReports.Api.Export.GroupTreeNode,System.Int32)">
            <summary>
            Child to PrintTree()
            </summary>
            <param name="node"></param>
            <param name="depth"></param>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeNode.#ctor">
            <summary>
            Constructor for storage GroupTreeNodes
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeNode.EvaluateStatus">
            <summary>
            Determine the status of a node. It can either be a leaf, branch, or Root node
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeNode.AddChild(WebReports.Api.Export.GroupTreeNode)">
            <summary>
            Adds a Node as a child to thisObj. Then Evaluates them both
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeNode.FindGroupTreeValueByCellId(System.Int32)">
            <summary>
            Finds the GroupTreeValue object by a given CellId. Searches through the Header then Footer.
            </summary>
            <param name="cellId"></param>
            <returns>GroupTreeValue containing the cellId</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeNode.IsDecendant(WebReports.Api.Export.GroupTreeNode)">
            <summary>
            Check to see if the provded node is a decendant of thisObj
            </summary>
            <param name="node">Node that we are checking ancestry of</param>
            <returns>Bool that indicates whether or not the provided GroupTreeNode is a descendant of thisObj</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTreeNode.AddValue(WebReports.Api.Reports.Section,WebReports.Api.Reports.ExecuteCellCollection)">
            <summary>
            Add a cell collection/section to the Node. 
            Depending on the section type, add it either as a header or footer
            </summary>
            <param name="section">Section associated with the ExecuteCellCollection. Gives context to said cells</param>
            <param name="cells">ExecuteCellCollection that contains the data we are trying to sort/filter</param>
        </member>
        <member name="P:WebReports.Api.Export.GroupTreeNode.Name">
            <summary>
            Name of the node. Mostly for internal use in the GroupTree and is usually the group that this node is representing
            </summary>
        </member>
        <member name="P:WebReports.Api.Export.GroupTreeNode.Header">
            <summary>
            The Header section of this particular group
            </summary>
        </member>
        <member name="P:WebReports.Api.Export.GroupTreeNode.Footer">
            <summary>
            The Footer section of this particular group
            </summary>
        </member>
        <member name="P:WebReports.Api.Export.GroupTreeNode.Children">
            <summary>
            List of GroupTreeNodes that represent the children of this node
            </summary>
        </member>
        <member name="P:WebReports.Api.Export.GroupTreeNode.ParentNode">
            <summary>
            The Parent of this node. The Root node just has a pointer to itself for this
            </summary>
        </member>
        <member name="P:WebReports.Api.Export.GroupTreeNode.Status">
            <summary>
            The current status of this node. Either Root, Branch, Leaf, or error
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.CreateReportGroupOrder(WebReports.Api.Common.PageInfo)">
            <summary>
            Get the groups on the report and sort them according to the sorts on the report
            </summary>
            <param name="pageInfo"></param>
            <returns>List of groups as strings in sort order</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.CreateReportGroupBreakSections(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a List of the Section Identifiers that lets us know when a group is done 
            </summary>
            <param name="reportGroupOrder"></param>
            <returns>List of Section Identifiers</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.GetDataRowIndexList(WebReports.Api.Export.GroupTreeNode)">
            <summary>
            *Specifically for getting indexes of datarows we need for final output.
            Recursive function that flattens a branch and adds the values in OUTPUT order.
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.Flatten(WebReports.Api.Export.GroupTreeNode)">
            <summary>
            Recursive flatten for the grouptree 
            </summary>
            <param name="root">Starting node from which we want to flatten</param>
            <returns>List of groupTreeValues in output order</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.RemoveNode(WebReports.Api.Export.GroupTreeNode)">
            <summary>
            Remove a node from the grouptree. All of the children will also be disconnected
            </summary>
            <param name="node">GroupTreeNode to be removed</param>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.GetNodeDepth(WebReports.Api.Export.GroupTreeNode)">
            <summary>
            Determine the depth of a given node.
            </summary>
            <param name="node"></param>
            <returns>Int corresponding with the depth of the node. -1 is the root node</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.GetNewIterationSection(System.String)">
            <summary>
            Get the section number of the section that indicates a new iteration of the report design
            </summary>
            <param name="sectionBreakName"></param>
            <returns>A sectionIdentifier that represents where a group from the output ends</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.InsertSkeletonBranch(WebReports.Api.Export.GroupTreeNode,System.String)">
            <summary>
             Creates a "skeleton" branch and attaches it to the provided node. 
             A skeleton branch is a branch of GroupTreeNodes that don't hold any values, but are already in sort order.
             This avoids the awkward situation where we encounter an inner group of a report before the outer groups and need to insert a new node above the current node
            </summary>
            <param name="startNode"> The node that we want to insert down to detail from</param>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.GetSectionIdentifierByName(System.String)">
            <summary>
            Find a SectionIdentifier in the List of sections that indicate the end of a group(reportGroupBreakSections)
            </summary>
            <param name="sectionName">Name of the section we are looking for</param>
            <returns>SectionIdentifier that we were searching for or null</returns>
        </member>
        <member name="M:WebReports.Api.Export.GroupTree.GetSectionIdentifierIndexByName(System.String)">
            <summary>
            Find the index in of a section by name in the List of sections that indicate the end of a group(reportGroupBreakSections)
            </summary>
            <param name="sectionName"></param>
            <returns>Index of the SectionIdentifier or -1</returns>
        </member>
        <member name="T:WebReports.Api.Export.GroupTreeValue">
            <summary>
             This object is a neat package that summarizes a particular executeCellCollection and its associated section. 
             GroupTreeNode uses 2 of these (1 for header, 1 for footer)
            </summary>
        </member>
        <member name="T:WebReports.Api.Export.SectionIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.JsonExporter.GetJson(WebReports.Api.Common.PageInfo,WebReports.Api.Execute.IExecution)">
            <summary>
            Returns a JSON-serialized ExecutedReportData object representing the report output
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="execution">The execution from which to get the executed data</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.JsonExporter.GetJson(WebReports.Api.Common.PageInfo,WebReports.Api.Execute.IExecution,System.Int32,System.Int32)">
            <summary>
            Returns a JSON-serialized array of ExecutedReportPage objects from the execution
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="execution">The execution from which to get pages</param>
            <param name="startIndex">The zero-based, inclusive, lower bound of the range of chunks to get</param>
            <param name="endIndex">The zero-based, inclusive, upper bound of the range of chunks to get</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.JsonExporter.SaveFilesToCloud(WebReports.Api.Common.PageInfo,WebReports.Api.Execute.IExecution)">
            <summary>
            Save extra file to the cloud. 
            The main loop will save the actual download file but we'll save the
            page and meta files here
            </summary>
            <param name="pageInfo"></param>
            <param name="execution"></param>
        </member>
        <member name="T:WebReports.Api.Export.ExecutedReportData">
            <summary>
            Represents an executed report; meant to contain the data and some information about the report
            without all the frills of formatted output types like PDF and HTML
            </summary>
        </member>
        <member name="F:WebReports.Api.Export.ExecutedReportCell.Text">
            <summary>
            The cell's text content
            </summary>
        </member>
        <member name="F:WebReports.Api.Export.ExecutedReportCell.Type">
            <summary>
            The cell's output type.  One of "Text" | "Base64Image" | "Hyperlink"
            </summary>
        </member>
        <member name="F:WebReports.Api.Export.ExecutedReportHyperlinkCell.Url">
            <summary>
            The URL to navigate to on click if this is a Hyperlink cell, else null
            </summary>
        </member>
        <member name="F:WebReports.Api.Export.JsonExportPackage.useChunking">
            <summary>
            If true, the exporter will separate the report output into an array of ExecutedReportChunk objects,
            suitable for streaming to the client.
            Otherwise, the exporter will stream the report as an array of ExecutedReportSection objects with
            no chunk definitions.  The latter could be useful in contexts where chunking makes no sense like if a
            machine is going to be reading the JSON report output.
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.BaseExporter.GetFormatChunks(System.String)">
            <summary>
            Returns the top level "chunks" representing strings that are surrounded by HTML formatting tags
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.BaseExporter.GetStyledPhrase(System.String)">
            <summary>
            Parses a string for bold, italic, and underline HTML formatting
            </summary>
            <param name="s">The string to parse for formatting chunks</param>
            <param name="font">The font to apply to all chunks parsed from <paramref name="s"/></param>
            <returns>A "phrase" of FormattingChunks representing the parts of s associated with the appropriate fonts</returns>
        </member>
        <member name="M:WebReports.Api.Export.PdfExportPackage.MergeMultipleFiles(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Merge multiple pdf documents into a single document
            </summary>
            <param name="filesToMerge">List of files to merge</param>
            <param name="outputFile">Final output file</param>
            <param name="password">optional pdf password (all documents must use the same password)</param>
            <param name="useFIPS">optional FIPS algorithm requirement</param>
        </member>
        <member name="M:WebReports.Api.Export.HtmlExporter.ResumeHtmlFile">
            <summary>
            This method is used to resume both the Html output file, as well
            as the .pg file used for html paging support.
            </summary>
        </member>
        <member name="F:WebReports.Api.Export.ExcelExporter.MaxRowHeight">
            <summary>The maximum row height allowed by Excel (in Pixels)</summary>
        </member>
        <member name="M:WebReports.Api.Export.ExcelExporter.GetValidWorksheetName(System.String)">
            <summary>
            This function returns a valid Excel worksheet name based on the desired name.
            This will remove illegal characters, and enforce the max sheet name length.
            Provided as a static function for convenience when needed in a custom function or other external reference.
            </summary>
            <param name="desiredName"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.ExcelExporter.GetNewSheetName(System.String)">
            <summary>
            Gets a unique sheet name based on the desired name for the sheet.  If the desired name 
            is the name of an existing sheet, a unique identifier will be appended to the output name.
            </summary>
            <param name="desiredSheetName">The desired name of the new sheet</param>
        </member>
        <member name="M:WebReports.Api.Export.ExcelExporter.CreateNamedStyle(WebReports.Api.Reports.Cell,System.String)">
            <summary>
            Create a new StyleInfo cell style and return its index, or return the index of an existing cell style if its style exactly matches the data cell's style
            </summary>
            <param name="dataCell">The data cell to create a style from</param>
            <param name="numberFormat">The cell's number format</param>
            <returns>An index into the export package StylesDict of the StyleInfo to associate with the cell</returns>
        </member>
        <member name="T:WebReports.Api.Export.IExporter">
            <summary>
            This interface is used as a callback mechanism for exporting during report execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.IExporter.Process(WebReports.Api.Reports.ExecuteCellCollection)">
            <summary>
            Process the collection of cells for export
            </summary>
            <param name="cells">The collection of cells to export</param>
        </member>
        <member name="M:WebReports.Api.Export.IExporter.Process(WebReports.Api.Reports.ExecuteCellCollection,WebReports.Api.Reports.Section)">
            <summary>
            Process the collection of Cells and Section for export.
            This overload is exclusively for GroupTreeExporter to build a tree for top n and sort on aggs
            </summary>
            <param name="cells"></param>
            <param name="section"></param>
        </member>
        <member name="M:WebReports.Api.Export.PdfExporter.CheckCellForPageNumber(WebReports.Api.Reports.Cell)">
            <summary>
            Special check for remanent forms that are not proper functions
            </summary>
            <param name="dataCell"></param>
        </member>
        <member name="M:WebReports.Api.Export.PdfMerger.GetAcroField(iTextSharp.text.pdf.AcroFields,System.String)">
            <summary>
            Returns either a RadioCheckField if the AcroField is a checkbox or radio button, or a TextField for all other AcroFields
            </summary>
            <param name="acroFields"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.RtfExporter.CheckCellForPageNumber(WebReports.Api.Reports.Cell)">
            <summary>
            For RTF we scan for the page number token and if found mark the cell as a page number cell (i.e. set pageNumberPrefix)
            Also the special check for old stype page numbering
            </summary>
            <param name="cells"></param>
        </member>
        <member name="M:WebReports.Api.Export.PdfRtfBaseExporter.CreatePdfPTable(WebReports.Api.Export.PdfRtfBaseExporter.ITextTableData)">
            <summary>
            Creates the PDF p table.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.PdfRtfBaseExporter.CalculateRowHeight(WebReports.Api.Export.PdfRtfBaseExporter.ITextTableData)">
            <summary>
            Calculates the rendered height of the row
            </summary>
            <param name="row">The row of which to calculate the height</param>
            <returns>The rendered height of the row in pixels</returns>
        </member>
        <member name="M:WebReports.Api.Export.PdfRtfBaseExporter.ScaleImage(System.Single,System.Single,iTextSharp.text.Image,System.Boolean)">
            <summary>
            Scales the image, maintaining the image's original aspect ratio
            </summary>
        </member>
        <member name="M:WebReports.Api.Export.PdfRtfBaseExporter.CreatePageNumberCell(System.String,iTextSharp.text.Font)">
            <summary>
            Return a cell to contain the page number prefixed by the specified string
            </summary>
            <param name="prefix">String to show before the page number</param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Export.PdfRtfBaseExporter.CheckHeaderFooterCells(WebReports.Api.Reports.Cell[0:,0:])">
            <summary>
            WARNING: this is a bit of a hack and only supports certain formats for the page number
            Scan the cell array being used as a header for page number tokens
            We allow anything that matches the regex, basically a string concatinated to a page number token
            Two properties of the Cell object are used: isPageNumberChecked and pageNumberPrefix
            Note that we are actually checking the cell's ExecuteReportCell which is the original cell
            from the report, the current cell object has already been processed for display. THe problem with
            PDF and RTF is that the page number is not correct at the time the cell was processed. 
            If the ExecuteReportCell contains a string we understand then we tag the cell by setting its
            pageNumberPrefix and this will later be used to generate a pagenumber cell
            </summary>
            <param name="cells"></param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.TryAddEntity(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Report,System.String)">
            <summary>
            Adds the entity to the report if the report doesn't already contain it
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddBlankIndentationCells(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Report,System.Int32,System.Int32)">
            <summary>
            Adds the needed number of blank cells that will indent inner groups on the report
            </summary>
            <param name="advancedReport">The report that we want to add the cells to</param>
            <param name="rowIndex">The index of teh row that the cells are being added to</param>
            <param name="indentationCount">The number of blank indentation cells needed</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddGroupHeaderRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates and adds a group header row to the advanced report. 
            </summary>
            <param name="addGroupIndentations">If we are converting/exporting and not flattening groups, we add indentations to groups and add aggregate descriptions. When switching to live mode, these are left out</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddColumnTitlesRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a row to the given group header containing the title for each column
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="expressView">The ExpressView we are converting</param>
            <param name="advancedReport">The standard report to which we are converting</param>
            <param name="rowIndex">The index of the row that we are adding to the report</param>
            <param name="groupByField">The group break name of the group header to which we are adding a row.  If null, indicates to add as a page header row.</param>
            <param name="flattenGroupOffset"> Number indicating the number of groupsByFields that were converted to regular columns as part of a flatten operation</param>
            <param name="addGroupIndentations">If we are converting/exporting and not flattening groups, we add indentations to groups and add aggregate descriptions. When switching to live mode, these are left out</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddDetailRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new detail row and adds it to the advanced report. 
            </summary>
            <param name="addGroupIndentations">If we are converting/exporting and not flattening groups, we add indentations to groups and add aggregate descriptions. When switching to live mode, these are left out</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.ShouldDisableForAggregatesInDatabase(WebReports.Api.Common.PageInfo,System.Boolean,WebReports.Api.ExpressView.ExpressViewColumn,System.Int32,System.Boolean,System.Nullable{WebReports.Api.Reports.CellAggFunction.AggMethod})">
            <summary>
            Returns true if we should not calculate the given aggregate for the given column, based on settings for aggregates in the database
            </summary>
            <param name="includeDetailRows">True if the user has checked the "include detail rows" setting in the ExpressView designer</param>
            <param name="column">The current ExpressView column we are processing</param>
            <param name="dataType">The data type of the field in the current EV column</param>
            <param name="isOuterGroup">True if the grouping is not the innermost group on the report</param>
            <param name="aggType">The aggregate function we are processing for this column/footer</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.HasAllAggNoneDataFields(WebReports.Api.ExpressView.ExpressView)">
            <summary>
            Returns true if all the data fields in the given ExpressView have the selected agg type of 'None'.
            Returns false otherwise
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddGroupFooterRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{WebReports.Api.Reports.CellAggFunction.AggMethod})">
            <summary>
            Creates and adds a group footer row (with aggregate data) to the advanced report
            </summary>
            <param name="isConvertingOrExporting">If we are converting/exporting, we suppress the report footer if all agg types are 'none'</param>
            <param name="aggType">If not null, the aggregate type we want to calculate in this footer. If null, we take the agg type defined in the ExpressView</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddChartReferenceFooterRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,System.Int32,System.String,WebReports.Api.ExpressView.ExpressViewChartUpdateOption,System.Boolean,System.Nullable{WebReports.Api.Reports.CellAggFunction.AggMethod})">
            <summary>
            In order to use the group footer as a reference cell for the chart, the footer values need to be numeric
            We add a second group footer, suppress it so it's hidden in the output, and leave out the labels added
            in the AddGroupFooterRow function. We also add reference cells for report footer labels, that contain the field name
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddReportFooterTitleRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates and adds a report footer title row to the advanced report. No data, just static text
            </summary>
            <param name="isConvertingOrExporting">If we are converting/exporting, we suppress the report footer if all agg types are 'none'</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddReportFooterRow(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,WebReports.Api.ExpressView.ExpressViewChartUpdateOption,System.Boolean,System.Boolean,System.Boolean,System.Nullable{WebReports.Api.Reports.CellAggFunction.AggMethod})">
            <summary>
            Creates and adds a report footer row with aggregate summary calculations of the entire report data set
            </summary>
            <param name="isConvertingOrExporting">If we are converting/exporting, we suppress the report footer if all agg types are 'none'</param>
            <param name="aggType">If not null, the aggregate type we want to calculate in this footer. If null, we take the agg type defined in the ExpressView</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddDetailHeaderOnlyMessage(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressViewConverterOptions,WebReports.Api.Reports.Report,System.Int32)">
            <summary>
            Called only when teh user had Detail Rows hidden and Flatten Groupd enabled.
            Adds a pageheader cell that contains a message explaining to the user that in order to see actual report data, 
            they need to change the report (either show detail rows or un-flatten groups). The message wording is slightly different for 
            dashboard tiles vs stand-alone ExpressView
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddChart(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,WebReports.Api.ExpressView.ExpressViewAdjustments)">
            <summary>
            Creates and populates the advanced report chart widget object
            </summary>
            <param name="pageInfo"></param>
            <param name="expressView">The ExpressView containing the chart data</param>
            <param name="advancedReport">The advanced report to add the chart widget to</param>
            <param name="convertCustomColorsToDefault">True if we are converting to an advanced report (as opposed to executing) and need to change the custom color parameter</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.UpdateChartWidgetCellReferences(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,System.Int32,WebReports.Api.Reports.Cell,System.String,WebReports.Api.ExpressView.ExpressViewChartUpdateOption,System.Nullable{WebReports.Api.Reports.CellAggFunction.AggMethod})">
            <summary>
            The advanced report chart object cellId reference values are initialized as indexes in a list of chart field objects. 
            This function will update those references to use the cellID's created by the advanced report
            </summary>
            <param name="pageInfo">the session pageinfo</param>
            <param name="expressView">the expressView report we are converting to an advanced report</param>
            <param name="advancedReport">the advanced report we are building</param>
            <param name="reportColumnIndex">the report column index of the field we are currently adding to the advanced report</param>
            <param name="cell">the cell containing the reference to the field that was just added</param>
            <param name="groupName">if the cell is within a group section, the name of the group</param>
            <param name="updateOption">one of "labels Only", "Values Only", or "Labels and Values". Specifies what datacellIds should be updated in the advanced report chart widget</param>
            <param name="aggType">the agg type of the field we are adding</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.FlattenGroups(WebReports.Api.ExpressView.ExpressView)">
            <summary>
            Takes groups and makes them columns to produce a "flat" (detail-only) report suitable for further analysis
            in a tool like Excel.
            </summary>
            <param name="expressView">The ExpressView to "flatten"</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.ConvertToAdvancedReport(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.ExpressView.ExpressViewConverterOptions,System.Boolean)">
            <summary>
            Converts a ExpressView to its representation as a standard report which can then be exported.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="expressView">The ExpressView to convert</param>
            <param name="options">Options to control various parameters of the conversion</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.ConvertForScheduler(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView)">
            <summary>
            Convert an express view to an advanced report for transmission to the scheduler.
            The report becomes the Active report and is returned
            </summary>
            <param name="pageInfo"></param>
            <param name="expressView"></param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.RGBtoHex(System.String)">
            <summary>
            Converts RGB string to Hex string
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddCellFormatting(WebReports.Api.Reports.Cell,WebReports.Api.ExpressView.ExpressViewSectionFormatting)">
            <summary>
            Adds the formatting defined by the ExpressView format menu
            </summary>
            <param name="cell">The cell to add formatting to</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.AddDataFormatting(WebReports.Api.Reports.Cell,WebReports.Api.Reports.CellFormat,System.Boolean)">
            <summary>
            Adds the data formatting defined by the ExpressView format menu
            </summary>
            <param name="cell">The cell to add data formatting to</param>
            <param name="format">The format to apply to the cell</param>
            <param name="useInvariantDataFormats">If true, the cell format will be set in a way that will produce, in output, the culture-invariant form of the cell content</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.ExpressView.ExpressViewConverter.TranslateExpressViewTopNToAdvanced(WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report,WebReports.Api.Common.PageInfo)" -->
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverter.GetTopNCellGroup(WebReports.Api.ExpressView.ExpressView)">
            <summary>
            Figure out what group the cell for top n goes in. If the agg type is Value, put the cell in the normal group.
            For any other agg type put it in the closest outer for each's group.
            We only use this function for situation #3 where we need a new cell. 
            </summary>
            <param name="expressView"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.ExpressView.ExpressViewConverterGroupColorAdder">
            <summary>
            ExpressViewConverterGroupColorAdder is used to add group color styling to a standard report that has been converted from an ExpressView
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverterGroupColorAdder.AddGroupColors(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Report)">
            <summary>
            Adds group color styling to the standard report
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="expressView">The ExpressView from which the standard report was converted</param>
            <param name="advancedReport">The standard report to style</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverterGroupColorAdder.ProcessGroupHeaderOrFooter(WebReports.Api.Common.PageInfo,System.Collections.Generic.List{System.String},WebReports.Api.Reports.Report,WebReports.Api.Reports.Row)">
            <summary>
            Styles the input group header row
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="advancedReport">The standard report to style</param>
            <param name="row">The row to style</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverterGroupColorAdder.ProcessDetailRow(WebReports.Api.Common.PageInfo,System.Collections.Generic.List{System.String},WebReports.Api.Reports.Report,WebReports.Api.ExpressView.ExpressView,WebReports.Api.Reports.Row)">
            <summary>
            Styles the input detail row
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="advancedReport">The standard report to style</param>
            <param name="row">The row to style</param>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressViewConverterGroupColorAdder.GetGroupBreakNames(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Report)">
            <summary>
            Returns an ordered list of the group break names of each section on the report
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="advancedReport">The standard reoprt from which to get the group break names</param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.ExpressView.ExpressViewConverterOptions">
            <summary>
            Options for ExpressViewConverter.ConvertToAdvancedReport
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.IncludeAllAggTypes">
            <summary>
            If true, adds a group/report footer row for every aggregate type.  This is used in the ExpressView 
            designer to pre-calculate all aggregates so the user can switch agg types without going a server callback.
            If false, only aggcount is added to the report and group footers.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.IncludePageHeader">
            <summary>
            If true, adds a page header containing column header text
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.IncludeTotalsText">
            <summary>
            If true, includes descriptive text for totals eg. "Report totals," "Total for OrderId"
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.FlattenGroups">
            <summary>
            If false, report headers/footers and group headers/footers are not included in the converted report
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.IncludeColumnHeaderText">
            <summary>
            If true, column titles will be added as the last row of the last group header
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.PadSectionsWithBlankRows">
            <summary>
            If true, some sections will be separated using a blank row to make the report output more easily readable
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.UseGroupColors">
            <summary>
            If true, colors will be used to identify nested groupings and detail headers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.UseInvariantDataFormats">
            <summary>
            If true, data cell formats will be set to "Text."  This is used in the ExpressView designer where
            we want to always pass the culture-invariant-format data to the client so all formatting can happen there.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.Adjustments">
            <summary>
            Represents user-specific adjustments that have been made to the ExpressView.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.DashboardVisualizationFilters">
            <summary>
            Serializable filters that are created with an advanced filter window on the client. Applied as hard filters in execution
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.DynamicFilters">
            <summary>
            Filters applied as dynamic filters in execution. Can be changed and will pull from the intermediate file
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewConverterOptions.ExportAsDashboardVisualization">
            <summary>
            True if the ExpressView is a visualization on a dashboard
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.DbRowLimitCounter">
            <summary>
            Counter to keep track of row limit step counts.  This is used in conjunction with admin row limit step size to determine actual row limit
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.OnDeserialization">
            <summary>
            Should be called after the report has been deserialized
            If we have an ApiReportOptions block which expresses an Entity we'll inject it into the EntityCollection
            [EX-9722]
            Load any custom entities
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.ScaleColumnWidthsForExport(System.String,WebReports.Api.ExpressView.ExpressView)">
            <summary>
            If the ExpressView is getting exported to PDF or RTF, this will scale the column widths (if necessary)
            to fit onto the output pages
            </summary>
            <param name="exportTypeString"></param>
            <param name="expressView"></param>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.ApiReportOptions">
            <summary>
            Access the wrApiReportOptions for this ExpressView. 
            This is primarily used to a new dynamic Entity obtained
            from the SQLStmt in the ApiReportOptions
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.SingleCategoryId">
            <summary>
            If the ExpressView was designed with the Admin Console "Limit Reports and Visualizations to One Category"
            flag set to true, this represents the ID of the category from which all entities on the report should be
            drawn.  This is used for "multiple data models" like Autotask uses (see "Multiple Data Models" in the 
            Exago tech guide).  If the report was designed with the "Limit Reports and Visualizations to One Category"
            flag set to false, this field will be null, indicating that the "multiple data models" logic will not be used.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.GroupByFields">
            <summary>
            A list of fields or formulas by which to group.  Always has the database names of fields and entities
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.Columns">
            <summary>
            The list of columns on the report
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.AllFilters">
            <summary>
            A list of filters, all of which must be true for a record to pass (These filters are ANDed together
            during execution).  The AllFilters collection is ANDed with the AnyFilters collection to make the
            full filters collection when the ExpressView is converted to a standard report for execution.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.AnyFilters">
            <summary>
            A list of filters, any of which can be true for a record to pass (These filters are ORed together
            during execution.  The AllFilters collection is ANDed with the AnyFilters collection to make the
            full filters collection when the ExpressView is converted to a standard report for execution.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.TopNFilter">
            <summary>
            Details about the top/bottom filter on the report, if one has been applied
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.Sorts">
            <summary>
            A list of sorts to apply to the report
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.Formatting">
            <summary>
            Formatting for all group headers, detail columns, group footers, and column headers on the report
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.ColumnHeaderLabels">
            <summary>
            List of labels to be shown in the detail header cells. If null, use the default value
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.DataFormatting">
            <summary>
            Data formatting for all group headers, detail columns, and group footers on the report
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.Chart">
            <summary>
            Settings/formatting for a visualization of the report data
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.ExportSettings">
            <summary>
            Settings specific to exporting an ExpressView.  This class maps directly to the "Export Settings"
            menu in the ExpressView designer.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.UseTopN">
            <summary>
            Indicates whether or not we will use this topn filter for execution
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressView.IncludeDetailRows">
            <summary>
            Indicates whether we should try to calculate aggregates in the database, and suppress detail rows
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.CustomEntitiesXml">
            <summary>
            Encode the Custom Entities in an XML block.
            This is used primarily to save the data when building
            and restoring from the ClientExpressView
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.CustomJoinsXml">
            <summary>
            Encode the Custom Joins in an XML block.
            This is used primarily to save the data when building
            and restoring from the ClientExpressView
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.CustomEntities">
            <summary>
            Used for Serialization. Expose a collection of
            the Report affinity Entities
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.CustomJoins">
            <summary>
            Used for Serialization. Expose a collection of the
            Report affinity JOINs
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.AdvancedSorts">
            <summary>
            The collection of Sort objects that the ExpressView would contain when converted to an Advanced Report
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressView.Api">
            <summary>
            This object is used to store info about the report when editing or executing the report through the API.
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.ContainsWidgetTypes">
            <summary>
            Returns an array of Type objects describing which widget types the ExpressView contains ie. [Chart, Map, Gauge, ...]
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.ValidateChart">
            <summary>
            Validates the chart; makes sure the label and value fields exist. 
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.GetDataFieldsFromString(System.String)">
            <summary>
            Parses the data fields contained in a formula string, or a simple x.y text
            </summary>
            <param name="columnText">The string that defines the column or group by field</param>
            <returns>Returns a list of all the entities.fieldnames (no curly braces) referenced in the column text</returns>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.HandleUnknownElement(System.Object,System.Xml.Serialization.XmlElementEventArgs)">
            <summary>
            This code will handle the processing of legacy ExpressViews, that contain the now obsolete variables 
            "Entity" and "FieldName", and translate those variables into the new "ColumnText" variable
            </summary>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.Serialize">
            <summary>
            Serializes current DashboardReport object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:WebReports.Api.ExpressView.ExpressView.ValidateNewFeatures(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressView)">
            <summary>
            For features that were added after the initial release of ExpressView (v2016.3), this function
            checks to make sure they exist in the loaded report.  If any features weren't stored with the 
            report, this function will initialize them with defaults.
            </summary>
            <param name="expressView"></param>
        </member>
        <member name="T:WebReports.Api.ExpressView.ExpressViewApiData">
            <summary>
            This class is used to store info about the report when editing or executing the report through
            the API.  Since the file name is a GUID when going through the API, we need to preserve
            the original report name for other parts of the code that need it.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewColumn.Entity">
            <summary>The entity name, always the ID of the entity
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewColumn.FieldName">
            <summary>The field name, always the database name of the column
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewColumn.ColumnText">
            <summary>
            The text that is displayed in the column groupheader, and is evaluated to fill the detail rows. 
            Can be a formula, or an entity+fieldname, where the entity name is always the ID of the entity, 
            and the field name is always the database name of the column
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewColumn.Width">
            <summary>The width of the column in pixels</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewColumn.AggType">
            <summary>The aggregate method to use when summarizing data in group footers</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewColumn.FormulaTitle">
            <summary>
            Used to generate pretty, user-friendly sample data with formulas
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressViewColumn.IsFormula">
            <summary>True If this column contains a formula</summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressViewColumn.IsBlank">
            <summary>True If this column is a blank column</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewGroupByField.BreakText">
            <summary>
            The text that the group should break on (eg. "Employees.LastName," "={Employees.LastName} &amp; {Employees.FirstName}"
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewGroupByField.IsSortedAscending">
            <summary>
            If true, the group headers will be sorted in ascending order, otherwise descending
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewGroupByField.FormulaTitle">
            <summary>
            Used to generate pretty, user-friendly sample data with formulas
            </summary>
        </member>
        <member name="P:WebReports.Api.ExpressView.ExpressViewGroupByField.IsFormula">
            <summary>
            True If this group header contains a formula
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewFilter.FilterText">
            <summary>
            The field or formula against which to filter eg. Employees.LastName
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewFilter.Operator">
            <summary>
            The operator to use when filtering
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewFilter.Values">
            <summary>
            The value(s) by which to filter.  For some operators (like one-of or between) there can be multiple values
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewFilter.Title">
            <summary>
            The name of the filter that gets displayed
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewTopNFilter.Direction">
            <summary>
            Indicates whether we want the top or bottom records
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewTopNFilter.N">
            <summary>
            The number of records to be returned
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewTopNFilter.AggType">
            <summary>
            The aggregate operator to use when calculating the sort/filter metric
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewTopNFilter.FilterField">
            <summary>
            The name of the field that we are using to calculate the sort/filter metric
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewTopNFilter.ForEachGroups">
            <summary>
            The name(s) of the field(s) to group the sort/filter metric by
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSort.SortText">
            <summary>
            The sort text ie. Employees.LastName
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSort.DisplayText">
            <summary>
            The optional user-friendly name for the sort ie. MySort 
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSort.IsAscending">
            <summary>
            If true, sort in ascending order, otherwise, sort in descending order
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewDataFormatting.GroupHeaderFormats">
            <summary>
            List of formatting settings for the tabular report group headers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewDataFormatting.GroupFooterFormats">
            <summary>
            List of formatting settings for the tabular report group footers, indexed by group, then column
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewDataFormatting.DetailFormats">
            <summary>
            List of formatting settings for the tabular report detail columns
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewDataFormatting.ReportFooterFormats">
            <summary>
            List of formatting settings for the tabular report footers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.FormatTheme">
            <summary>
            The name of the style/color theme applied to group headers, detail columns, group footers, and column headers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.GroupHeaderFormats">
            <summary>
            List of formatting settings for the tabular report group headers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.GroupFooterFormats">
            <summary>
            List of formatting settings for the tabular report group footers, indexed by group, then column
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.ColumnHeaderFormats">
            <summary>
            List of formatting settings for the tabular report detail column headers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.DetailFormats">
            <summary>
            List of formatting settings for the tabular report detail columns
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.ReportFooterFormats">
            <summary>
            List of formatting settings for the tabular report footers
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.RowShading">
            <summary>
            List of hex colors defining the detail column row shading
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewReportFormatting.GroupColors">
            <summary>
            List of hex colors defining the radial menu colors
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.FontFamily">
            <summary>
            The name of the font applied to the ExpressView section text
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.FontSize">
            <summary>
            The size of the ExpressView text
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.FontColor">
            <summary>
            The text color of the ExpressView section cells
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.BackgroundColor">
            <summary>
            The background color of the ExpressView section cells
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.Weight">
            <summary>
            The font style of the section cells, one of "normal", "italic", "bold", "boldItalic"
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.Underline">
            <summary>
            Underline styling of the section cells, one of "none", "single", "double"
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.HorizontalAlign">
            <summary>
            The horizontal alignment of text in the section cells, one of "left", "center", "right", "justify"
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.VerticalAlign">
            <summary>
            The vertical alignment of text in the section cells, one of "top", "middle", "bottom"
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.WrapText">
            <summary>
            Whether or not the section cell contents will be wrapped to a new line
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.UniformBorder">
            <summary>
            If true, "top" border formatting is applied to all cell borders
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionFormatting.BorderFormatting">
            <summary>
            Contains the color and weight styling for all four border sides
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.TopColor">
            <summary>
            The color of the border top
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.TopWeight">
            <summary>
            The width (in pixels) of the top border
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.LeftColor">
            <summary>
            The color of the left border
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.LeftWeight">
            <summary>
            The width (in pixels) of the left border
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.BottomColor">
            <summary>
            The color of the border bottom
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.BottomWeight">
            <summary>
            The width (in pixels) of the bottom border
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.RightColor">
            <summary>
            The color of the right border 
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewSectionBorderFormatting.RightWeight">
            <summary>
            The width (in pixels) of the right border 
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.ChartType">
            <summary>
            The name of the selected chart type
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.ValuesFields">
            <summary>
            Field names that are shown as values (Y axis for scatter) on the chart 
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.LabelsFields">
            <summary>
            Field names that are shown as labels (X axis for scatter) on the chart
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.DataMethod">
            <summary>
            Enumeration of the 3 different possible data layouts
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.Height">
            <summary>
            Rendered Chart height
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.Width">
            <summary>
            Rendered Chart width
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.ChartLocation">
            <summary>
            Location of the chart design pane on the report canvas
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.ShowChart">
            <summary>
            True if the chart is visible. False if the chart is hidden or does not exist
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.ErrorMessage">
            <summary>
            If the chart is invalid, this is the message explaining why
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChart.Appearance">
            <summary>
            Various settings controlling the chart aesthetics
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.PageSize">
            <summary>
            The page size of the export
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.PageOrientation">
            <summary>
            The orientation of the export
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.FitToPageWidth">
            <summary>
            Whether or not to fit the report content to the width of the export page
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.IncludeSetupInfo">
            <summary>
            Whether or not to include setup info at the top of the export
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.UseGroupColors">
            <summary>
            Whether or not to use the group colors from the ExpressView in the exported document
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.NoDataQualifiedMode">
            <summary>
            Whether to show the no data qualified message, or allow the report to render
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.FlattenGroupsInExcelAndCsv">
            <summary>
            If true, all groups will be removed and the output will be represented as flat records in the export
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewExportSettings.StyleCellsInExcel">
            <summary>
            If true, cell formatting will not be passed through to Excel exports
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartFieldObject.ReportColumnIndex">
            <summary>
            The index of the associated reportColumn, in a list with all the detail columns, followed by all the group headers
            </summary>
        </member>
        <member name="T:WebReports.Api.ExpressView.ExpressViewChartUpdateOption">
            <summary>
            For layout 1 (PointsInSeries), we need to distinguish between
            the cell references for the point labels and the cell references 
            for the point values (both are taken from the report footer)
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartUpdateOption.ValuesOnly">
            <summary>
            Only update the chart values
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartUpdateOption.LabelsOnly">
            <summary>
            Only update the chart labels
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartUpdateOption.ValuesAndLabels">
            <summary>
            Update the chart values and labels
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartUpdateOption.None">
            <summary>
            Don't update the chart references
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.Title">
            <summary>The title of the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.Subtitle">
            <summary>The subtitle of the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.XAxisTitle">
            <summary>The X-Axis title of the chart. N/A for charts without axes</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.YAxisTitle">
            <summary>The Y-Axis title of the chart. N/A for charts without axes</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.ValueAxisMin">
            <summary>If not null, indicates the lower bound of the value axis</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.ValueAxisMax">
            <summary>If not null, indicates the upper bound of the value axis</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.ExcludeLessThan">
            <summary>If not null, all values less than this value will be filtered from the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.ExcludeGreaterThan">
            <summary>If not null, all values greater than this value will be filtered from the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.PointLabelsContent">
            <summary>Describes what content, if any the point labels, should display.  Valid values are "None" | "DataValues" | "Percent" | "DataLabels" | "DataLabelsAndDataValues"</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.LegendDisplay">
            <summary>Indicates where the legend (if applicable) should be positioned</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.LabelDisplay">
            <summary>Describes how the data labels should be oriented.  Valid values are "auto" | "slant" | "wrap" | "stagger" | "rotate" | "none"</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.KPIValueFormat">
            <summary>Describes how values shown on KPI's should be formatted.  Valid values are "shortScale" | "scientificNot" | "expanded"</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.NumberFormat">
            <summary>Specifies how to format all numeric values on the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.DataColorInfo">
            <summary>Describes how the points on the chart should be colored</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.Is3D">
            <summary>True if the 3D version of the chart type should be used</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.Style">
            <summary>Describes various aesthetics of the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.SortDataBy">
            <summary>Describes how The chart data should be sorted</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.SortDataByDirection">
            <summary>Describes whether to sort the chart data in ascending or descending order</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartAppearance.UseScroll">
            <summary>If true, allows horizontal scrolling for certain chart types when there is enough data to cause scrolling</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartDataColorInfo.Type">
            <summary>Indicates whether to color the chart points with a theme, linear range between two colors, or using a user-provided list of colors</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartDataColorInfo.ThemeName">
            <summary>The name of the color theme to use to color the chart points.  Only applicable if Type == wrExpressViewChartDataColorType == wrExpressViewChartDataColorType.Theme</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartDataColorInfo.LinearRangeColors">
            <summary>The colors to use to generate a linear range of colors for the chart points.  Only applicable if Type == wrExpressViewChartDataColorType == wrExpressViewChartDataColorType.LinearRange</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartDataColorInfo.CustomColors">
            <summary>The explicit hex color values to use to color the chart points.  Only applicable if Type == wrExpressViewChartDataColorType == wrExpressViewChartDataColorType.CustomColors</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.TitlePosition">
            <summary>Controls the placement of the title and subtitle on the chart</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.TitleFontSize">
            <summary>The size of the chart title, in points</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.TitleFontColor">
            <summary>The hex color of the chart title</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.TitleFontFamily">
            <summary>The font family of the chart title</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.SubtitleFontSize">
            <summary>The size of the chart subtitle, in points</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.SubtitleFontColor">
            <summary>The hex color of the chart subtitle</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.SubtitleFontFamily">
            <summary>The font family of the chart subtitle</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.LabelsFontSize">
            <summary>The size of all other chart labels, in points</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.LabelsFontColor">
            <summary>The hex color of all other chart labels</summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewChartStyle.LabelsFontFamily">
            <summary>The font family of all other chart labels</summary>
        </member>
        <member name="T:WebReports.Api.ExpressView.ExpressViewAdjustments">
            <summary>
            Represents user-specific adjustments that have been made to the ExpressView.  These are saved using the User Preferences system.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewAdjustments.ChartViewRange">
            <summary>
            The number of data labels (from left to right) to show in the chart's viewport.  Only applies to zoomline charts.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExpressView.ExpressViewAdjustments.ChartScrollPosition">
            <summary>
            The position (a number [0,1] to scroll to)
            </summary>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ReportMgmtBase.GetCachedReportList(System.String)">
            <summary>
            Return the previous list if its still valid. 
            We cache on the session id and the reportPath
            Use the abstract FillReportList() to get all the data
            when we need to refresh or load the cache
            This can be suppressed with the general setting IsReportListCacheEnabled
            NOTE: we are holding the lock on the cache while we 
            fill it - should find a way to avoid that but somehow block
            other users that want the same element
            </summary>
            <param name="reportPath"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ReportMgmtBase.ClearReportListCache">
            <summary>
            Called by methods which change the list of reports and folders
            and thus invalidates the cache
            We invalidate all caches since we don't know how the changes
            will affect any particular user
            </summary>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ReportMgmtFileSystem.GetReportType(System.String,System.String)">
            <summary>
            Search for a report file in order to determine the type of report
            
            The reportName is assumed to not have an extension.
            Note: the reportName may contain a period 
            We search for all the possible report files by appending the legal extentions.
            If that fails to find a file we test for the possibility that the name contained
            extensions. If removing that extension would have found the file we throw an exception
            
            Normally simple return NULL for no report found
            </summary>
            <param name="reportName">Name of the report, prefixed with relative directory but no standard extension</param>
            <param name="udfData">ignored</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.AddThemeList(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Remember the list of themes for a specific type
            </summary>
            <param name="themeType"></param>
            <param name="themes"></param>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.GetTheme(System.String,System.String)">
            <summary>
            Get the details of a theme
            </summary>
            <param name="themeType"></param>
            <param name="themeName"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.ExistTheme(System.String,System.String)">
            <summary>
            Return True if the theme exists in our cache
            </summary>
            <param name="themeType"></param>
            <param name="themeName"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.AddTheme(System.String,System.String,System.String)">
            <summary>
            Record the details of this theme
            </summary>
            <param name="themeType"></param>
            <param name="themeName"></param>
            <param name="themeData"></param>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.ClearTheme(System.String,System.String)">
            <summary>
            Clear our knowledge of this theme and the list of themes of the type
            </summary>
            <param name="themeType"></param>
            <param name="themeName"></param>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.CheckAge(System.DateTime)">
            <summary>
            Return True if the time stamp is still valid - i.e. within the last hour
            </summary>
            <param name="createTimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.ReportMgmt.ThemeCache.GetCache(System.String)">
            <summary>
            Get the theme cache associated with the particular path. 
            Since the path could change and represent different theme results
            we maintain our cache relative to that path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.FilterValueProvider.#ctor(WebReports.Api.Common.PageInfo,System.Data.DataColumnCollection,System.Boolean)">
            <summary>
            Constructs a new SortValueProvider, used for formula sorts
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="columns">The column collection from the DataTable being sorted</param>
            <param name="useEntityNames">If true, indicates column names in the DataTable are stored in fully-qualified format eg. Orders.OrderDate, if false, indicates column names only use the field names eg. OrderDate</param>
        </member>
        <member name="M:WebReports.Api.Reports.FilterValueProvider.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="variable">The name of the variable</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportTopNFilterCollection">
            <summary>
            A collection of Filter objects
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportTopNFilterCollection.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Initialize a new Filter collection.
            </summary>
            <param name="pageInfo">The PageInfo object.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportTopNFilterCollection.LoadData(System.Data.DataSet)">
            <summary>
            Loads the collection of filters from a DataSet.
            </summary>
            <param name="ds">The DataSet to load the filter collection from.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportTopNFilterCollection.ToString">
            <summary>
            Returns a summary string describing the topN items
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.TopNItem.#ctor">
            <summary>
            Implemented so we can deserialize TopNItems
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.TopNItem.UseTopNItem">
            <summary>
            Determines whether or not we are using this topn item
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.TopNItem.Action">
            <summary>
            Determines whether or we want the top or bottom results of this report
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.TopNItem.CellId">
            <summary>
            The Id of the cell we are sorting/filtering on
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.TopNItem.Number">
            <summary>
            Number of results we are expecting to get back
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.TopNItem.ForEachGroup">
            <summary>
            List of strings representing the groups we want to aggregate by.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.SortValueProvider.#ctor(WebReports.Api.Common.PageInfo,System.Data.DataColumnCollection,System.Boolean)">
            <summary>
            Constructs a new SortValueProvider, used for formula sorts
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="columns">The column collection from the DataTable being sorted</param>
            <param name="useEntityNames">If true, indicates column names in the DataTable are stored in fully-qualified format eg. Orders.OrderDate, if false, indicates column names only use the field names eg. OrderDate</param>
        </member>
        <member name="M:WebReports.Api.Reports.SortValueProvider.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="variable">The name of the variable</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="T:WebReports.Api.Reports.WidgetCellReference">
            <summary>
            The WidgetCellReference class represents a variable built by WidgetCellReferenceCollectionBuilder. Each WidgetCellReference variable keeps a queue of values.
            The queue is built up during the first pass and is consumed during the second pass. This building/consuming is controlled by the
            ProcessSectionForSave and ProcessSectionForRead functions. It is important that the sections are processed in the same order both times,
            otherwise values will become unpredictable and/or errors may occur.  Each "value" in the queue is actually a list of values to be consumed by
            a widget in ReportExecutionData; there is one value entry built per widget instance.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Cell,System.String,WebReports.Api.Reports.Cell)">
            <summary>
            Construct a new WidgetCellReference object, which represents a cell that is being referred to by a widget
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="cell">The cell that this reference should be created for</param>
            <param name="token">A unique token for this cell reference</param>
        </member>
        <member name="P:WebReports.Api.Reports.WidgetCellReference.OtherWidgetCellReferences">
            <summary>
            Gets all the cell references, excluding this, attached to the widget.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.WidgetCellReference.NumberOfTimesSaved">
            <summary>
            The number of times we have saved a value to the current instance of currentValues
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.WidgetCellReference.ToRefs">
            <summary>
            An array of WidgetCellReference objects that this cell references
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.AddToRef(WebReports.Api.Reports.WidgetCellReference)">
            <summary>
            Add a WidgetCellReference that this cell references within it's text
            </summary>
            <param name="toRef"></param>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.ProcessSectionForSave(WebReports.Api.Reports.Section,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            During the first pass, indicate a section has broke and to save any cell reference values if necessary.
            </summary>
            <param name="section">The section that broke</param>
            <param name="cellVariableDataProvider">The data provider to get the current values for those variables</param>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.GetExecutionPos">
            <summary>
            Get this WidgetCellReference's "Execution Position" which represents in
            which order this WidgetCellReference is saved in the execution process
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.NormalizeWidgetCellReferenceValueCounts(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Drops the previous value if necessary.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.RepeatWidgetVariableValues(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Repeat either this or another WidgetCellReference's, current value in case the widget references
            cells in different groups that repeat at different rates ie. Employees header and 
            =Month({Orders.OrderDate}) footer.
            </summary>
            <param name="cellVariableDataProvider">The cell variable data provider.</param>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.ClearCache">
            <summary>
            Clear the current cached value
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.WidgetCellReference.NumValues">
            <summary>
            Gets the number of values currently stored
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.ProcessSectionForRead(WebReports.Api.Reports.Section)">
            <summary>
            During the second pass, control when the data "breaks," ie. when we should dequeue the 
            value used by the previous iteration of the widget.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.GetLinkedValues">
            <summary>
            Use this function to get values used by this widget for linking to another report
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.WidgetCellReference.WidgetCellReferenceValueProvider">
            <summary>
            This is an internal class used to provide the data for calculating the value of this referenced cell. We can't
            use the normal mechanisms to obtain the value because cell references must be 100% evaluatable at any time (forward references).
            The first pass builds a queue of these WidgetCellReferenceValueProvider objects, the second pass uses them to derive the value
            of the cell reference.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.WidgetCellReferenceValueProvider.#ctor(WebReports.Api.Reports.CellVariableCollection,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Create a new WidgetCellReferenceValueProvider.
            </summary>
            <param name="cellVariableCollection">The variable collection that makes up this reference cell</param>
            <param name="cellVariableDataProvider">The data provider to get the current values for those variables</param>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.WidgetCellReferenceValueProvider.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="name">The name of the variable</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReference.WidgetCellReferenceValueProvider.SetReferenceValue(System.String,System.String)">
            <summary>
            Given the token of a cell reference variable, set its value in this data value provider
            </summary>
            <param name="token">The token to set</param>
            <param name="value">The value to set it with</param>
        </member>
        <member name="T:WebReports.Api.Reports.WidgetCellReferenceCollectionBuilder">
            <summary>
            A WidgetCellReferenceCollectionBuilder is a CellVariableCollection that builds a collection of
            WidgetCellReferences, which provide data to widgets during the second pass of execution.
            Unlike other CelLVariableCollectionBuilders, this class does not parse cell text to find instances
            of a certain variable type, it checks to see if the cell is referred to by a widget, then if it is,
            adds it to the collection.  This collection builder creates WidgetCellReference objects (which 
            extends CellVariable)
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReferenceCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create the CellReferenceCollectionBuilder object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.Reports.WidgetCellReferenceCollectionBuilder.GetReferencedCells(WebReports.Api.Reports.Cell)">
            <summary>
            Retrieve a list of cells that are referenced by the provided cell
            </summary>
            <param name="cell">The cell containing the widget</param>
            <returns>A list of Cell objects that are being referred to by the widget cell</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportObjectFactory">
            <summary>
            ReportObjectFactory is the entry point to application report manipulation. This factory manages access to reports via API, updating schedules on 
            certain actions (rename, delete), and creation of new reports. This functionality essentially sits on top of ReportMgmtBase and ReportScheduler
            allowing the exploiter a cleaner API for report management within the application.
            
            All reports in the application derive from the ReportObject object.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Create(WebReports.Api.wrReportType,System.Boolean)">
            <summary>
            Create a new report object, it has not yet been saved into the report repository. The created report object is made the active report object.
            </summary>
            <param name="reportType">The type of report object to create.</param>
            <returns>The report object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.LoadFromRepository(System.String,System.String,System.Boolean)">
            <summary>
            Load an existing report object from the report repository. The loaded report object is made the active report object.
            </summary>
            <param name="name">The name of the report object to load from the report repository.</param>
            <param name="udfData">Any user defined data needed to load report</param>
            <param name="setActive">Whether or not to set the loaded report as the new active report</param>
            <returns>The report object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.LoadFromRepository(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Load an existing report object from the report repository. The loaded report object is made the active report object.
            </summary>
            <param name="name">The name of the report object to load from the report repository.</param>
            <param name="validate">When true, the report will be validated after being loaded (populate ReportObject.ValidationErrors)</param>
            <param name="udfData">Any user defined data needed to load report</param>
            <param name="setActive">Whether or not to set the loaded report as the new active report</param>
            <returns>The report object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.LoadFromApi(System.Boolean,System.Boolean)">
            <summary>
            Load the most recently saved report object previously saved to an api area via SaveToApi.
            </summary>
            <param name="validate">When true, the report will be validated after being loaded (populate ReportObject.ValidationErrors)</param>
            <param name="deleteOnLoad">When true, the api report will be deleted once it has been loaded</param>
            <returns>The report object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.LoadFromApi(System.String,System.Boolean,System.Boolean)">
            <summary>
            Load an existing report object previously saved to an api area via SaveToApi.
            </summary>
            <param name="name">The name of the report object to load from the api area.</param>
            <param name="validate">When true, the report will be validated after being loaded (populate ReportObject.ValidationErrors)</param>
            <param name="deleteOnLoad">When true, the api report will be deleted once it has been loaded</param>
            <returns>The report object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.LoadFromData(System.String)">
            <summary>
            This internal only method allows AJAX calls to reload a standard report during an edit session.
            </summary>
            <param name="reportData">The report data that gets past back and forth between client and server.</param>
            <returns>The report object as a Report object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Delete(System.String,System.String)">
            <summary>
            Delete an existing report object from the report repository. Note this report will be made the active report object.
            </summary>
            <param name="name">The name of the report object to delete from the report repository.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Delete(WebReports.Api.Reports.ReportObject,System.Boolean,System.String)">
            <summary>
            Delete an existing report object from the report repository. Note this report object will be made the active report object.
            </summary>
            <param name="reportObject">The report object that is to be deleted.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Delete(System.Boolean,System.String)">
            <summary>
            Delete the active report object in the report repository.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Rename(System.String,System.String,System.String)">
            <summary>
            Rename an existing report object in the report repository. Note this report will be made the active report object.
            </summary>
            <param name="name">The name of the report to rename</param>
            <param name="newName">The new name for this report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Rename(WebReports.Api.Reports.ReportObject,System.String,System.String)">
            <summary>
            Rename an existing report object in the report repository. Note this report object will be made the active report object.
            </summary>
            <param name="reportObject">The report object that is to be renamed.</param>
            <param name="newName">The new name for this report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Copy(System.String,System.String,System.String)">
            <summary>
            Copy an existing report object in the report repository into another location in the report repository.
            </summary>
            <param name="name">The name of the report to copy</param>
            <param name="newName">The copy name for this report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.Copy(WebReports.Api.Reports.ReportObject,System.String,System.String)">
            <summary>
            Copy an existing report object in the report repository into another location in the report repository.
            </summary>
            <param name="reportObject">The report object that is to be copied.</param>
            <param name="newName">The copy name for this report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.SaveToRepository(WebReports.Api.Reports.ReportObject)">
            <summary>
            Save the provided report object into the report repository.
            </summary>
            <param name="reportObject">The report object to save into the repository.</param>
            <returns>True if the save was successful, false otherwise.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.SaveToApi(WebReports.Api.Reports.ReportObject)">
            <summary>
            Save the provided report object to an api area allowing the application to load the report (including any changes made to it) on startup.
            </summary>
            <param name="reportObject">The report object to save into the temporary area</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.CheckApiReportWasSaved(WebReports.Api.Common.PageInfo,WebReports.Api.wrApiAction)">
            <summary>
            Verify that the caller has correctly setup the report
            by calling SaveToApi before trying to jump to the active system
            </summary>
            <param name="pageInfo"></param>
            <param name="action"></param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObjectFactory.NormalizeReportName(System.String)">
            <summary>
            Remove any leading path separator
            If the .wr extention is present then remove it
            </summary>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportObject">
            <summary>
            An abstract representation of a report in the system.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportObject.DbRowLimitCounter">
            <summary>
            The row limit counter is used in conjunction with Admin settings to calculate the Effective DB Row Limit for an execution of this report
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportObject.RangeStart">
            <summary>
            First data row index for a data range limit
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportObject.RangeEnd">
            <summary>
            Last data row index for a data range limit
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportObject.ResumeDataPull">
            <summary>
            ResumeDataPull flags the report during execution to treat it as resuming data instead of new or replacement data
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportObject.CurrentLoadedPages">
            <summary>
            The number of pages currently loaded browser side.  This information is used when resuming data pulls
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportObject.MetOrExceededDbRowLimit">
            <summary>
            Flag indicating whether or not the report hit the effective db limit during execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.Id">
            <summary>
            Retrieve the unique id of this report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.Name">
            <summary>
            Retrieve the full eWebReports name of the report from the root report directory.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ReportType">
            <summary>
            Retrieve the type of report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ParentReportType">
            <summary>
            Retrieve the parent type of report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ParentId">
            <summary>
            Retrieve the unique parent id of this report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ExportType">
            <summary>
            Retrieve the saved export type for this report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ReportTreeShortcut">
            <summary>
            Determine whether this report should be run from the viewer by default through the report tree viewer.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.Description">
            <summary>
            Retrieve the description text for this report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.FilterDescription">
            <summary>
            Retrieve the filter description text for this report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.AllowOutputHtml">
            <summary>
            Determine whether this report object can be exported to HTML.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.AllowOutputPdf">
            <summary>
            Determine whether this report object can be exported to PDF.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.AllowOutputCsv">
            <summary>
            Determine whether this report object can be exported to CSV.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.AllowOutputExcel">
            <summary>
            Determine whether this report object can be exported to Excel.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.AllowOutputRtf">
            <summary>
            Determine whether this report object can be exported to RTF.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.Entities">
            <summary>
            Returns the report Entities for advanced/ExpressView/Express reports. Not implemented for dashboard viz's, returns empty list for dashboards and chained reports
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ServerEvents">
            <summary>
            Returns the report Server Events for advanced/ExpressView reports. Not implemented for dashboards and chained reports
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.IsNew">
            <summary>
            Whether this report object is new (i.e. not in report repository)
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.GetXml">
            <summary>
            Retrieve the XML for this report object.
            </summary>
            <returns>The XML for this report object.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.GetOuterXml">
            <summary>
            Retrieve the XML for this report object.
            </summary>
            <returns>The XML for this report object.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.ContainsWidgetTypes">
            <summary>
            Returns an array of Type objects describing which widget types the report contains ie. [Chart, Map, Gauge, ...]
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.FolderName">
            <summary>
            Retrieve the full eWebReports folder path of the report from the report repository.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.BaseName">
            <summary>
            Retrieve the eWebReports name of the report without the folder path.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ExecExportType">
            <summary>
            Retrieve the current effective export type for this report.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.IsEditAllowed">
            <summary>
            Determine whether editing of this report is allowed by the current configuration.  ie., can the user view this report type, and is the containing folder visible?
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.IsExecuteAllowed">
            <summary>
            Determine whether execution of this report is allowed by the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.IsReadOnly">
            <summary>
            Determine whether this report is considered readonly by the current configuration.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportObject.ValidationErrors">
            <summary>
            Retrieve a list of any validation errors logged from the most recent Validate call (or load).
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.ResetForCopy">
            <summary>
            [EX-9209] The report object is being copied - do any cleanup necessary
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.Validate(System.Boolean)">
            <summary>
            Validate the current report. The ValidationErrors property will be refreshed to contain the most recent validation errors.
            </summary>
            <param name="removeAllStaleData">When true anything that is considered stale will be automatically removed from the report, otherwise they will be modified and/or preserved</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.SerializeData(System.Boolean,System.Boolean)">
            <summary>
            Retrieve the serialized xml representation of this report object.
            </summary>
            <param name="serializeForApi">When true, the report serialization is for api use, otherwise it is for report repository use</param>
            <param name="embedExternals">When true, the serialized report will include external resources, such as a document template</param>
            <returns>The serialized XML representation of this report object.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.CanEdit">
            <summary>
            Perform any report specific checking to determine if this report can be edited.
            </summary>
            <returns>true if this report can be edited, false otherwise.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.CanExecute">
            <summary>
            Perform any report specific checking to determine if this report can be executed.
            </summary>
            <returns>true if this report can be executed, false otherwise.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.ValidateData(System.Boolean)">
            <summary>
            Perform any report specific validation.
            </summary>
            <param name="removeAllStaleData">When true any stale data will be removed from the report, otherwise the stale data will remain.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportObject.IsExportTypeAllowed(WebReports.Api.wrExportType)">
            <summary>
            Determine if the export type is allowed for this report.
            </summary>
            <param name="exportType">The export type to check for</param>
            <returns>True if the export type is allowed, false otherwise.</returns>
            Print follows Pdf permissions
        </member>
        <member name="T:WebReports.Api.Reports.ReportValidationErrorType">
            <summary>
            The types of report validation errors that can happen. Not all validation error types are applicable to all report objects.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportValidationError">
            <summary>
            A report validation error representation.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportValidationError.ReportErrorType">
            <summary>
            The type of report validation error.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportValidationError.Data1">
            <summary>
            The first set of data related to this validation error.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportValidationError.Data2">
            <summary>
            The second set of data related to this validation error.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportDynamicFilter">
            <summary>
            A Dynamic Filter object is used to restrict the data returned after report execution (interactive output).
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilter.Validate(WebReports.Api.Common.PageInfo)">
            <summary>
            Determine whether this dynamic filter is valid.
            </summary>
            <returns>When the dynamic filter is valid will return ReportValidationErrorType.None, otherwise the reason this filter isn't valid</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilter.Save(WebReports.Api.Common.PageInfo,System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportDynamicFilter to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent row to attach to</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilter.ConvertFilterFunctionValues(WebReports.Api.Common.PageInfo)">
            <summary>
            Goes through the list of values for this dynamic filter and replaces
            any filter functions with the value returned by its evaluated formula
            </summary>
            <param name="pageInfo"></param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilter.Load(WebReports.Api.Common.PageInfo,System.Data.DataRow)">
            <summary>
            Given a datarow of type dynamicfilter, build a ReportDynamicFilter object.
            </summary>
            <param name="dr">The data rows</param>
            <returns>The ReportDynamicFilter object initialized from the data row</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportDynamicFilterCollection">
            <summary>
            A collection of Dynamic Filter objects
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilterCollection.Validate(WebReports.Api.Common.PageInfo,System.Collections.Generic.List{WebReports.Api.Reports.ReportValidationError})">
            <summary>
            Determine whether the dynamic filters are invalid. Any invalid dynamic filters will be removed from the collection and
            a validation error will be added to the current report object.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilterCollection.GetReportFilterCollection(WebReports.Api.Common.PageInfo)">
            <summary>
            Returns a ReportFilterCollection from collection of dynamic filters
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilterCollection.Save(WebReports.Api.Common.PageInfo,System.Data.DataSet)">
            <summary>
            Save a ReportCrossTabCollection to a specific data set as a child of a specific datarow
            </summary>
            <param name="pageInfo">The pageinfo object</param>
            <param name="ds">The dataset to serialize to</param>
            <param name="dr">The parent</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportDynamicFilterCollection.Load(WebReports.Api.Common.PageInfo,System.Data.DataSet)">
            <summary>
            Given an array of datarows of type crosstab, build a ReportCrossTabCollection object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="cells">The collection of cells that defines this CrossTab styling</param>
            <param name="ds">The dataset that contains this CrossTab definition</param>
            <returns>The ReportCrossTabCollection object initialized from the data rows</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabLabelStyle">
            <summary>
            A CrossTab label style represents the unique style of a cross tabulation label. The number of cross tabulation styles depends on the number
            of CrossTab row headers. Note the most granular label style is not represented here, it is represented by ReportCrossTabTabulation.LabelCell.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabLabelStyle.#ctor(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell)">
            <summary>
            Create a ReportCrossTabLabelStyle object.
            </summary>
            <param name="crossTab">The CrossTab that this label style is part of</param>
            <param name="rowHeader">The row header (null gives you the most granular row label style)</param>
            <param name="cell">The cell to use as the style</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabLabelStyle.#ctor(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create a ReportCrossTabLabelStyle object which will be initialized internally.
            </summary>
            <param name="crossTab">The CrossTab that this tabulation style is part of</param>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabLabelStyle.RowHeader">
            <summary>
            The CrossTab row header part of the cross this style represents
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabLabelStyle.StyleCell">
            <summary>
            The cell representing the style of this cross tabulation style
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabLabelStyle.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabTabulationStyle to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent datarow</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabLabelStyle.Load(WebReports.Api.Reports.ReportCrossTab,System.Data.DataRow)">
            <summary>
            Given a datarow obtained from complex type style, build a ReportCrossTabTabulationStyle object.
            </summary>
            <param name="crossTab">The CrossTab this style will be a part of</param>
            <param name="styleDr">The data row, the child of the element whose type is style</param>
            <returns>The ReportCrossTabTabulationStyle object initialized from the data</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod">
            <summary>
            The CellAggMethod interface defines how data is to be aggregated.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggMethod.Evaluate(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean)">
            <summary>
            Obtain the current value of the data that is to be aggregated
            </summary>
            <param name="cellVariableValueProvider">The data provider</param>
            <returns>The current value</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggMethod.EvaluateAsDecimal(WebReports.Api.Reports.ICellVariableValueProvider,System.Decimal@)">
            <summary>
            Obtain the current value of the data that is to be aggregated as a double
            </summary>
            <param name="cellVariableValueProvider">The data provider</param>
            <param name="result">The current value as a double (or zero if cannot convert)</param>
            <returns>true if the value was successfully evaluated as a double, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggMethod.EvaluateAsComparable(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Try to parse the current value as a double or DateTime string depending on the format.
            </summary>
            <param name="cellVariableValueProvider">The data provider</param>
            <returns>The current value as a double, DateTime, or zero if cannot convert</returns>
        </member>
        <member name="P:WebReports.Api.Reports.CellAggMethod.HasKeyFreeAggregate">
            <summary>
            [EX-9755] This method supports the key-free bahavior for aggregates AggSum, AggAvg, AggCount, RunningSum, AggVariance, AggStandardDeviation, AggMedian, AggMode.  Key-free behavior means to treat the 
            data field values as a bag of values, which can include duplicates.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Sum">
            <summary>
            The Summation aggregate method. This class will provide the aggregate sum of the function provided.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Count">
            <summary>
            The Count aggregate function. This class will provide the aggregate count of the function provided (how many times this function was processed).
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_DistinctCount">
            <summary>
            The Distinct Count aggregate function. This class will provide the aggregate count of the function provided (how many times this function was processed to a unique value).
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Avg">
            <summary>
            The Average aggregate function. This class will provide the aggregate average of the function provided.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Min">
            <summary>
            The Min aggregate function. This class will provide the aggregate minimum of the function provided.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Max">
            <summary>
            The Max aggregate function. This class will provide the aggregate maximum of the function provided.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Variance">
            <summary>
            The Variance function. This class will provide the standard deviation over the field provided  [Added as part of EX-9692]
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_StandardDeviation">
            <summary>
            The Standard deviation function. This class will provide the standard deviation over the field provided  [Added as part of EX-9692]
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Median">
            <summary>
            The Median function. This class will provide the median over the field provided  [Added as part of EX-9692]
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggMethod_Mode">
            <summary>
            The Mode function. This class will provide the mode over the field provided  [Added as part of EX-9692]
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellConditional.ResetExecution">
            <summary>
            Called after we check if we are allowed to aggregate in the database. We need
            to reset conditional formulas back to the un-tokenized text, so we can properly prepare the tokens later
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabTabulationStyle">
            <summary>
            A CrossTab tabulation style represents the unique style of a cross tabulation. The number of cross tabulation styles depends on the number
            of CrossTab row headers and column headers, and whether the headers of totals associated with them. Note the most granular tabulation
            style is not represented here, it is represented by ReportCrossTabTabulation.SourceCell.  Note also that the last row header and last 
            column header represents the "grand total" tabulation styles, this is similar to how totals are defined.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationStyle.#ctor(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell)">
            <summary>
            Create a ReportCrossTabTabulationStyle object.
            </summary>
            <param name="crossTab">The CrossTab that this tabulation style is part of</param>
            <param name="rowHeader">The row header part of the cross (null gives you the most granular row tabulation style)</param>
            <param name="columnHeader">The column header part of the cross (null gives you the most granular column tabulation style)</param>
            <param name="cell">The cell to use as the style</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationStyle.#ctor(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create a ReportCrossTabTabulationStyle object which will be initialized internally.
            </summary>
            <param name="crossTab">The CrossTab that this tabulation style is part of</param>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulationStyle.RowHeader">
            <summary>
            The CrossTab row header part of the cross this style represents
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulationStyle.ColumnHeader">
            <summary>
            The CrossTab column header part of the cross this style represents
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulationStyle.StyleCell">
            <summary>
            The cell representing the style of this cross tabulation style
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationStyle.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabTabulationStyle to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent datarow</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationStyle.Load(WebReports.Api.Reports.ReportCrossTab,System.Data.DataRow)">
            <summary>
            Given a datarow obtained from complex type style, build a ReportCrossTabTabulationStyle object.
            </summary>
            <param name="crossTab">The CrossTab this style will be a part of</param>
            <param name="styleDr">The data row, the child of the element whose type is style</param>
            <returns>The ReportCrossTabTabulationStyle object initialized from the data</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabTabulationCollection">
            <summary>
            This collection contains the tabulations defined to a specific CrossTab.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationCollection.Clone(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Performs a deep copy of the tabulation collection, the cloned tabulations will point to the same cells as the original
            </summary>
            <param name="crossTab">The CrossTab this header will be a part of</param>
            <returns>A copy of this tabulation collection</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationCollection.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabTabulationCollection to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulationCollection.Load(WebReports.Api.Reports.ReportCrossTab,System.String,System.Data.DataRow[])">
            <summary>
            Given an array of datarows of type crosstab_tabulation, build a ReportCrossTabTabulationCollection object.
            </summary>
            <param name="crossTab">The CrossTab these tabulations will be a part of</param>
            <param name="table">The table the rows come from</param>
            <param name="dr">The array of data rows, contains all rows of type crosstab_tabulation</param>
            <returns>The ReportCrossTabTabulationCollection object initialized from the data rows</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabHeader">
            <summary>
            A header in a CrossTab is a grouping definition for tabulating data.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportCrossTabHeader.TotalHeaderValueParam">
            <summary>The parameter to put in the total text which will be replaced with the header value</summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabHeader.CrossTabSortMethod">
            <summary>
            The methods for sorting a CrossTab header
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeader.#ctor(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create a new ReportCrossTabHeader object, generating a unique ID
            </summary>
            <param name="crossTab">The CrossTab this header belongs to</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeader.#ctor(System.Int32,WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create a new ReportCrossTabHeader object using an existing CrossTabHeader ID
            </summary>
            <param name="id">The ID to load into the object</param>
            <param name="crossTab">The CrossTab this header belongs to</param>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.Id">
            <summary>
            The ID for this CrossTabHeader
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.TotalPlacement">
            <summary>
            Where (or whether) to place a subtotal row/column for this header
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.SortMethod">
            <summary>
            The sort method to use for this CrossTab header
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.SortDirection">
            <summary>
            The sort direction to apply to the sort method
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.LabelCell">
            <summary>
            The cell representing the style and text to render the label
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.TotalCell">
            <summary>
            The cell representing the style and text to render the total header
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.SourceCell">
            <summary>
            The cell representing the style and text to render the header values
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeader.Clone(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Performs a deep copy of the header, the cloned header will point to the same cells as the original
            </summary>
            <param name="crossTab">The CrossTab this header will be a part of</param>
            <returns>A copy of this header</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabHeader.IsValid">
            <summary>
            Determine whether this CrossTab header is in a valid state
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeader.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabHeader to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent row to attach to</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeader.Load(WebReports.Api.Reports.ReportCrossTab,System.Data.DataRow)">
            <summary>
            Given a datarow of type crosstab_header, build a ReportCrossTabheader object.
            </summary>
            <param name="crossTab">The CrossTab this header will be a part of</param>
            <param name="dr">The data rows</param>
            <returns>The ReportCrossTabHeader object initialized from the data row</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabHeaderCollection">
            <summary>
            This collection contains the headers defined to a specific CrossTab (either row or column).
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeaderCollection.Clone(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Performs a deep copy of the header collection, the cloned headers will point to the same cells as the original
            </summary>
            <param name="crossTab">The CrossTab this header will be a part of</param>
            <returns>A copy of this header collection</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeaderCollection.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabHeaderCollection to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabHeaderCollection.Load(WebReports.Api.Reports.ReportCrossTab,System.Data.DataRow[])">
            <summary>
            Given an array of datarows of type crosstab_header, build a ReportCrossTabheaderCollection object.
            </summary>
            <param name="crossTab">The CrossTab the headers will be a part of</param>
            <param name="dr">The array of data rows, contains all rows of type crosstab_header</param>
            <returns>The ReportCrossTabHeaderCollection object initialized from the data rows</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTab">
            <summary>
            A CrossTab is a "Cross-Tabulation" of two or more variables within a dataset.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTab.TotalPlacement">
            <summary>
            Where a total row/column should be placed
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTab.RowHeaderPlacement">
            <summary>
            Where the row headers should be placed
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.#ctor(WebReports.Api.Reports.ReportCellCollection)">
            <summary>
            Create a new ReportCrossTab object, generating a unique ID
            </summary>
            <param name="cells">The cell collection which defines the cells that make up this CrossTab</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.#ctor(System.Int32,WebReports.Api.Reports.ReportCellCollection)">
            <summary>
            Create a new ReportCrossTab using an existing CrossTab ID
            </summary>
            <param name="id">The ID to load into the object</param>
            <param name="cells">The cell collection which defines the cells that make up this CrossTab</param>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.Id">
            <summary>
            The ID for this CrossTab
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.Theme">
            <summary>
            The theme defined for this CrossTab
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.HeaderPerPage">
            <summary>
            Whether the CrossTab header should be shown at the beginning of every new page
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.RowPlacement">
            <summary>
            The row placement defined for this CrossTab
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.GetHeaderById(System.Int32)">
            <summary>
            Retrieve a CrossTabHeader given the header's id.
            </summary>
            <param name="id">The id whose header is to be retrieved</param>
            <returns>The header, or null if no such header exists</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.GetCellById(System.Int32)">
            <summary>
            Retrieve a Cell within the collection of CrossTab cells given the cell's id.
            </summary>
            <param name="id">The id whose cell is to be retrieved</param>
            <returns>The cell, or null if no such cell exists</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.RowHeaders">
            <summary>
            The Row Headers
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.ColumnHeaders">
            <summary>
            The Column Headers
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTab.Tabulations">
            <summary>
            The tabulations
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.Clone">
            <summary>
            Performs a deep copy of the CrossTab, the cloned CrossTab will point to the same cells as the original
            </summary>
            <returns>A deep copy of the CrossTab</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.Validate">
            <summary>
            Determine whether this CrossTab is a valid CrossTab
            </summary>
            <returns>When the CrossTab is valid will return ReportValidationErrorType.None, otherwise the reason this CrossTab isn't valid</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTab to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent row to attach to</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTab.Load(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCellCollection,System.String,System.Data.DataRow)">
            <summary>
            Given a datarow of type crosstab, build a ReportCrossTab object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="cells">The cell collection which defines the cells that make up this CrossTab</param>
            <param name="table">The parent table to load from</param>
            <param name="dr">The data rows</param>
            <returns>The ReportCrossTab object initialized from the data row</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabTabulation">
            <summary>
            A tabulation in a CrossTab is a data calculation method applied to each data value with an equivalent row group and column group
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabTabulation.TabulationMethod">
            <summary>
            The supported tabulation methods
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabTabulation.TabulationValue">
            <summary>
            The supported tabulation values
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.#ctor(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create a new ReportCrossTabTabulation object
            </summary>
            <param name="crossTab">The CrossTab this header belongs to</param>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulation.SourceCell">
            <summary>
            The cell representing the text for this tabulation, as well as the most granular cross tabulation style
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulation.LabelCell">
            <summary>
            The cell representing the style and text to render the label
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulation.Method">
            <summary>
            The tabulation method
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulation.Value">
            <summary>
            The tabulation value
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.CreateLabelStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell)">
            <summary>
            Assign a cell as a new label style.
            </summary>
            <param name="rowHeader">The row header this label is for (null creates the most granular row label style)</param>
            <param name="cell">The cell to use as the style</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.SetLabelStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell)">
            <summary>
            Set a cell to an existing label style. If the label style doesn't exist this is a noop
            </summary>
            <param name="rowHeader">The row header this label is for (null creates the most granular row label style)</param>
            <param name="cell">The cell to use as the style</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.SetLabelStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell,System.Boolean)">
            <summary>
            Set or create a cell to a label style
            </summary>
            <param name="rowHeader">The row header this label is for (null creates the most granular row label style)</param>
            <param name="cell">The cell to use as the style</param>
            <param name="createIfNone">When true, the label style will be created if it doesn't exist</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.GetLabelStyle(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Get the cell associated with a label style.
            </summary>
            <param name="rowHeader">The row header this label is for (null creates the most granular row label style)</param>
            <returns>The cell that represents the label style, or null if no style exists</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.CreateTabStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell)">
            <summary>
            Assign a cell as a new cross tabulation style.
            </summary>
            <param name="rowHeader">The row header part of the cross (null creates the most granular row tabulation style)</param>
            <param name="columnHeader">The column header part of the cross (null creates the most granular column tabulation style)</param>
            <param name="cell">The cell to use as the style</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.SetTabStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell)">
            <summary>
            Set a cell to an existing cross tabulation style. If the cross tabulation style doesn't exist this is a noop
            </summary>
            <param name="rowHeader">The row header part of the cross (null sets the most granular row tabulation style)</param>
            <param name="columnHeader">The column header part of the cross (null sets the most granular column tabulation style)</param>
            <param name="cell">The cell to use as the style</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.SetTabStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.Cell,System.Boolean)">
            <summary>
            Set or create a cell to a cross tabulation style
            </summary>
            <param name="rowHeader">The row header part of the cross (null gives you the most granular row tabulation style)</param>
            <param name="columnHeader">The column header part of the cross (null gives you the most granular column tabulation style)</param>
            <param name="cell">The cell to use as the style</param>
            <param name="createIfNone">When true, the cross tabulation style will be created if it doesn't exist</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.GetTabStyle(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Get the cell associated with a cross tabulation style.
            </summary>
            <param name="rowHeader">The row header part of the cross (null gives you the most granular row tabulation style)</param>
            <param name="columnHeader">The column header part of the cross (null gives you the most granular column tabulation style)</param>
            <returns>The cell that represents the cross tabulation style, or null if no style exists</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.Clone(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Performs a deep copy of the tabulation, the cloned header will point to the same cells as the original
            </summary>
            <param name="crossTab">The CrossTab this tabulation will be a part of</param>
            <returns>A copy of this tabulation</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportCrossTabTabulation.IsValid">
            <summary>
            Determine whether this CrossTab tabulation is in a valid state
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabTabulation to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent row to attach to</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabTabulation.Load(WebReports.Api.Reports.ReportCrossTab,System.String,System.Data.DataRow)">
            <summary>
            Given a datarow of type crosstab_tabulation, build a ReportCrossTabTabulation object.
            </summary>
            <param name="crossTab">The CrossTab this tabulation will be a part of</param>
            <param name="table">The parent table to load from</param>
            <param name="dr">The data rows</param>
            <returns>The ReportCrossTabTabulation object initialized from the data row</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggFunctionCollectionBuilder">
            <summary>
            A CellAggFunctionCollectionBuilder is an instance of a CellVariableCollection that is capable of parsing 
            and tokenizing text containing aggregate functions. An aggregate function is a special function that
            aggregates data across multiple data rows (e.g. calculate the sum of sales for all customers). All aggregate
            functions contain one parameter which can itself be a formula. An aggregate function is one of the following:
            
                * aggsum
                * aggmax
                * aggmin
                * aggavg
                * aggcount
                * aggdistinctcount
                * aggvariance
                * aggstandarddeviation
                * aggmedian
                * aggmode
            
            This collection builder creates CellAggFunction objects (which extends CellVariable). A CellAggFunction object 
            has a token that starts with 'vtok!:'.
            
            Note it is necessary for all other CellVariableCollectionBuilder objects to build their collections first, since
            once this builder tokenizes a string all variables within the aggregate function's parameter are gone.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggFunctionCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.CellVariableCollection)">
            <summary>
            Create the CellAggFunctionCollectionBuilder object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="variableCollection">The collection of variables that will contain any potential variables within an aggregate function parameter</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.PrepareFormulaText(System.String)">
            <summary>
            Given a formula (starts with "="), prepare the formula for execution. This function does the following:
               * Removes irrelevant white spaces
               * Changes all case-insensitive text to lower-case for easy analysis and comparisons
               * Verifies (, {, [, @, and quotes are balanced
               * Verifies valid characters within a grouping ('(' and ')', '{' and '}', '[' and ']', and '@' and '@')
               * Replaces all functions which have alias names to a consistent invocation
            </summary>
            <param name="text">The formula to prepare</param>
            <returns>The prepared formula</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.ReplaceAliasFunctions(System.String)">
            <summary>
            Replace all alias functions with their primary name
            </summary>
            <param name="text">The formula text</param>
            <returns>The replaced formula </returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.CleanFormula(System.String)">
            <summary>
            Clean the text. This does the following:
               * Removes irrelevant white spaces
               * Changes all case-insensitive text to lower-case for easy analysis and comparisons
               * Verifies (, {, [, @, and quotes are balanced
               * Verifies valid characters within a grouping ('(' and ')', '{' and '}', '[' and ']', and '@' and '@')
            </summary>
            <param name="text">The formula text</param>
            <returns>The cleansed formula</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellFormulaHelper.BalanceItem">
            <summary>
            Represents a stackable balance item
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormulaHelper.BalanceItem.rule">
            <summary>
            The rule that caused this item to get stacked
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormulaHelper.BalanceItem.columnNum">
            <summary>
            The column of the character parsed to cause this item to be created
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.BalanceItem.#ctor(WebReports.Api.Reports.CellFormulaHelper.StartBalanceRule,System.Int32)">
            <summary>
            Create a new stackable balance item
            </summary>
            <param name="rule">The rule that caused this item to get stacked</param>
            <param name="columnNum">The column of the character parsed to cause this item to be created</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellFormulaHelper.BalanceRule">
            <summary>
            An abstract text balance rule
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormulaHelper.BalanceRule.character">
            <summary>
            The character that this rule matches against
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.BalanceRule.#ctor(System.Char)">
            <summary>
            Create a new balance rule
            </summary>
            <param name="character">The character this rule matches against</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellFormulaHelper.StartBalanceRule">
            <summary>
            A balance rule which represent a character that starts a balance group
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormulaHelper.StartBalanceRule.isCopyUntilMatch">
            <summary>
            When true, indicates any text processed should be copied "as-is" until this balance group is ended
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormulaHelper.StartBalanceRule.allowedChars">
            <summary>
            The regex processor for determining whether a given character is valid
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.StartBalanceRule.#ctor(System.Char,System.String,System.Boolean)">
            <summary>
            Create a new balance rule which identifies a character as the start of a new balance group
            </summary>
            <param name="character">The character this rule matches against</param>
            <param name="allowedChars">A regular expression describing which characters are immediately allowed in this 
            balance group. This should include the end balance group character as well as any recursive start balance group
            characters.</param>
            <param name="isCopyUntilMatch">Set to true when any text processed within this balance group should be copied "as-is"</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.StartBalanceRule.IsAllowed(System.Char)">
            <summary>
            Determine if a specific character is immediately allowed within this balance group.
            </summary>
            <param name="c">The character to check against</param>
            <returns>When true this character is allowed, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellFormulaHelper.StartEndBalanceRule">
            <summary>
            A balance rule which represents a character that both starts and ends a balance group
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.StartEndBalanceRule.#ctor(System.Char,System.String,System.Boolean)">
            <summary>
            Create a new balance rule which identifies a character as the start and end of a balance group
            </summary>
            <param name="character">The character this rule matches against</param>
            <param name="allowedChars">A regular expression describing which characters are immediately allowed in this
            balance group. This should include the end balance group character as well as any recursive start balance group
            characters.</param>
            <param name="isCopyUntilMatch">Set to true when any text processed within this balance group should be copied "as-is"</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellFormulaHelper.EndBalanceRule">
            <summary>
            A balance rule which represents a character that ends a balance group
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormulaHelper.EndBalanceRule.startCharacter">
            <summary>
            The character used to start the balance group that is being ended.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormulaHelper.EndBalanceRule.#ctor(System.Char,System.Char)">
            <summary>
            Create a new balance rule which identifies a character as the end of a balance group
            </summary>
            <param name="character">The character this rule matches against</param>
            <param name="startCharacter">The character used to start the balance group, there should be a StartBalanceRule that uses
            this character as the rule character.</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellLinkedReport">
            <summary>
            The CellLinkedReport class represents a variable built by CellLinkedReportCollectionBuilder.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellLinkedReport.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Cell,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Create the CellLinkedReport object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the linked report</param>
            <param name="token">The unique token for this data field variable</param>
            <param name="entities">The entities that define the link to the linked report</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellLinkedReport.LinkedFieldNameStr">
            <summary>
            Retrieve the link entity name string which identifies the names of every entity for which key values are required. Each 
            entity is separated by CellLinkedReport.EntitySeparator text.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellLinkedReport.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable. The current value for a linked report is the key values for each entity that
            define the link. Each entity's data is separated by CellLinkedReport.EntitySeparator text, each entity's key values (the data)
            is separated by CellLinkedReport.EntityKeySeparator text.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellParameter.#ctor(WebReports.Api.Common.PageInfo,System.String,System.String)">
            <summary>
            Create the CellParameter object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the cell parameter, including surrounding '@' and '@'</param>
            <param name="token">The unique token for this parameter variable</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellParameter.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellParameter.
            </summary>
            <param name="cellVariableDataProvider">The data provider (not used, but part of interface)</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellReference">
            <summary>
            The CellReference class represents a variable built by CellReferenceCollectionBuilder. Each CellReference variable keeps a queue of values.
            The queue is built up during the first pass and is consumed during the second pass. This building/consuming is controlled by the
            ProcessSectionForSave and ProcessSectionForRead functions. It is important that the sections are processed in the same order both times,
            otherwise values will become unpredictable and/or errors may occur.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Cell,System.String)">
            <summary>
            Construct a new CellReference object, which represents a cell that is being referred to by another
            cell.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="cell">The cell that this reference should be created for</param>
            <param name="token">A unique token for this cell reference</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellReference.Section">
            <summary>
            The section that this cell is in
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellReference.ToRefs">
            <summary>
            An array of CellReference objects that this cell references
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.AddToRef(WebReports.Api.Reports.CellReference)">
            <summary>
            Add a CellReference that this cell references within it's text
            </summary>
            <param name="toRef"></param>
        </member>
        <member name="E:WebReports.Api.Reports.CellReference.CellReferenceValueSaved">
            <summary>
            This event is raised whenever a new cell reference value is saved
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.ProcessSectionForSave(WebReports.Api.Reports.Section,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            During the first pass, indicate a section has broke and to save any cell reference values if necessary.
            </summary>
            <param name="section">The section that broke</param>
            <param name="cellVariableDataProvider">The data provider to get the current values for those variables</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.ClearCache">
            <summary>
            Clear the current cached value
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.ProcessSectionForRead(WebReports.Api.Reports.Section)">
            <summary>
            During the second pass, indicate a section is to be read and to set up any cell reference values if necessary.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellReference.CellReferenceValueProvider">
            <summary>
            This is an internal class used to provide the data for calculating the value of this referenced cell. We can't
            use the normal mechanisms to obtain the value because cell references must be 100% evaluatable at any time (forward references).
            The first pass builds a queue of these CellReferenceValueProvider objects, the second pass uses them to derive the value
            of the cell reference.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.CellReferenceValueProvider.#ctor(WebReports.Api.Reports.CellVariableCollection,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Create a new CellReferenceValueProvider.
            </summary>
            <param name="cellVariableCollection">The variable collection that makes up this reference cell</param>
            <param name="cellVariableDataProvider">The data provider to get the current values for those variables</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.CellReferenceValueProvider.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="name">The name of the variable</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellReference.CellReferenceValueProvider.SetReferenceValue(System.String,System.String)">
            <summary>
            Given the token of a cell reference variable, set its value in this data value provider
            </summary>
            <param name="token">The token to set</param>
            <param name="value">The value to set it with</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellReferenceCollectionBuilder">
            <summary>
            A CellReferenceCollectionBuilder is an instance of a CellVariableCollection that is capable of parsing 
            and tokenizing text containing cell references. A cell reference is any text surrounded by '[' and ']' and 
            references a specific cell within the report. This collection builder creates CellReference
            objects (which extends CellVariable). A CellReference object has a token that starts with 'ctok!:'.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReferenceCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create the CellReferenceCollectionBuilder object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellReferenceCollectionBuilder.FinalizeCollection">
            <summary>
            In addition to clean up, this function is also used to detect when a circular reference occurs. If one does occur, an exception
            will be thrown
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellReferenceCollectionBuilder.ReferenceLoopExists(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.CellReference,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Determine if there is a reference chain from one CellReference to another
            </summary>
            <param name="fromRef">The potentially referring cell reference</param>
            <param name="toRef">The potentially referred cell reference</param>
            <returns>true if fromRef explicitely or implicitely refers to toRef</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellReferenceCollectionBuilder.GetReferencedCells(System.String)">
            <summary>
            Retrieve a list of cells that are referenced with the string of text
            </summary>
            <param name="text">The string of text to parse</param>
            <returns>A list of Cell objects that are being referred to within the string of text</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellVariableEventHandler">
            <summary>
            Event handler definition for cell variables. See extended classes for any event definitions.
            </summary>
            <param name="sender">The cell variable object that is raising the event</param>
        </member>
        <member name="T:WebReports.Api.Reports.ICellVariableValueProvider">
            <summary>
            Any class implementing ICellVariableValueProvider is capable of providing the value for a CellVariable
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ICellVariableValueProvider.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="variable">The name of the variable</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellVariable">
            <summary>
            The abstract CellVariable class represents a variable within a cell function. There are two things associated with 
            a cell variable: the token (a unique identifier for the variable) and the name (what the variable is equivalent to).
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariable.#ctor(WebReports.Api.Common.PageInfo,System.String,System.String)">
            <summary>
            Create a new CellVariable object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the CellVariable</param>
            <param name="token">The unique token for this CellVariable</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellVariable.Name">
            <summary>
            The name of this CellVariable
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellVariable.Token">
            <summary>
            The unique token for this CellVariable
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariable.Tokenize(System.String)">
            <summary>
            Given a string of text, tokenize the text. That is, replace all instances of the variable's name with
            the variable's token.
            </summary>
            <param name="text">The string of text to tokenize</param>
            <returns>The tokenized text</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariable.UnTokenize(System.String)">
            <summary>
            Given a string of text, untokenize the text. That is, replace all instances of the variable's token with
            the variable's name.
            </summary>
            <param name="text">The string of text to untokenize</param>
            <returns>The untokenized text</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariable.Valueize(System.String,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Given a string of text, valueize the text. That is, replace all instances of the variables token with the
            variable's current value (determined by the value provider).
            </summary>
            <param name="text">The string of text to tokenize</param>
            <param name="valueProvider">The data provider</param>
            <returns>The valueized text</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariable.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellAggFunction">
            <summary>
            The CellAggFunction class represents a variable built by CellAggFunctionCollectionBuilder. This class is meant to be extended by a specific
            aggregatation method.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggFunction.#ctor(WebReports.Api.Common.PageInfo,System.String,System.String,WebReports.Api.Reports.CellAggMethod,System.String)">
            <summary>
            Construct a new CellAggFunction object, which represents an aggregate function.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the variable</param>
            <param name="dataToAgg">The data that is to be aggregated (tokenized formula)</param>
            <param name="variableCollection">The collection of variables that contain CellVariable's for all tokens within dataToAgg</param>
            <param name="token">A unique token for this aggregate function</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellAggFunction.Entities">
            <summary>
            The list of entities that are aggregated within this function
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellAggFunction.DataFields">
            <summary>
            The list of data fields that are aggregated within this function
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellAggFunction.CellTextFragment">
            <summary>
            The untokenized text fragment that represents this function
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggFunction.AggregateIfBreak(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Aggregate the current data
            </summary>
            <param name="cellVariableDataProvider">The data to pull aggregation data from</param>
            <returns>true if there was a break (something new was aggregated)</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggFunction.IsBreak(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Aggregate the current data row if the data being aggregated indicates a break.
            </summary>
            <param name="executeDt">The ExecuteDataTable containing the data</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellAggFunction.Value">
            <summary>
            The current aggregate value
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellAggFunction.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellManualResetAggFunction.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellManualResetAggFunction.ClearAggregateIfBreak(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Clears the current aggregate value if the reset break field indicates so
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellDataField">
            <summary>
            The CellDataField class represents a variable built by CellDataFieldCollectionBuilder.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellDataField.#ctor(WebReports.Api.Common.PageInfo,System.String,System.String)">
            <summary>
            Create the CellDataField object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the data field, including surrounding '{' and '}'</param>
            <param name="token">The unique token for this data field variable</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellDataField.Entity">
            <summary>
            The Entity object that this data field is sourced from
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellDataField.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the CellVariable.</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellVariableCollection">
            <summary>
            A cell variable collection contains a collection of CellVariable objects. An empty CellVariableCollection can be 
            created and items can be added to that empty collection via CellVariableCollection.AddAll or 
            CellVariableCollection.BuildCollection. This allows you to join collections but you cannot add individual CellVariable 
            objects to the collection. To build an original collection, see CellVariableCollectionBuilder.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollection.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create an empty CellVariableCollection object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellVariableCollection.Variables">
            <summary>
            The CellVariables that are part of this collection
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollection.BuildCollection(WebReports.Api.Reports.Cell,WebReports.Api.Reports.CellVariableCollectionFilter)">
            <summary>
            Given a string of text this method will find all variables in the text that are
            defined in this collection. A new CellVariableCollection will be returned containing
            only variables found within the string of text.
            </summary>
            <param name="text">The string of text</param>
            <param name="excludeFilter">The cell variable types you want to exclude in the new collection</param>
            <returns>The collection of variables found with the text string</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollection.BuildCollection(System.String,WebReports.Api.Reports.CellVariableCollectionFilter)">
            <summary>
            Given a string of text this method will find all variables in the text that are
            defined in this collection. A new CellVariableCollection will be returned containing
            only variables found within the string of text.
            </summary>
            <param name="text">The string of text</param>
            <param name="includeFilter">The cell variable types you want to include in the new collection</param>
            <returns>The collection of variables found with the text string</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollection.AddAll(WebReports.Api.Reports.CellVariableCollection)">
            <summary>
            Add all elements from one collection into this collection, duplicates will be ignored
            </summary>
            <param name="collection">The collection to take from</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellVariableCollectionBuilder">
            <summary>
            A cell variable collection builder is an abstract class meant to provide the mechanisms for building up a CellVariableCollection.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Create the CellVariableCollectionBuilder object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="tokenPrepend">A token prepend string, this should be unique across all other classes extending 
            CellVariableCollectionBuilder to ensure uniqueuness amongst tokens</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellVariableCollectionBuilder.CheckForCellFormulaFlag">
            <summary>
            indicates whether to check cell text for the existence of a formula (starts with '='); defaults to true
            </summary>
            <param name="cell">The cell to process and prepare</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollectionBuilder.AddVariablesAndPrepare(WebReports.Api.Reports.Cell)">
            <summary>
            Given a cell, this method will find all relavent variables defined by this collection builder. For each
            variable found a CellVariable will be added to this collection. The builder might also modify a cell's "execute
            variables", most likely replacing text with tokenized versions of text (but not limited to that).
            </summary>
            <param name="cell">The cell to process and prepare</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollectionBuilder.AddVariablesFromText(System.String,WebReports.Api.Reports.Cell)">
            <summary>
            Processing method called from AddVariablesAndPrepare.  Each derived class must override this method.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollectionBuilder.FinalizeCollection">
            <summary>
            When no additional text is available to process, this method should be called to do any final cleanup of the
            variable building phase.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellVariableCollectionBuilder.UniqueToken">
            <summary>
            Every time this property is accessed, it will return a unique token. It's uniqueness depends on the uniqueness of 
            the tokenPrepend string passed in the constructor
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellVariableCollectionBuilder.GetFirstByName(System.String)">
            <summary>
            Given the name of a variable, return the first CellVariable object associated with it. Note this is O(n) processing, 
            where n is the number of CellVariable objects in the collection.
            </summary>
            <param name="name">The name of a variable</param>
            <returns>The first CellVariable object associated with the name</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellLinkedReportCollectionBuilder">
            <summary>
            A CellLinkedReportCollectionBuilder is an instance of a CellVariableCollection that is capable of parsing 
            and tokenizing text for purposes of linking a report. This collection builder creates CellLinkedReport
            objects (which extends CellVariable). A CellLinkedReport object has a token that starts with 'ltok!:'.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellLinkedReportCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.CellVariableCollection)">
            <summary>
            Create the CellLinkedReportCollectionBuilder object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="variableCollection">The collection of variables that will contain any potential variables used as link information</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellLinkedReportCollectionBuilder.AddVariablesAndPrepare(WebReports.Api.Reports.Cell)">
            <summary>
            Given a cell, this method will create add a CellLinkedReport if this cell contains a linked report. The cell's 
            LinkedReportVariable property will be updated to point to the newly created variable.
            </summary>
            <param name="cell">The cell to process and prepare</param>
        </member>
        <member name="T:WebReports.Api.Reports.CellParameterCollectionBuilder">
            <summary>
            A CellParameterCollectionBuilder is an instance of a CellVariableCollection that is capable of parsing 
            and tokenizing text containing parameters. A parameter is any text surrounded by '@' and '@' and 
            references a specific parameter. This collection builder creates CellParameter objects (which extends
            CellVariable). A CellParameter object has a token that starts with 'ptok!:'.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellParameterCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create the CellParameterCollectionBuilder object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="T:WebReports.Api.Reports.ReportCrossTabCollection">
            <summary>
            A collection of CrossTabs
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabCollection.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create a new ReportCrossTabCollection object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabCollection.GetItem(System.Int32)">
            <summary>
            Retrieve a CrossTab given its id
            </summary>
            <param name="id">The id of the CrossTab to retrieve</param>
            <returns>The CrossTab identified by the id, or null if it doesn't exist</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabCollection.RemoveItem(System.Int32)">
            <summary>
            Remove a CrossTab given its id
            </summary>
            <param name="id">The id of the CrossTab to remove</param>
            <returns>true if the CrossTab was found and removed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabCollection.Validate">
            <summary>
            Determine whether any CrossTabs in this collection are invalid. Any invalid CrossTabs will be removed from the collection and
            a validation error will be added to the current report object.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabCollection.Save(System.Data.DataSet,System.Data.DataRow)">
            <summary>
            Save a ReportCrossTabCollection to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="dr">The parent</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCrossTabCollection.Load(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCellCollection,System.Data.DataSet)">
            <summary>
            Given an array of datarows of type crosstab, build a ReportCrossTabCollection object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="cells">The collection of cells that defines this CrossTab styling</param>
            <param name="ds">The dataset that contains this CrossTab definition</param>
            <returns>The ReportCrossTabCollection object initialized from the data rows</returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportExecutionSection">
            <summary>
            This class represents report execution section processing
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Report,WebReports.Api.ExecuteData.ExecuteDataTable,WebReports.Api.Execute.ActiveLocalExecution)">
            <summary>
            Create a new report execution section processor
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="report">The Report object which describe the report to execute on</param>
            <param name="executeDt">The data to populate the report with</param>
            <param name="execution">The execution object defining this execution</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.NextSection">
            <summary>
            Retrieve the next writeable section to be written to the report
            </summary>
            <returns>The next section to be written to the report, or null if no more sections should be written</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.IsNextSectionDetail">
            <summary>
            Checks if the next section is Detail type
            </summary>
            <returns>True if the upcoming section exists and is of type "Detail", otherwise false.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.NextSectionInReportData(System.Boolean)">
            <summary>
            Retrieve the next section found in the report data, regardless of if its writeable
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.WriteReportHeader(System.IO.StreamWriter)">
            <summary>
            Writes the report header (if exists) to the report data file. The page header/footer will also be written 
            prior to the report header if necessary.
            </summary>
            <param name="writer">The writer for the report data file</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.WriteReportFooter(System.IO.StreamWriter)">
            <summary>
            Writes the report footer (if exists) to the report data file. The page header/footer will also be written 
            prior to the report footer if necessary.
            </summary>
            <param name="writer">The writer for the report data file</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.WritePageHeaderFooter(System.IO.StreamWriter)">
            <summary>
            Writes the page header/footer (if they exist) to the report data file. This should be called before any new 
            group of sections is to be written out. This is done to ensure if any of the sections within that group cause
            a page break (during phase 2), the page header/footer will have the correct information.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.WriteReport(System.IO.StreamWriter,WebReports.Api.Reports.ReportSectionCollection)">
            <summary>
            Writes a report or subreport to the report data file. this.executeDt is expected to be pointing to the first 
            data row for this report, it will be updated to point to the last data row for this report.
            </summary>
            <param name="writer">The writer for the report data file</param>
            <param name="sections">The collection of sections that make up this report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.ProcessDataRow(System.IO.StreamWriter,WebReports.Api.Reports.ReportExecutionSection.ProcessOptions,WebReports.Api.Reports.ReportSectionCollection)">
            <summary>
            Process a row of data for a report or subreprt.
            </summary>
            <param name="writer">The writer for the report data file</param>
            <param name="options">The processing options</param>
            <param name="sections">The collection of sections that make up this report or subreport</param>
            <returns>The last data location this processing accessed, might be different from the current data location if subreports were processed.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.WriteReportSection(System.IO.StreamWriter,WebReports.Api.Reports.Section)">
            <summary>
            Process a report section that has broken
            </summary>
            <param name="writer">The writer to the report file</param>
            <param name="section">The section that broke</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.PrimeSaveCellReferences(WebReports.Api.Reports.Section)">
            <summary>
            Prime all current values that are referenced within a given section to be saved. This must be done in two steps because
            aggregates might reference a cell and they want the "current" value (what this gives us).  On the other hand a cell might
            reference an aggregate which would update the value so cannot be saved until after aggregates are calculated (what 
            SaveCellReferences gives us).
            </summary>
            <param name="section">The section whose values should be saved</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.SaveCellReferences(WebReports.Api.Reports.Section)">
            <summary>
            Save all current values that are referenced within a given section
            </summary>
            <param name="section">The section whose values should be saved</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionSection.LoadCellReferences(WebReports.Api.Reports.Section)">
            <summary>
            Load all current values that are referenced within a given section, this should be called the same number of times as SaveCellReferences
            </summary>
            <param name="section">The section whose values should be loaded</param>
        </member>
        <member name="T:WebReports.Api.Reports.ReportShadeColorCollection">
            <summary>
            This collection contains a sequence of colors used for shading. When using the Load/Save methods, it is assumed the
            color is a simple element that can occur an unbounded number of times (this creates a unique table for the collection).
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportShadeColorCollection.DelimitedString">
            <summary>
            Retrieve or parse a delimited string of the colors in the collection
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportShadeColorCollection.Save(System.Data.DataSet,System.String,System.Data.DataRow)">
            <summary>
            Save the collection to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to (the unbounded simple element)</param>
            <param name="dr">The parent</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportShadeColorCollection.Load(System.String,System.Data.DataRow[])">
            <summary>
            Given an array of datarows obtained from an array of simple text elements, build a ReportShadeColorCollcetion object.
            </summary>
            <param name="dr">The array of data rows</param>
            <returns>The ReportShadeColorCollection object initialized from the data rows</returns>
        </member>
        <member name="T:WebReports.Api.Reports.SectionVariableValueProvider">
            <summary>
            Represents variable values required by a particular section.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.CellVariableCollection,System.Boolean,System.Boolean)">
            <summary>
            Initialize the object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="sectionVariables">The relevant variables contained within this section</param>
            <param name="isPageSection">When true the section associated with this is a page header/footer (different save behavior)</param>
        </member>
        <member name="P:WebReports.Api.Reports.SectionVariableValueProvider.HasVariables">
            <summary>
            Whether this section contains any variables to provide values for
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.UpdateAggregates(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Update aggregate functions with the current data row
            </summary>
            <param name="executeDt">The data row</param>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.ClearAggregatesForSectionBreak">
            <summary>
            Clear aggregate functions
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.LoadValuesFromDataRow(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Load values into this variable value provider from the current data row
            </summary>
            <param name="executeDt">The data to process (cursor set to the current data row)</param>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.LoadValuesFromArray(System.String[],System.Int32)">
            <summary>
            Load values into this variable value provider from an array of strings, the array of string most likely deriving
            from a previous call to SaveValuesIntoArray. Therefore it is assumed the array is large enough to load all variables within
            this section.
            </summary>
            <param name="values">The value array</param>
            <param name="startIdx">The index to start loading from</param>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.UpdateValuesFromArrays(System.String[],System.String[])">
            <summary>
            Load values into this variable value provider from an array of key/value pairs passed in as corresponding string arrays.
            </summary>
            <param name="keys">The key (variable token) array</param>
            <param name="values">The value array</param>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.SaveValuesIntoArray(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Save current values of each variable into an array of strings. If this is a page section and the variables didn't change 
            between the previous two "Loads", this will return a null array.
            </summary>
            <returns>The value array, or null if this is a page section and nothing changed between the previous two consecutive loads</returns>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="variable">The name of the variable</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="M:WebReports.Api.Reports.SectionVariableValueProvider.GetValueFromString(System.String,System.Boolean)">
            <summary>
            Given the name of a possible key, return the value
            </summary>
            <param name="keyName">Name of potential key</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumnMetadata.SortAndGroupByFormula">
            <summary>
            Specifies the formula to use when sorting or grouping by the column.  This allows for a
            separate display value and sort/group value for each field. The formula defined should not
            include a leading equals sign.  Example: If you have Employee.FullName but want it to group by 
            ={Employee.Id} when grouping by the field so each unique employee has their own group even if
            more than one employee shares the same name.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumnMetadata.SqlFormulaSetForAggsInDB">
            <summary>
            True if we are setting metadata on the fly specifically to calculate aggregates in the database
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumnMetadata.IsSortable">
            <summary>
            Used to only return false for ExagoFormula type columns since we didn't used to be able to sort
            by formula.  Now we can, but I'm keeping this getter as a stub in case we want to implement this
            as a switch in column metadata in the future.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.EntityColumnMetadata.ParseFilterableType(System.String)">
            <summary>
            Given a string representation of the FilterableType, determine which type it belongs to. 
            This method will not throw and defaults to FilterableType.Default if the value 
            cannot be inerpreted as a valid value
            Note: true and false are provided as valid arguments to support old versions
            of the code in which this value was a boolean
            </summary>
            <param name="value">one of true, false, all, none, dynamic, static</param>
            <returns>the appropriate FilterableType representation</returns>
        </member>
        <member name="P:WebReports.Api.Reports.GroupFilter.IgnoreOtherGroups">
            <summary>
            Used for group filters to indicate whether or not the filter should operate for each
            group break defined in the filter, ignoring other groupings on the report
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.KeyColumnCollection.GetKeyValues(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Gets a string containing the values of the key columns given the current ExecuteDataTable and row location.
            </summary>
            <param name="executeDt">The ExecuteDataTable from which to get the values from.</param>
            <returns>Returns a comma-delimited string of the key column(s)'s value(s). E.g. if 2 keycolumns exist, "value1,value2" will be returned.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.KeyColumn.ParenWrap(System.String)">
            <summary>
            Wrap the expression in parenthesis if it is not already 
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportParameterCollection.Add(System.String)">
            <summary>
            Returns true when a parameter is added to the collection and false if the parameter already exists in the collection
            </summary>
            <param name="parameterId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportParameterCollection.GetDependentParameterList(WebReports.Api.Common.Parameter,System.Collections.Generic.List{System.String})">
            <summary>
            Get a full listing of all parameters that are required to satisfy the current parameter P
            </summary>
            <param name="P"></param>
            <param name="prevIteration"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellFormula">
            <summary>
            A cell formula represents a compute-able string of text. A formula is expected to have zero or more 
            CellVariable's associated with it, whose value will be obtained at evaluation time. Anything not tokenized
            is expected to be understood by the Infragistics CalcEngine or defined in CellFunction.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormula.NewLineConstant">
            <summary>
            The internal representation for a new line
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.CellFormula.SuppressField">
            <summary>
            The internal representation for "suppress this field", suppressed fields are ignored and any formula containing
            a suppressed field is itself suppressed.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.#ctor(WebReports.Api.Common.PageInfo,System.String,WebReports.Api.Reports.CellVariableCollection,System.Boolean)">
            <summary>
            Create a new CellFormula
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="tokenizedText">The tokenized string of text representing the formula, should have already been
            processed by one or more CellVariableCollectionBuilder classes</param>
            <param name="cellVariableCollection">The variable collection that tokenized the text</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellFormula.VariableCollection">
            <summary>
            The collection of CellVariable objects associated with this formula
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFormula.HasAggregateFunction">
            <summary>
            Whether this formula has an aggregate function defined within it.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.GetVariables(WebReports.Api.Reports.CellVariableCollectionFilter)">
            <summary>
            Returns List of CellVariable in formula based on CellVariableCollectionFilter input mask
            </summary>
            <param name="includeFilter"></param>
            <returns>List of CellVariable</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.EvaluateAsExcelFormula(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean)">
            <summary>
            Replace tokens from cell variables (cell references, data fields, etc.) but skip Syncfusion function evaluation
            </summary>
            <param name="cellVariableValueProvider"></param>
            <param name="convertNullToBlank"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.Evaluate(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Evaluate the formula
            </summary>
            <param name="cellVariableValueProvider">The object that provides values for all the variables within the formula</param>
            <param name="convertNullToBlank">When true (the default) will convert null values to blank, otherwise the result of the formula will be null if any variables are null</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>The value of the formula</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.ConvertDbToAliasNames(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Converts data field and object names to their alias' using the active report's entity collection
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula to parse</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.ConvertDbToAliasNamesNoReport(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Converts data field and object names to their alias' using the entity collection from SetupData
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula to parse</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.ConvertDbToAliasNamesNoReportUsingMetadata(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Converts data field and object names to their alias' using the entity column metadata of entity collection from SetupData
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula to parse</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.ConvertAliasToDbNames(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Converts data field and object aliases to their database names using the active report's entity collection
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula to parse</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.ConvertAliasToDbNamesNoReport(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Converts data field and object aliases to their database names using the entity collection from SetupData
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula to parse</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.ConvertAliasToDbNamesNoReportUsingMetadata(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Converts data field and object aliases to their database names using the entity column metadata of entity collection from SetupData
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula to parse</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.CreateFormula(WebReports.Api.Common.PageInfo,System.String,WebReports.Api.Reports.CellVariableCollectionFilter)">
            <summary>
            Returns a CellFormula object given formula text and filter
            </summary>
            <param name="pageInfo">PageInfo object</param>
            <param name="formula">Formula text to parse</param>
            <param name="formula">Filter to indicate what type of variables to include</param>
            <returns>CellFormula object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormula.IsSingleDataFieldFormulaFormat(System.String)">
            <summary>
            Returns a boolean whether the incomiing formula text is in the format of a formula with a single data field
            </summary>
            <param name="formulaText">formula text to inspect</param>
            <returns>boolean value</returns>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.pageNumberPrefix">
            <summary>
            Set to non-null to indicate this is a page number string
            this is NOT a prefix (as the name would imply) but a page number template with the RtfPageNumber.PageNumberMarker indicating where a page number should be placed
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.Cell.imageData">
            <summary>
            If this is a widget cell, this will store the actual rendered image data.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.Cell.text">
            <summary>
            The "rich text" of the cell ie. the cell text without having been stripped of formatting tags.
            This field should not be used directly, instead use Cell.Text and Cell.RichText
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.Cell.strippedText">
            <summary>
            Used by the Cell.Text getter to cache the version of the text that has been stripped of formatting tags.
            This field should not be used directly, instead use Cell.Text and Cell.RichText.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.Cell.isRefStringDirty">
            <summary>
            Indicates whether or not the Cell.refString correctly reflects the cel's current coordinates (column and row).
            If true, Cell.UpdateRefString should be called to update the refstring given the current row and column of the cell.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.Cell.widgetVariables">
            <summary>
            For each unique cell to which a widget refers, we create a CellVariable for use with two-pass.  This allows widgets
            to make forward references on the report just like cell references can.
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.Cell.cacheValues">
            <summary>
            A place to store calculated values so they can be easily retrieved later when collecting widget execution data
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.WidgetExecutionData">
            <summary>
            A place to store the report data to feed to the widget in this cell so we can retreive it when we render the widget in the exporter
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ImageData">
            <summary>
            Rendered image data for associated widget
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create a cell object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.#ctor(WebReports.Api.Common.PageInfo,System.Int32,System.Int32)">
            <summary>
            Create a cell object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="row">The row this cell is located (0-based)</param>
            <param name="col">The column this cell is located (0-based)</param>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.#ctor(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Create a cell object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The text for this cell</param>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.#ctor(WebReports.Api.Common.PageInfo,System.String,System.Boolean)">
            <summary>
            Create a cell object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The text for this cell</param>
            <param name="dataFlag">When true the text indicates a data field, otherwise the text is not a data field </param>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.GetMetadataFormatType(System.String)">
            <summary>
             Grabs the format type by column name if it is available in the metadata.
            </summary>
            <param name="colName"></param>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.Initialize(WebReports.Api.Common.PageInfo)">
            <summary>
            Common initialization amongst constructors
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.RefString">
            <summary>
            The "excel-like" reference string for this cell, depends on the row and column location
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.UpdateRefString">
            <summary>
            Whenever the cell row or column is updated, this should be called to update the cell's RefString property
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.CalculateWidth">
            <summary>
            Calculates absolute width of the cell, taking ColSpan into account
            </summary>
            <returns>The width of the cell in pixels</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.ExecuteClear">
            <summary>
            Clear cell to prime for execution processing. 
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Text">
            <summary>
            The unmodified text value of the cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.DisplayText">
            <summary>
            The text value of the cell, modified for designer display purposes. For example if this 
            cell represents a chart in the designer, the text returned will be a sample chart.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Type">
            <summary>
            The type of cell this is
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsFormattable">
            <summary>
            Whether the cell is formattable based on its type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.SaveTypeStr">
            <summary>
            The type of cell this is, in string form
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ExecuteText">
            <summary>
            The modified, cleaned, and tokenized execution text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsExecuteDataFormula">
            <summary>
            Whether the cell is a formula or converted to a formula during execution
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.GetFormattedValue(System.String)">
            <summary>
            Looks for a type in the cell(which is derived from the metadata) if it hasn't been derived already. Otherwise format the text.
            </summary>
            <param name="text"></param>
            <returns>formatted string to be output in cell</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.FormatValue(System.String)">
            <summary>
            Given the provided text, format the text.
            </summary>
            <param name="text">The text to format</param>
            <returns>The formatted text is returned, the cell foreground and background color are set appropriately</returns>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.LinkedReportVariable">
            <summary>
            The linked report variable associated with this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.WidgetVariables">
            <summary>
            For each unique cell to which a widget refers, we create a CellVariable for use with two-pass.  This allows widgets
            to make forward references on the report just like cell references can.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.LinkedFieldNameStr">
            <summary>
            Retrieve the field names related to the linked report associated with this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.LinkedValueStr">
            <summary>
            The current field values related to the linked report associated with this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.LinkedReportExecuteIdx">
            <summary>
            The linked report execute index
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsDynamicDataField">
            <summary>
            This field is not part of a normal Entity column collection, but is present in the report DataSet.
            Typically this is used when dynamically modifying the DataSet in OnDataCombined
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsData">
            <summary>
            Whether this cell is categorized as a Data cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsFormula">
            <summary>
            Whether this cell is categorized as a Formula cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsEmbeddedImage">
            <summary>
            Whether this cell is categorized as an Embedded Image
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsTempImage">
            <summary>
            Whether this cell is categorized as a Temp Image
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsHyperlink">
            <summary>
            Whether this cell is categorized as a Temp Image
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsExcelFormulaType">
            <summary>
            Whether this cell is categorized as an Excel Formula (when using the ExcelFormula built in function)
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsStaticValueType">
            <summary>
            Whether this cell is 'static'
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.HasConditionalHeightChanges">
            <summary>
            Whether this execute cell has changes due to conditional formatting that can effect overall cell height
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.EntityName">
            <summary>
            When this cell is a data cell the entity name associated with this cell, otherwise null 
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Entity">
            <summary>
            When this cell is a data cell the entity object associated with this cell, otherwise null
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.EntityImage">
            <summary>
            When this cell is a data cell the image identifier used for the entity associated with this cell, otherwise null
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsVisible">
            <summary>
            When this cell is a data cell returns true if the data field is visible, otherwise false
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ColumnName">
            <summary>
            When this cell is a data cell the column name associated with this cell, otherwise null
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Row">
            <summary>
            The row this cell is located (0-based)
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Col">
            <summary>
            The column this cell is located (0-based)
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.RowSpan">
            <summary>
            The number of rows this cell spans across
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ColSpan">
            <summary>
            The number of columns this cell spans across
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Id">
            <summary>
            The unique identifier for this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.WidgetId">
            <summary>
            When this cell is a Widget cell the unique identifier for the chart associated with this cell, otherwise null
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsCrossTabControl">
            <summary>
            Retrieve whether the current cell is a CrossTab control cell.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.CrossTabFlag">
            <summary>
            Whether the current cell is a CrossTab cell.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.CrossTabId">
            <summary>
            The id of the CrossTab this cell is part of, or -1 if this cell isn't part of a CrossTab
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.RemoveCrossTabAssociation">
            <summary>
            Remove this cell's association with a CrossTab
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Style">
            <summary>
            The style associated with this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Format">
            <summary>
            The format of this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.SuppressDuplicatesFlag">
            <summary>
            Whether to suppress duplicate values for this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.WrapTextFlag">
            <summary>
            Whether text should wrap for this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.SumFlag">
            <summary>
            Whether this cell text should be a summation
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Html">
            <summary>
            The HTML text for this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ExecuteFilledStyleIdx">
            <summary>
            The HTML filled style index for this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ExecuteCommonStyleIdx">
            <summary>
            The HTML common style index for this cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ExecuteFormulaData">
            <summary>
            The execute cell associated with this cell
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.SetExecutionReady">
            <summary>
            Designate the cell as execution ready. When a cell is execution ready, ExecuteText will be initialized for execution processing.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.ContainsMalformedRunningSum(System.String)">
            <summary>
            Returns true if the cell text contains a call to RunningSum that Exago will not handle properly.
            Calls to RunningSum must have one or two arguments where the first argument is a data field and
            the second argument is a data field or data object name surrounded by curly braces.
            </summary>
            <param name="cellText">The cell text to evaluate</param>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.CreateExecutionFormula(WebReports.Api.Reports.CellVariableCollection)">
            <summary>
            Create the formula based on the variable collection and ExecuteText. The variable collection provided should be derived from
            the collection(s) built with TokenizeExecutionVariables. If this cell is a formula, Formula will be initialized here.
            </summary>
            <param name="variableCollection"></param>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.Formula">
            <summary>
            Retrieve the execution formula for this cell, or null if there is none.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.IsExcelFormula(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            KPMG has some reports where they want cell content that starts with a single-quote followed by an equals sign ('=)
            to be treated as an Excel formula.  In this case, we evaluate data fields, cell references, etc. but NOT functions
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The cell text</param>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsStaticField">
            <summary>
            Returns whether this cell is static in nature
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ClientValue">
            <summary>
            Gets the non-formatted value to send to the client.  Our data could be a string representation of a date,
            in which case the client may want it to be treated as a date on the client if the cell format is set to General or Date.
            This property will attempt to parse a date string and return it in our invariant format so the client doesn't have to parse a fuzzy format.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.GetClientValue(System.String)">
            <summary>
            Gets the non-formatted value to send to the client.  Our data could be a string representation of a number or date,
            in which case the client may want it to be treated as the actual data type on the client if the cell format is set to General, Number, or Date.
            This function will attempt to parse a decimal/date string and return it in our invariant format so the client doesn't have to parse a fuzzy format.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.CalculateHeight(WebReports.Api.Reports.ReportExecutionData.ExportColumnWidthCollection,System.Boolean)">
            <summary>
            Calculate the height of this cell. Initializes RenderedHeight, RenderedLineHeight, and RenderedLineCnt
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.PageBreakFlag">
            <summary>
            Whether this cell should cause a page break
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.WorksheetBreakFlag">
            <summary>
            Whether this cell should cause a worksheet break in Excel
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.RowHeight">
            <summary>
            The row height for this cell. Note, that this may not be the correct value! In order to get the row height,
            it may be necessary to use the RowHeight property of the first cell in the row.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsRowCollapsible">
            <summary>
            Whether the row this cell is in is collapsible for HTML exports
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.CollapseLevelNum">
            <summary>
            The hierarchical collapse level num during execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsRowCollapsed">
            <summary>
            Whether the row this cell is in is initially collapsed
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.RepeatOnNewPage">
            <summary>
            Denotes whether a group header should be re-printed when the detail section expands past one page.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.HasContent">
            <summary>
            Whether the row has content
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.DataType">
            <summary>
            The data type of this cell, one of the Constants.DataType.* constants
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.FormatDataType">
            <summary>
            The formatted data type of this cell, one of the Constants.DataType.* constants. This property is used to 
            overwrite the display format of the text.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ExecFormatDataType">
            <summary>
            The formatted data type of this cell when executed, one of the Constants.DataType.* constants. This property is used to 
            overwrite the display format of the text.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.CloneCell(WebReports.Api.Reports.Cell,System.Boolean,System.Boolean)">
            <summary>
            Clone the properties of cell into this cell
            </summary>
            <param name="cell">The cell to copy from</param>
            <param name="isForExecution">When true the clone is for execution, and execution type stylings are also cloned</param>
            <param name="isDeepClone"> When true, we are doing a deep clone of the cell, usually this means that it is for top n and we need to hold all cells in memory.</param>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.ForegroundColor">
            <summary>
            The foreground color of the cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.BackgroundColor">
            <summary>
            The background color of the cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsSaveable">
            <summary>
            Whether the cell is saveable in its current state
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsBorder">
            <summary>
            Whether this cell has a border
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsExecuteEmpty">
            <summary>
            Whether this cell is empty from an execution standpoint (not only no text value, but no formatting to do either)
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.SaveText">
            <summary>
            The text used for loading/saving a the cell value
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.EntityNames">
            <summary>
            An array of all entities associated with this cell. If none, will be an array of length zero.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.SetType">
            <summary>
            Set the cell type according to its current state
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.GetImageFn(System.Boolean)">
            <summary>
            When this cell contains an image of some sort, retrieves the image filename for this cell.
            </summary>
            <param name="includePath">When true, the path will be included as part of the filename</param>
            <returns>The filename (with or without path) of the image associated with this cell</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.IsImage(System.String)">
            <summary>
            Determine if the provided text is an image
            </summary>
            <param name="text">The text to check</param>
            <returns>true if the text represents an image, false otherwise</returns>
        </member>
        <member name="P:WebReports.Api.Reports.Cell.IsLinkedReport">
            <summary>
            Whether this cell contains a linked report reference
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Cell.CreateFileImage">
            <summary>
            Creates a file image from an embedded image for HTML display purposes
            </summary>
            <returns>The HTML markup to reference the image (starting with the img tag)</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormat.#ctor">
            <summary>
            This parameterless constructor is needed for serialization
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormat.GetFormattedGeneralNumber(WebReports.Api.Common.PageInfo,System.String,System.String@)">
            <summary>
            Formats a number as a string, honoring the ApplyGeneralFormatDecimalPlaces admin console setting
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormat.GetFormattedNumber(WebReports.Api.Common.PageInfo,System.String,System.String@)">
            <summary>
            Formats a number as a string, without honoring the ApplyGeneralFormatDecimalPlaces admin
            console setting.  This function always enforces the number of decimal places set in the
            admin console.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormat.Save(System.Data.DataRow)">
            <summary>
            Save a CellFormat to a data row
            </summary>
            <param name="formatDr">The datarow to save the format to</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellFormat.Load(WebReports.Api.Common.PageInfo,System.Data.DataRow)">
            <summary>
            Given a datarow, build a CellFormat object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="formatDr">The data row</param>
            <returns>The CellFormat object initialized from the data</returns>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction">
            <summary>
            This abstract class represents the base class for any custom functions that may exist within
            a cell formula. All functions have the format:
              
                  funcName ( parm1 , parm2 , ... , parmN )
            
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellFunction.ReplaceStaticFunctions(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Given a formula string, replace all static functions with their value.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The formula string to transform</param>
            <returns>The transformed formula string, all static functions replaced with their appropriate values</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFunction.CreateFunctionList(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Given a formula string, a list of CellFunction objects will be returned. Each CellFunction object represents a custom function found within the formula string. Non-custom
            functions (functions supported by the calculating engine) are not returned here.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The formula text to scan for custom user defined functions</param>
            <returns>A list of CellFunction objects related to the formula text</returns>
        </member>
        <member name="M:WebReports.Api.Reports.CellFunction.#ctor(WebReports.Api.Common.PageInfo,System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            Create a new CellFunction object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the function</param>
            <param name="minArgs">The minimum number of arguments passed into the function</param>
            <param name="maxArgs">The maximum number of arguments passed into the function</param>
            <param name="argList">An array where each entry describes the associated function parameter</param>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.Name">
            <summary>
            The name of the function
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.MinArgs">
            <summary>
            The minimum number of arguments passed into the function
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.MaxArgs">
            <summary>
            The maximum number of arguments passed into the function
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.ArgList">
            <summary>
            An array where each entry describes the associated function parameter
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.ArgDescriptors">
            <summary>
            An array where each entry describes the associated function parameter
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.Category">
            <summary>
            The category of this function
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellFunction.Description">
            <summary>
            The description of this function
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_Bold">
            <summary>
            Hyperlink(url, display text)
            This function returns an UdfHyperlinkData object
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_Today">
            <summary>
            Today(shouldFormat)
            This function returns the current date.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_Now">
            <summary>
            Now(shouldFormat)
            This function returns the current date and time.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_TimeFormat1">
            <summary>
            TimeFormat1(dateTime)
            This function converts dateTime into "hh:mm tt" format
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_DateTimeFormat1">
            <summary>
            DateTimeFormat1(dateTime)
            This function converts dateTime string into "date hh:mm tt" format (date depending on configuration)
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_GlobalDateTimeFormat">
            <summary>
            GlobalDateTimeFormat(dateTime)
            This function converts dateTime into "date time" format (date and time depending on configuration)
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_GlobalDateFormat">
            <summary>
            GlobalDateFormat(dateTime)
            This function converts dateTime into "date" format (date depending on configuration)
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_GlobalNumericFormat">
            <summary>
            GlobalNumericFormat(number)
            This function converts numeric into "number" format (date depending on configuration)
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_FilterValue">
            <summary>
            FilterValue(filterIdx,valueIdx)
            This function converts a filterIdx and valueIdx into a formatted value
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_LoadImage">
            <summary>
            LoadImage(imagePath)
            This function returns an UdfLoadImageData object
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_Hyperlink">
            <summary>
            Hyperlink(url, display text)
            This function returns an UdfHyperlinkData object
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_ExcelFormula">
            <summary>
            ExcelFormula(formula_text)
            This function returns a UdfExcelFormula object
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_StripHtmlTags">
            <summary>
            StripHtmlTags(text)
            This function returns the passed in text string, stripping out all HTML tags
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_CellValue">
            <summary>
            CellValue()
            This function returns the current value of the cell (used for conditional formatting)
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_GetReportExecuteHtml">
            <summary>
            CellFunction_GetReportExecuteHtml()
            This function returns execution html for a given report name
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_DataRowCount">
            <summary>
            CellFunction_DataRowCount()
            This function returns number of execution data rows returned for current report object
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_IsNoDataQualified">
            <summary>
            CellFunction_IsNoDataQualified()
            This function returns true if no data has been qualifed on a report execution
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_PageNumber">
            <summary>
            PageNumber()
            This function returns the current page number
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_ExportType">
            <summary>
            ExportType()
            This function returns the current export type
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_DateCustomFormat">
            <summary>
            DateCustomFormat()
            This function modifies the date to be output in the specified format. Submitting only a date value will use the default date format.
            This allows a user to easily format a date
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellFunction_UDF">
            <summary>
            ??(??)
            This function is any function name defined in the configuration and is dynamically compiled.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellDataFieldCollectionBuilder">
            <summary>
            A CellDataFieldCollectionBuilder is an instance of a CellVariableCollection that is capable of parsing 
            and tokenizing text containing data fields. A data field is any text surrounded by '{' and '}' and 
            references a specific column within a datasource object. This collection builder creates CellDataField
            objects (which extends CellVariable). A CellDataField object has a token that starts with 'vtok!:'.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellDataFieldCollectionBuilder.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create the CellDataFieldCollectionBuilder object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="F:WebReports.Api.Reports.Entity.IsParameterEntity">
            <summary>
            This is used to distinguish between filter dropdown objects tied to another entity, and parameter dropdown objects
            which share a lot of common code with filter dropdown objects, but exist as full entities of their own.
            This should only be called when dynamically creating an entity for use as a parameter dropdown object, and should
            not be used to modify existing entities.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Entity.Affinity">
            <summary>
            This is used to remember the source of an Entity. 
            The previous behaviour is that all entities are Global
            Entities marked as Report are custom entities which were created
            by the API and are saved with the report object
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.GetRowCountForDisplay(WebReports.Api.Reports.Entity.ColumnTypeFilter)">
            <summary>
            Gives a count for rows give(or not given) a specific display Type(Sorts, Filters, Design)
            </summary>
            <param name="displayType"></param>
            <returns>row count</returns>
        </member>
        <member name="P:WebReports.Api.Reports.Entity.Categories">
            <summary>
            Returns a list of category names this entity belongs to (same as splitting Entity.Category on ',')
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.MakeLegalDatabaseName(System.String)">
            <summary>
            Replace any non-word characters in the string with underscore to make a legal name for database use
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.TrimSqlStmt(System.String)">
            <summary>
            Remove trailing spaces and semicolon from SQL statement.
            This issue, EX-11090, arrises since a semicolon can be
            included in a SQL statement but not when that statement is
            used as a subquery
            </summary>
            <param name="sqlStmt"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.Clone(System.String)">
            <summary>
            Create a copy of the current entity.
            Leave the new name NULL to create an exact copy of the original Entity
            Specify a newEntityName to create a 'cloned' Entity which can be used in 
            queries along with the original Entity.
            </summary>
            <param name="newEntityName">Optional new name for the Entity</param>
            <returns>A new Entity object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.IsExecuteValueBreak(WebReports.Api.ExecuteData.ExecuteDataTable,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the values of this entity indicate a new row.
            Also returns the actual entity value used to determine the break as
            out parameter currentValue
            </summary>
            <param name="executeDt"></param>
            <param name="compareToNext"></param>
            <param name="groupCheck"></param>
            <param name="currentValue">Reference variable used to pass "break" value back to caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.IsRemoveable(WebReports.Api.Common.PageInfo)">
            <summary>
            Check if an entity can be removed without breaking join paths
            </summary>
            <param name="pageInfo">Optional, include to override using the Entity's pageInfo</param>
            <returns>True if the entity can be removed</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.GetColumnAliasName(System.String)">
            <summary>
            Returns a database independant aliased column name
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.GetDataObjectAliasName(System.String)">
            <summary>
            Returns a database independant aliased data object name
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.GetDbAliasName">
            <summary>
            Returns a database independant data object name
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.AddColumnToSchema(System.String,System.Int32,WebReports.Api.Reports.EntityColumnType)">
            <summary>
            Add 'on-the-fly' item to schema upon execution; used to support adding aggregate types when using database to aggregate values
            </summary>
            <param name="columnName">Name of column</param>
            <param name="dataType">Type of column based on Constants.DataType</param>
            <param name="columnType">An EntityColumnType; default is 'Normal'</param>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.ReplaceExagoFormulaFields(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Looks for any "ExagoFormula" columns (defined in column metadata) and replaces them
            with their formula equivalent.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The text that may contain formula field names.  Can be a single field name eg. "Employees.FullName" or a formula starting with an equals sign.</param>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.ReplaceSortAndGroupByValues(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Looks for any columns with a "sort and group-by" formula (defined in column metadata) and replaces them
            with their formula equivalent.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="text">The text that may contain formula field names.  Can be a single field name eg. "Employees.FullName" or a formula starting with an equals sign.</param>
        </member>
        <member name="P:WebReports.Api.Reports.Entity.ClonedFrom">
            <summary>
            EX-9901 Rmember where we cloned this entity from
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Entity.ToString">
            <summary>
            Override the default ToString() to provide a more useful string representation of this class.
            This is particularly useful when debugging as it quickly identifies the ENTITY when viewing a collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.Name">
            <summary>
            Returns either AliasedEntityName or AliasedColumnName depending on value of isEntityOnly
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.FullName">
            <summary>
            Returns either AliasedEntityName or AliasedEntityName.AliasedColumnName combination depending on value of isEntityOnly
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.ActualName">
            <summary>
            Returns ActualColumnName (from database)
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.ActualFullName">
            <summary>
            Returns AliasedEntityName.ActualColumnName combination
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.FullDbName">
            <summary>
            Returns DbEntityName.ActualColumnName combination
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.FormatDataType">
            <summary>
            Returns the effective data type for the column after taking into acount "Treat DateTime As"
            for date columns and column metadata.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.EntityColumn.IsExagoFormula">
            <summary>
            Returns true if the column is from an exago formula
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.EntityColumnsCollection">
            <summary>
            Summary description for EntityColumnsCollection.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ExecuteCellCollection.CloneExecuteCellCollection(WebReports.Api.Reports.ExecuteCellCollection)">
            <summary>
            Does a deep clone of an ExecuteCellCollection.
            </summary>
            <param name="cellCollection"></param>
        </member>
        <member name="P:WebReports.Api.Reports.ExecuteCellCollection.GroupBreakValue">
            <summary>
            Contains the "value" of the field/formula/entity that caused the most recent group break.
            This value is set when exporting to Excel and GroupsOnSeparateWorksheets is set on the Report.
            When either of those conditions is false, this value will be null.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.SerializableFilter">
            <summary>
            A representation of the Filter class, suitable for XML serialization.  For sending and receiving Filter information to/from the client, use ClientSerializableFilter.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.SerializableFilter.#ctor(WebReports.Api.Reports.Filter)">
            <summary>
            Constructs a SerializableFilter representation of a Filter object
            </summary>
            <param name="fromFilter">The filter to copy</param>
        </member>
        <member name="T:WebReports.Api.Reports.Filter">
            <summary>
            A Filter object is used to restrict the data returned during report execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.Title">
            <summary>
            Replaces the filterText in display. Used in Simple prompt window and filter formula description in the wizard
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.FilterText">
            <summary>
            The fully qualified mnemonic name of the filter.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.DbName">
            <summary>
            The fully qualified database (not mnemonic) name of the filter.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.DataType">
            <summary>
            The type of data to apply values for this filter <see cref="T:WebReports.Api.Common.Constants.DataType"/>.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.Id">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.EntityName">
            <summary>
            The name of the Entity that this filter applies to.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.EntityNames">
            <summary>
            Return an array containing all of the entity names in the filterTExt
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Filter.ContainsEntity(System.String)">
            <summary>
            Returns true if an entity is found with a matching name
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.IsStringFormula">
            <summary>
            
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.EntityColumns">
            <summary>
            Copied from Sort.cs. 
            The columns/fields to which this filter refers.  If a formula filter, includes all fields that are
            part of the formula.  Else, the single data field described by filterText.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.ColumnName">
            <summary>
            The column name within an Entity that this filter applies to.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.Operator">
            <summary>
            The operator to apply to the filter.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.IsLikeOperatorType">
            <summary>
            Returns a boolean indicating if the operator for this filter uses the 'LIKE' database keyword
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.DataValues">
            <summary>
            The possible values for the filter.
            </summary>
            <returns>A collection of data values that this filter should be applied to.</returns>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.Value">
            <summary>
            The first value for the filter.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Filter.AddValue(System.String)">
            <summary>
            Add a value to apply to this filter.
            </summary>
            <param name="value">The value to add to this filter.</param>
        </member>
        <member name="M:WebReports.Api.Reports.Filter.CanTranslateFormulaToSql(WebReports.Api.Data.DbConnect)">
            <summary>
            returns true if the filter formula can be translated into sql.
            </summary>
            <param name="dbConnect"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Filter.GetFormulaSqlString(WebReports.Api.Data.DbConnect,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Translates an Exago formula into a SQL string
            </summary>
            <param name="dbConnect"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Filter.GetSqlFilterName(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,WebReports.Api.Data.DbConnect)">
            <summary>
            Gets the column text that will appear in the SQL
            </summary>
            <param name="filterText"></param>
            <param name="useEntityNames"></param>
            <param name="useDbNames"></param>
            <param name="isDataSetFilter"></param>
            <param name="useColumnDelimiters"></param>
            <param name="isFilterDropdown"></param>
            <param name="dbConnect"></param>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.Prompt">
            <summary>
            Whether to prompt at report execution time for a value for this filter.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.ParameterPrompt">
            <summary>
            Whether the value of this filter refers to a parameter that is promptable.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.FilterParameter">
            <summary>
            Returns a parameter if one is used as the filter value.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.GroupWithNext">
            <summary>
            Whether this filter should be grouped with the next filter.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.AndOrWithNext">
            <summary>
            Whether this filter should be ANDed or ORed with the next filter.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.Entity">
            <summary>
            The Entity this filter applies to.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Filter.IsSqlJoinable(WebReports.Api.Reports.ReportJoinCollection)">
            <summary>
            Returns true if all of the entities in this filter are SQLJoinable
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Reports.Filter.DisplayValue">
            <summary>
            Gets an English string describing the filter values ie. "5 and 6," "(Tom, Jerry, Harry)." Returns
            the empty string if not enough values have been set for the current operator type.
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.CellStyle">
            <summary>
            A bunch of attributes used for defining text.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellStyle.Clear">
            <summary>
            Clear the CellStyle to its default values
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.Name">
            <summary>
            The name of the style for the text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.Size">
            <summary>
            The size of the text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.Bold">
            <summary>
            Whether the text should be bolded
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.Italic">
            <summary>
            Whether the text should be italicized
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.Underline">
            <summary>
            Whether the text should be underlined
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.ExcelUnderlineStyle">
            <summary>
            Used for easier conversion to Syncfusion XlsIO enumerated types
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.UnderlineStyle">
            <summary>
            What type of underline is being requested
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.VerticalAlign">
            <summary>
            The vertical alignment of the text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.HorizontalAlign">
            <summary>
            The horizontal alignment of the text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.ForegroundColor">
            <summary>
            The foreground color of the text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.BackgroundColor">
            <summary>
            The background color of the text
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.CellStyle.SaveableBackgroundColor">
            <summary>
            Whether the background color is saveable
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.CellStyle.Save(System.Data.DataRow)">
            <summary>
            Save a CellStyle to a specific data set as a child of a specific datarow
            </summary>
            <param name="ds">The dataset to serialize to</param>
            <param name="table">The name of the table to save to</param>
            <param name="dr">The parent datarow</param>
        </member>
        <member name="M:WebReports.Api.Reports.CellStyle.Load(WebReports.Api.Common.PageInfo,System.Data.DataRow)">
            <summary>
            Given a datarow obtained from complex type style, build a CellStyle object.
            </summary>
            <param name="dr">The data row, the child of the element whose type is style</param>
            <returns>The CellStyle object initialized from the data</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Join.ToString">
            <summary>
            Display information about the JOIN. Primarily used for logging [EX-8881]
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Join.SameJoin(WebReports.Api.Reports.Join)">
            <summary>
            See if this is the same type of JOIN. Used by the JoinCollection
            SafeAdd() to ensure that the newly added JOIN does not match
            an existing JOIN
            Note that the JOIN in the session already is prefered and the
            comparison is light testing only the entities and the affinity
            </summary>
            <param name="join"></param>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Reports.Join.Affinity">
            <summary>
            This is used to remember the source of a Join. 
            The previous behaviour is that all JOINs are Global
            Joins marked as Report are custom joins which were created
            by the API and are saved with the report object
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Join.FromEntity">
            <summary>
            Warning: if this or ToEntity are made public the system throws an exception when you create a new dashboard. Cause is currently unknown SRM 2017/12/28
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Join.IsValid">
            <summary>
            Flag is set after loading the data to indicate if there is an error
            This is primarily caused by one of the entities not be valid
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Join.OutputKeyColumnName(WebReports.Api.Reports.KeyColumn)">
            <summary>
            Output the column name. If its not a Column then make sure we strip the '+' sign 
            otherwise we'll get problems when we load and try to put () around things
            </summary>
            <param name="keyCol"></param>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Reports.Join.IsAdvancedJoin">
            <summary>
            Return TRUE if the JOIN contains advanced elements not supported by older code
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.Report">
            <summary>
            Notes: For [EX-10007] we are removing the information about the cache from the report.
            We have left the elements in the code but have define NO_CACHE_INFO to exclude them
            from the compiler. If these remain in the future feel free to delete it all.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Report.ApiReportOptions">
            <summary>
            Access the ApiReportOptions for this report.
            Used primarily to add Entities from injected SQL
            and configure a few option options
            EX-9535; EX-9722 make this public
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Report.ContainsWidgetTypes">
            <summary>
            Returns an array of Type objects describing which widget types the report contains ie. [Chart, Map, Gauge, ...]
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Report.GroupsOnSeparateWorksheets">
            <summary>
            Gets/Sets whether or not to break outer groups on separate Excel Worksheets when performing an Excel export
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Report.ReprocessAfterAlteration">
            <summary>
            This method must be called after the associated report has been altered by adding/removing cells, sections, and/or columns.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Report.CrossTabs">
            <summary>
            Retrieve the collection of CrossTabs defined within this report
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Report.ReloadEntities">
            <summary>
            EX-9535 We may need to reload these later if SetupData has cleared its entities
            This generally only happens after a DebugSave
            EX-9722 Use the new AddEntityToCollection method
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Report.CreateJoins">
            <summary>
            Update the collection of JOINs for the existing entities
            We create a set of JOINs using the system level JOIN information
            for all entities in the report.
            If there is already a JOIN for that set of entities then
            we'll use the existing specification as there maybe custom options.
            Any unused existing JOIN is tested to see if both its entities still exist
            and if so we retain it.
            [EX-8881] Make sure we keep custom JOINs
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Report.IntegrateJoins(WebReports.Api.Reports.ReportJoinCollection)">
            <summary>
            Integrate dynamically created Joins with the existing set of (possibly custom) Joins
            this.Joins contains the Joins we loaded
            the parameter buildJoins are produced by examining the entities in the report and the global
            Joins available.
            We will override the use of a global join if a custom one exists in the local join collection
            </summary>
            <param name="buildJoins"></param>
        </member>
        <member name="M:WebReports.Api.Reports.Report.GetExecuteSql">
            <summary>
            Returns all SQL statements that would be generated as a result of executing the report (there may be more
            than one SQL statement generated if the report uses more than one SQL data source).
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Report.GetExecuteColumns">
            <summary>
            Returns all column names that would be generated as a result of executing the report.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCellCollection.ResetExecution">
            <summary>
            Called after we check if we are allowed to aggregate in the database. Sets properties back
            to their original values, so we can process them later on in the execution
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCellCollection.GetControlCellByCrossTabId(System.Int32)">
            <summary>
            Retrieve the control cell of a specific CrossTab.
            </summary>
            <param name="id">The id of the CrossTab whose control cell should be retrieved</param>
            <returns>The control cell of the CrossTab specified, or null if one doesn't exist</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCellCollection.GetCellsByCrossTabId(System.Int32)">
            <summary>
            Retrieve an array of cells associated with a specific CrossTab.
            </summary>
            <param name="id">The id of the CrossTab whose control cell should be retrieved</param>
            <returns>An array of cells associated with a specific CrossTab.</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCellCollection.EnforceCellIdUniqueness">
            <summary>
            Makes sure cell IDs in the ReportCellCollection are unique by assigning new IDs to any cells that have
            duplicate IDs
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportCellCollection.ReferenceLoopExists(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Cell,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Determine if there there is a cell reference loop reachable from cell.  Performs a depth-first search
            to find a circular reference ie. a path from a cell back to itself.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="cell">The cell from which to start searching</param>
            <param name="seenNames">The list of cells that have been visited in the current traversal subtree</param>
        </member>
        <member name="T:WebReports.Api.Reports.ReportExecutionData.ExportColumnWidthCollection">
            <summary>
            Collection of ExportColumnWidth objects for report execution/export
            </summary>
        </member>
        <member name="T:WebReports.Api.Reports.ReportExecutionData.ExportColumnWidth">
            <summary>
            Contains 'original' export column widths and adjusted due to HTML fit-to-page option, or if total columns > page width for HTML/PDF/RTF exports
            </summary>
        </member>
        <member name="F:WebReports.Api.Reports.ReportExecutionData.hasFirstRowBeenWritten">
            <summary>
            Indicates whether or not the first for of *data* has been written (page headers don't count)
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.GetHiddenCellsArray">
            <summary>
            Return an array of boolians which indicate if the associated column is Hidden.
            [EX-9344]
            [EX-9820] Account for numExecutionColumns being more than report.Column
            because of CrossTab. 
            WARNING: this may hide the wrong column in the case of CrossTab
            </summary>
            <returns>Array of bools; true if the associated column is hidden</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.IsColumnHidden(System.Int32)">
            <summary>
            Indicate if a report column is hidden
            </summary>
            <param name="col">index of the column</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Report,WebReports.Api.Reports.ReportExecutionSection,WebReports.Api.Execute.ActiveLocalExecution)">
            <summary>
            Initialize a new ReportExecutionData object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="report">The report that is being executed</param>
            <param name="processor">The report processor to retrieve section data and ordering from</param>
            <param name="execution">The execution object defining this execution</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.GetSetupInfo">
            <summary>
            Retrieve the report cells describing the setup information for the report execution
            </summary>
            <returns>The ExecuteCellCollection object containing all report cells for this section</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportExecutionData.IsStaticPageHeader">
            <summary>
            Whether the page header is static in nature
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.ReportExecutionData.IsStaticPageFooter">
            <summary>
            Whether the page footer is static in nature
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.GetPageHeader(System.Int32,System.Boolean)">
            <summary>
            Retrieve the current page header, and identify it with a page number
            </summary>
            <param name="pageNum">The page number to define the current page header</param>
            <returns>The ExecuteCellCollection object containing all report cells for the page header</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.GetRepeatingHeaders(System.Int32)">
            <summary>
            Retrieve the current group header
            </summary>
            <returns>The ExecuteCellCollection object containing all report cells for the group header</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.GetPageFooter(System.Int32,System.Boolean)">
            <summary>
            Retrieve the current page footer, and identify it with a page number
            </summary>
            <param name="pageNum">The page number to define the current page footer</param>
            <returns>The ExecuteCellCollection object containing all report cells for the page footer</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.SetNumPages(System.Int32)">
            <summary>
            Indicates to the execution object that pageNum pages have finished exporting.
            While the client is polling for execution status, it receives this value for the number
            of pages that have finished being exported.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.GetWidgetExecutionData(WebReports.Api.Common.PageInfo,WebReports.Api.Widgets.Widget,WebReports.Api.Reports.Cell,WebReports.Api.Reports.Cell,WebReports.Api.Reports.SectionVariableValueProvider)">
            <summary>
            Gets data from the SectionVariableValueProvider with which to fill the current iteration of the widget
            </summary>
            <param name="widget">The widget that needs the data</param>
            <param name="reportCell">The report cell in which the widget resides</param>
            <param name="executeCell">The execute cell in which the current instance of the widget resides</param>
            <param name="sectionVariableValueProvider">The section value provider</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportExecutionData.AddRowToRepeatingHeaders(WebReports.Api.Reports.Row,WebReports.Api.Reports.ExecuteCellCollection,WebReports.Api.Reports.Section)">
            <summary>
            Adds the specified row to the correct RepeatingHeader's cellCollection. If the RepeatingHeader doesn't exist, it adds a new one to this.repeatingHeaders
            </summary>
            <param name="row">The repeating row to add</param>
            <param name="cellCollection">The current ExecuteCellCollection that the row is a part of</param>
            <param name="section">The current Section that the row is a part of</param>
        </member>
        <member name="T:WebReports.Api.Reports.ReportFilterCollection">
            <summary>
            A collection of Filter objects
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Initialize a new Filter collection.
            </summary>
            <param name="pageInfo">The PageInfo object.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.LoadData(System.Data.DataSet)">
            <summary>
            Loads the collection of filters from a DataSet.
            </summary>
            <param name="ds">The DataSet to load the filter collection from.</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.RemoveExtraParenthesis">
            <summary>
            Remove extra outer parenthesis that 
            can be added when we ship execfilters to the scheduler
            EX-9970
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.HasNonSqlFilters(WebReports.Api.Data.DbConnect,System.Boolean)">
            <summary>
            Returns true if the filter collection contains a combination of FormulaFilters that can't be translated into SQL and regular filters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.HasMultiDataSourceFilters(WebReports.Api.Data.DbConnect)">
            <summary>
            returns true if the filter collection of filters could not be evaluated in the database and has a combination of single and multi data source formula filters
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.NewFilter">
            <summary>
            Create a new Filter object for this collection
            </summary>
            <returns>An initialized filter object</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportFilterCollection.ToString">
            <summary>
            Returns a summary string describing the filters collection, just like on the client in the filters control
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.ValidateJoinOrder">
            <summary>
            Order joins in proper sequence, where each join in the collection must contain an entity that as already been joined in a prior join.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.SaveToJson">
            <summary>
            Return the XML Specification in JSON format.
            Can be dropped as a string into the XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.LoadFromJson(System.String)">
            <summary>
            Load the Collection from the JSON'ed XML string
            produced by SaveToJson()
            </summary>
            <param name="jsonStr"></param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.Copy(WebReports.Api.Reports.ReportJoinCollection)">
            <summary>
            Load the joins for the current object from the collection provided
            </summary>
            <param name="joins"></param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.GetJoinPathwayOld(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportEntityCollection,System.String)">
            <summary>
            Gets the "best" join pathway between all entities provided and automatically adds entities to the
            report that are needed to complete the path.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="entities">The entities for which to find the join path</param>
            <param name="category">If not null, restrict to joins in category (used to distinguish between data models in a "multiple data model" entity setup)</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.GetJoinPathway(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportEntityCollection,System.String)">
            <summary>
            Gets the "best" join pathway between all entities provided and automatically adds entities to the
            report that are needed to complete the path.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="entities">The entities for which to find the join path</param>
            <param name="category">If not null, restrict to joins in category (used to distinguish between data models in a "multiple data model" entity setup)</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportJoinCollection.CreateEntityJoinGraph(WebReports.Api.Reports.ReportJoinCollection)">
            <summary>
            Creates a graph to represent entities and joins
            </summary>
            <param name="joins"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Reports.ReportSectionCollection">
            <summary>
            A collection of sections, either for an entire report or a subreport.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportRowCollection,WebReports.Api.Reports.ReportCellCollection)">
            <summary>
            Initialize the collection of sections
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="rows">The rows that make up and define all sections within a report</param>
            <param name="cells">The cells that make up the entire report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportRowCollection,WebReports.Api.Reports.ReportCellCollection,WebReports.Api.Reports.Section,System.String)">
            <summary>
            Internal constructor for creating a section collection as a child of another section (SubReport)
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="rows">The rows that make up and define all sections within a report</param>
            <param name="cells">The cells that make up the entire report</param>
            <param name="subReportSection">The section that defines this subsection collection</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.Initialize(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportRowCollection,WebReports.Api.Reports.ReportCellCollection,System.String)">
            <summary>
            Initialize the section collection. Create each section required by the report, recursively if subsections are defined.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="rows">The rows that make up and define all sections within a report</param>
            <param name="cells">The cells that make up the entire report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.IsReportBreak(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            When this section collection is a subreport collection determines whether the subreport breaks (ends), otherwise returns false
            </summary>
            <param name="executeDt"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.SetExecutionReady(WebReports.Api.Reports.CellVariableCollection)">
            <summary>
            Set the sections within this collection as execution ready
            </summary>
            <param name="cellVariableCollection">The collection of variables that make up the report</param>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.ResetDetailShadingColor">
            <summary>
            Reset the shading color back to the first for all detail sections within this collection (or child collections)
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.IsEntityBreak(System.String)">
            <summary>
            Determine if any sections within this collection breaks on the entity specified
            </summary>
            <param name="entityName">The entity to check</param>
            <returns>true if a section within this collection breaks on the entity specified, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.OuterSection(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Section,WebReports.Api.Reports.Section)">
            <summary>
            Returns the "outermost" of the two sections as defined by the report sorts or null 
            if the sections are part of the same group.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="s0">The first section to compare</param>
            <param name="s1">The second section to compare</param>
        </member>
        <member name="P:WebReports.Api.Reports.ReportSectionCollection.HasDetailSection">
            <summary>Determines whether the report contains a detail section</summary>
            <returns>True if the report contains a detail section, otherwise False</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportSectionCollection.HasSubReport">
            <summary>Determines whether the report contains a subreport section (repeating group) section</summary>
            <returns>True if the report contains a subreport section (repeating group), otherwise False</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportSectionCollection.HasGroup">
            <summary>Determines whether the report contains a group header or footer</summary>
            <returns>True if the report contains a group header or footer, otherwise False</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportSectionCollection.HasReportFooter">
            <summary>Determines whether the report contains a report footer</summary>
            <returns>True if the report contains a report footer, otherwise False</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportSectionCollection.HasReportHeader">
            <summary>Determines whether the report contains a report header</summary>
            <returns>True if the report contains a report header, otherwise False</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.ContainsDataField(System.String)">
            <summary>Determines whether the report contains a specific data field</summary>
            <param name="dataField">The data field name to check</param>
            <returns>True if the report contains the data field, otherwise False</returns>
        </member>
        <member name="M:WebReports.Api.Reports.ReportSectionCollection.GetSectionsByDataField(System.String)">
            <summary>Returns the section that contains a specific data field</summary>
            <param name="dataField">The data field name to check</param>
            <returns>The Section if the report contains the data field, otherwise null</returns>
        </member>
        <member name="P:WebReports.Api.Reports.ReportSectionCollection.FooterSections">
            <summary>Returns all footer sections, including groups and report footer</summary>
            <returns>An array of Section objects limited to groups footers and report footer</returns>
        </member>
        <member name="T:WebReports.Api.Reports.Section">
            <summary>
            A section represents a logical grouping of rows within a report. If a section is of type SubReport, it itself 
            contains a collection of sections.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Section.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Section.SectionType,System.String,System.Int32,System.Int32,WebReports.Api.Reports.Row.RowShadingColors,System.String)">
            <summary>
            Create a new Section object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="sectionType">The type of section</param>
            <param name="groupBreakName">The name of the group this section breaks on</param>
            <param name="startRowNum">The row index that indicates the first row in this section</param>
            <param name="sectionIdx">The index this section resides within the current report</param>
            <param name="shadingColors">The background shading colors to iterate through when rendering this section</param>
            <param name="sectionPrepend">The section prepend string to get to this section</param>
        </member>
        <member name="P:WebReports.Api.Reports.Section.Type">
            <summary>
            The type of section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.GroupBreakName">
            <summary>
            The name of the group this section breaks on
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.GroupBreakEntityName">
            <summary>
            The name of the entity this section breaks on
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.GroupsOnSeparateWorksheets">
            <summary>
            This can be applied independently to group header sections
            This is used internally as a worksheet break and is automatically set for outermost groups.
            Setting this value to true on nested groups has undefined behavior.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.CurrentGroupNum">
            <summary>
            Store the current group number as part of the section so we know which iteration of the section we're
            currently in for use with GroupsOnSeparateWorksheets and ExecuteBreakField.GroupValues
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.CurrentGroupValue">
            <summary>
            Returns the current group "value". ie The value of the field that caused the group break to happen
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsFormula">
            <summary>
            Indicates whether the section group break is a formula
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.SectionIdx">
            <summary>
            The index this section resides within the current report
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.SectionPrepend">
            <summary>
            The section prepend string to get to this section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.NextShadingColor">
            <summary>
            Retrieves the next shading color for this section
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Section.ResetDetailShadingColor">
            <summary>
            Reset the shading color back to the first for this section if it is a detail section, or call recursively if super section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.RowCnt">
            <summary>
            The number of rows in this section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.NonSuppressedRowCnt">
            <summary>
            The number of rows in this section that aren't supressed
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.StartRowNum">
            <summary>
            The first row index this section starts at
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.EndRowNum">
            <summary>
            The last row index this section starts at
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.Rows">
            <summary>
            The rows that make up this section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.Cells">
            <summary>
            The cells that make up this section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.ShadingStartColIdx">
            <summary>
            The first column to start shading within this section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.ShadingEndColIdx">
            <summary>
            The last column to stop shading within this section
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.Sections">
            <summary>
            When this subreport is of type subreport, the collection of sections within this section. Otherwise null
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsReportHeader">
            <summary>
            Whether this section is a report header type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsReportFooter">
            <summary>
            Whether this section is a report footer type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsPageHeader">
            <summary>
            Whether this section is a page header type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsPageFooter">
            <summary>
            Whether this section is a page footer type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsDetail">
            <summary>
            Whether this section is a detail type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsHeaderGroup">
            <summary>
            Whether this section is a group header type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsFooterGroup">
            <summary>
            Whether this section is a group footer type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsGroup">
            <summary>
            Whether this section is a group header or group footer type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsSubreport">
            <summary>
            Whether this section is a subreport type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.DataTableRowIndex">
            <summary>
            The index of the dataTable row from which this section's data is pulled from
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsFooterSectionType">
            <summary>
            Whether this section is a subreport type
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.SectionVariableValueProvider">
            <summary>
            The cell variable value provider for this section. Initialzed once the section has been designated execution ready
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Section.IsEntityBreak(System.String)">
            <summary>
            Determine if this section breaks on the entity specified
            </summary>
            <param name="entityName">The entity to check</param>
        </member>
        <member name="P:WebReports.Api.Reports.Section.Entities">
            <summary>
            The entities associated with this section
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Section.AddRow(WebReports.Api.Reports.Row,WebReports.Api.Reports.ReportCellCollection)">
            <summary>
            Add a row to this section
            </summary>
            <param name="row">The row to add to this section</param>
            <param name="cells">The cells that make up the row</param>
        </member>
        <member name="P:WebReports.Api.Reports.Section.HasCrossTab">
            <summary>
            Whether this section has a CrossTab defined within it.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.CrossTabId">
            <summary>
            The id of the CrossTab defined within this section, or -1 if no such CrossTab exists.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsStatic">
            <summary>
            Whether this section is static.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsCollapsible">
            <summary>
            Whether this section is collapsible.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.ContainsCollapsibleRow">
            <summary>
            Whether this section contains a collapsable header row.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Section.IsSuppressed">
            <summary>
            Whether all rows in this section are suppressed.
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Section.SetExecutionReady(WebReports.Api.Reports.CellVariableCollection)">
            <summary>
            Designate the section as execution ready. 
            </summary>
            <param name="cellVariableCollection">The cell variable collection containing at least the variables within this section</param>
        </member>
        <member name="M:WebReports.Api.Reports.Section.IsBreak(WebReports.Api.ExecuteData.ExecuteDataTable,System.Boolean)">
            <summary>
            When this section is of type subreport, detail, group header, or group footer, determine whether the section breaks
            </summary>
        </member>
        <member name="M:WebReports.Api.Reports.Section.IsReportBreak(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            When this section is of type subreport, determine whether the subreport breaks (ends)
            </summary>
            <param name="executeDt">The current data row</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Reports.Section.IsSubreportBreak(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            When this section is of type subreport, determine whether the subreport breaks
            </summary>
            <param name="executeDt">The current data row</param>
            <returns>true when the subreport detail breaks, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Section.IsGroupBreak(WebReports.Api.ExecuteData.ExecuteDataTable,System.Boolean,System.Boolean)">
            <summary>
            Determine whether the section group breaks
            </summary>
            <param name="executeDt">The current row</param>
            <param name="checkNext">Whether to check against the next row (true) or the previous row (false) for a change.</param>
            <returns>true when the section group breaks, false otherwise</returns>
        </member>
        <member name="P:WebReports.Api.Reports.Section.GroupBreakFields">
            <summary>
            Gets list of data fields that constitute section break
            EX-9962 Propogate use of ReadOnlyCollection
            </summary>
            <returns>true list of data fields</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Section.ContainsDataField(System.String)">
            <summary>
            Determine whether the section contains a specfic data field
            </summary>
            <param name="dataField">The name of the data field to check</param>
            <returns>true if the section contains the data field, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.Reports.Sort.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Creates a new Sort with no sort text.  The SortText property must be used subsequently to set the behavior of the sort.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.Reports.Sort.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Sort)">
            <summary>
            Creates a new Sort by copying the state of an existing sort.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="fromSort">The Sort from which to create the new Sort</param>
        </member>
        <member name="M:WebReports.Api.Reports.Sort.#ctor(WebReports.Api.Common.PageInfo,System.String,System.Boolean)">
            <summary>
            Creates a new Sort with input sort text and sort direction
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="sortText">
            	The text that controls how the sort works.  Can be a field name
            	("Employees.LastName") or a formula starting with an equals sign ("={Employees.FirstName} &amp; " " &amp; {Employees.LastName}").
            </param>
            <param name="ascendingFlag">True to sort in ascending order, false to sort in descending order</param>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.SortText">
            <summary>
            The text that controls how the sort should behave.  If value starts with an equals sign,
            indicates that this is a formula sort.  Else, value should indicate the mnemonic name
            of a field on which to sort eg. Orders.OrderId
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.EntityNames">
            <summary>
            The names of the entities to which this sort refers.  If a formula sort, includes all entities that are
            part of the formula.  Else, the single entity that the data field described in Sort.SortText
            is part of.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.ColumnNames">
            <summary>
            The field names to which this sort refers.  If a formula sort, includes all fields that are
            part of the formula.  Else, the single data field described by Sort.SortText.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.Entities">
            <summary>
            The entities to which this sort refers.  If a formula sort, includes all entities that are
            part of the formula.  Else, the single entity that the data field described in Sort.SortText
            is part of.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.EntityColumns">
            <summary>
            The columns/fields to which this sort refers.  If a formula sort, includes all fields that are
            part of the formula.  Else, the single data field described by Sort.SortText.
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.IsFormula">
            <summary>
            Returns true if the formula is a "formula sort" ie. sorts based on a formula
            instead of a single column
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.Formula">
            <summary>
            The formula by which to sort if this is a formula sort, otherwise null
            </summary>
        </member>
        <member name="P:WebReports.Api.Reports.Sort.DataFieldsInFormula">
            <summary>
            Returns a list of data field variables contained in the formula
            </summary>
        </member>
        <member name="T:WebReports.Api.Scheduler.BatchJob">
            <summary>
            This is the primary web report job manager class. It is constructed to manage a specific web report which is described by the XML data
            provided by the XMLData property. Note that the backing xml store will be written to when the XMLData property is written. We will also
            examine the schedule information obtained from this data and reestablish the mob parameters
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.SetXML(System.String,System.Boolean)">
            <summary>
            Sets the internal XML content.  If it was previously null, then we also reload the JobInfo object
            and recalculate the next run date
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.executeBaseReport(WebReports.Api.Scheduler.SchedulerJob,System.Nullable{WebReports.Api.wrReportType})">
            <summary>
            Executes the report to an empty exporter for the purpose of getting all of the data for subsequent re-executions
            </summary>
            <param name="schedulerJob"></param>
            <param name="exportType"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.reExecuteBaseReport(WebReports.Api.Scheduler.SchedulerJob,System.Nullable{WebReports.Api.wrReportType})">
            <summary>
            Re-Executes the report to the requested exporter for the purpose of emailing the intended recipient
            </summary>
            <param name="schedulerJob"></param>
            <param name="exportType"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.AddBatchSummaryOutputJob(WebReports.Api.Scheduler.SchedulerJob,WebReports.Api.Scheduler.ReportScheduleInfo)">
            <summary>
            Adds a SendEmailJob to send the batch report summary information
            </summary>
            <param name="schedulerJob">The schedule job of the executed report we want to send</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.AddOutputJob(WebReports.Api.Scheduler.SchedulerJob)">
            <summary>
            Adds either a SendEmailJob or DiskJob to send or store the report output
            </summary>
            <param name="schedulerJob">The schedule job of the executed report we want to send</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.LoadJobInfo(System.Boolean)">
            <summary>
            Load the Schedule Info from the report parameters XML file
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.BatchJob.ResetFromXML(System.Boolean)">
            <summary>
            Reset all information from the XML backing store
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.KillJob(System.Guid)">
            <summary>
            Attempt to kill a job from the queue
            </summary>
            <param name="argJobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.GetJob(System.Guid,System.Boolean)">
            <summary>
            Search the Queue for a job specified by the its Guid
            </summary>
            <param name="argJobId">The job ID</param>
            <returns>The job with id <paramref name="argJobId"/></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.SuspendJob(WebReports.Api.Scheduler.Job)">
            <summary>
            Suspend a job from the queue and return it
            </summary>
            <param name="argJobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.SetJobStatus(WebReports.Api.Scheduler.Job,WebReports.Api.Scheduler.JobStatus)">
            <summary>
            Set a jobs status. Thread safe.
            </summary>
            <param name="job"></param>
            <param name="status"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.GetNextReadyJob">
            <summary>
            Return the next job in the queue for execution
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.UpdateScheduleVersion(System.String,WebReports.Api.Common.PageInfo)">
            <summary>
            [EX-9049] Update the scheduler information to correct for timezone
            New files (version>0) have the schedule information in server time.
            The older files maintened that in client time. This will update
            the schedule information to server time and set the version flag to mark
            </summary>
            <param name="filePath">Path the file to be processed</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.LoadQueue">
            <summary>
            Load the current job queue from the backing storage (nominally a file)
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.Flush(WebReports.Api.wrScheduleManagerViewLevel,System.String,System.String)">
            <summary>
            Remove all jobs from the queue which are marked for delete or which abended
            this Flush version is a forced flush call from schedule manager, as opposed to the automatic timed flush as is below
            </summary>
            <returns>the number of jobs from the queue</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.Flush(System.Int32,System.Boolean,WebReports.Api.wrScheduleManagerViewLevel,System.String,System.String)">
            <summary>
            Remove all jobs from the queue which are marked for delete or which abended
            this Flush version is used for automatic flushing based on flush interval
            </summary>
            <returns>the number of jobs from the queue</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.GetReportJobList(System.String)">
            <summary>
            Return an Array of Job objects from all the defined jobs with report ID matching <paramref name="reportId"/>.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.GetJobCacheList(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Return a set of jobs which represent cache jobs for the indicated report
            optionally filter the jobs by the company/user indicated
            If Companyid and UserID are both null we don't check view levels permissions
            this lets us find any cache for a report
            [EX-10007]
            </summary>
            <param name="checkViewLevel"></param>
            <param name="reportId">The report we are looking for</param>
            <param name="companyId">Current User' CompanyId</param>
            <param name="userId">Current Users' User iD</param>
            <returns>List of XML strings with full job information</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.IsUserViewable(System.String,System.String,WebReports.Api.wrCacheVisibility,System.String,System.String)">
            <summary>
            Determin if the indicated user (companyd/userid) can view the 
            job under consideration.
            Rules are based on wrCacheVisibility enum
            [EX-10007]
            </summary>
            <param name="jobCompanyId">The CompanyId listed in the job</param>
            <param name="jobUserId">The UserId listed in the job</param>
            <param name="viewLevel">Permission from job</param>
            <param name="companyId">Current user's companyid</param>
            <param name="userId">Current user's userid</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.GetScheduledJobCount">
            <summary>
            Return the number of scheduled report jobs
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueue.GetSyncronousJobCount">
            <summary>
            Return the number of syncronous jobs
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Scheduler.JobFactory">
            <summary>
            Create a job class from its name or xml
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobQueueMethod.IsMethod(System.String)">
            <summary>
            Check if a specified method exists [EX-10007]
            </summary>
            <param name="name">Name of the method</param>
            <returns>True if the method is defined</returns>
        </member>
        <member name="T:WebReports.Api.Scheduler.QueueApi">
            <summary>
            Scheduler Queue Api Class for External Queue Support
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.QueueApi.GetJob(System.String)">
            <summary>
            Creates and returns a QueueApiJob object for external queue support
            </summary>
            <param name="jobXml">XML of incoming job</param>
            <returns>QueueApiJob object</returns>
        </member>
        <member name="T:WebReports.Api.Scheduler.QueueApiJob">
            <summary>
            Scheduler Queue Api Job Class for External Queue Support
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.Job">
            <summary>
            Gets internal Job object
            </summary>
            <returns>Job object</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.JobType">
            <summary>
            Gets Job Type of job
            </summary>
            <returns>Job type</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.JobId">
            <summary>
            Gets Job Id of job
            </summary>
            <returns>Job Id</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.ReportId">
            <summary>
            Gets Report Id of job
            </summary>
            <returns>Report Id</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.NextExecuteDate">
            <summary>
            Gets Next Execute Date for job
            </summary>
            <returns>Next Execute Date</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.Status">
            <summary>
            Gets or sets Job Status of job
            </summary>
            <returns>Job Status</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.ReportName">
            <summary>
            Gets or sets Report Name of job
            </summary>
            <returns>Report Name</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.ScheduleName">
            <summary>
            Gets Schedule Name of job
            </summary>
            <returns>Schedule Name</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.ConfigXml">
            <summary>
            Gets or sets Configuration XML of job
            </summary>
            <returns>Configuration XML</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.ReportXml">
            <summary>
            Gets or sets Report XML of job
            </summary>
            <returns>Report XML</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.ScheduleXml">
            <summary>
            Gets or sets Schedule XML of job
            </summary>
            <returns>Schedule XML</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.JobInfoXml">
            <summary>
            Gets or sets Job Info XML of job
            </summary>
            <returns>Job Info XML</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.Xml">
            <summary>
            Gets or sets complete Job XML
            </summary>
            <returns>Job XML</returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.QueueApiJob.JobListXml">
            <summary>
            Gets Job List XML, which includes schedule and job info components
            </summary>
            <returns>Job List XML</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.QueueApiJob.SetDelete">
            <summary>
            Changes status of Job depending on previous status
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.QueueApiJob.SetFlush(System.Int32,System.String,System.String,System.String)">
            <summary>
            Changes status of Job depending on previous status and whether it meets view level requirement
            </summary>
            <param name="flushTime">Number of hours</param>
            <param name="viewLevel">View level for this specific user</param>
            <param name="companyId">Used to determine whether this job can be flused by incoming user</param>
            <param name="userId">Used to determine whether this job can be flushed by incoming user</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.QueueApiJob.IsUserViewable(System.String,System.String,System.String)">
            <summary>
            Determines if this Job is viewable based on view level, company id, and user id
            </summary>
            <param name="viewLevel">View level for this specific user</param>
            <param name="companyId">Used to determine whether this job is viewable by incoming user</param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerServiceInterface.FindCacheJob(System.String,System.String,System.String)">
            <summary>
            Return the cache job for the indicated report and user
            Currently we return the first job the user has visibility on
            but we should search for the best one - i.e. one the user scheduled
            EX-10007
            </summary>
            <param name="reportId"></param>
            <param name="companyId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerMethodInterface.FindCacheJob(System.String,System.String,System.String)">
            <summary>
            This is not supported at this point. Eventually we'll need to add
            support for this add add a method to the Queue service
            </summary>
            <param name="reportId"></param>
            <param name="companyId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerMethodInterface.ExecuteScheduledJobImmediate(System.Int32,System.Guid)">
            <summary>
            [EX-9209] Make call to start job exectuion on remote
            </summary>
            <param name="hostIdx"></param>
            <param name="jobId"></param>
        </member>
        <member name="T:WebReports.Api.Scheduler.ActiveJobInfo">
            <summary>
            Maintain information about an active job
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.ActiveJobInfo.RunTime">
            <summary>
            Number of seconds the job has been running for
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.DiskJob.LoadJobInfo(System.Boolean)">
            <summary>
            Load the Schedule Info from the report parameters XML file
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.DiskJob.IsScheduleable">
            <summary>
            Returns a boolean indicating if job can be scheduled
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.DiskJob.IsSuspendable">
            <summary>
            Returns a boolean indicating if job can be suspended
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.DiskJob.IsTopPriority">
            <summary>
            Returns a boolean indicating if job is maximum priority
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.DiskJob.IsSynchronous">
            <summary>
            Returns a boolean indicating if job is synchronous
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.DiskJob.IsParentJobSynchronous">
            <summary>
            Returns a boolean indicating if the WebReportJob that created this job is synchronous
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SimultaneousJobMax">
            <summary>
            Maximum number of jobs which should be allowed to execute at the same time
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.ErrorReportTo">
            <summary>
            Address to send error report emails to
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SleepTime">
            <summary>
            How long to sleep when nothing is going on (in seconds)
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.DefaultJobTimeout">
            <summary>
            How long a job should be allowed to execute for (in seconds)
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Config.MapPath(System.String)">
            <summary>
            Map a file name into the working directory
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.WorkingDirectory">
            <summary>
            Directory into which all our files should be written
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SmtpServer">
            <summary>
            IP or server name of the SMTP Server
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SmtpEnableSsl">
            <summary>
            Sets EnableSsl on SMTP client
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SmtpUserId">
            <summary>
            User Id used for smtp authentication; leave blank to use default credentials
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SmtpPassword">
            <summary>
            Password used for smtp authentication; leave blank to use default credentials
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SmtpFrom">
            <summary>
            Email address that emails should come from
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SmtpFromName">
            <summary>
            Name that should appear as the source of emails
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.ChannelType">
            <summary>
            ChannelType to be used by the application for remote connections
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SecureChannel">
            <summary>
            Whether or not to turn on authentication and encryption for remote connections
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.Port">
            <summary>
            Port to be used by the application for remote connections
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.FlushTime">
            <summary>
            Time span (hours) to remove completed jobs automatically
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.SyncFlushTime">
            <summary>
            Time span (hours) to remove completed synchronous jobs automatically
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.EmailAddendum">
            <summary>
            Text to add to end of email body
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.ExternalInterface">
            <summary>
            Overrides external interface coming from API
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.ReportPath">
            <summary>
            Path to where executed reports should be stored if Admin parameter, "EmailScheduledReports," is set to false
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.AbendUponReportError">
            <summary>
            Determines whether a report schedule abends or continues upon a report execution load error or exception
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.IpAddress">
            <summary>
            An optional parameter that specifies what IP address to bind to, if there are multiple options
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.EncryptScheduleFiles">
            <summary>
            Determines whether to encyrpt scheduler files
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.MaxTempFileAge">
            <summary>
            Number of minutes to leave a temp file before deleting during cleanup procedure
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.EmailRetryTime">
            <summary>
            Number of minutes in between retries of sending an email upon failure
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.MaxJobExecutionMinutes">
            <summary>
            Number of minutes in between retries of sending an email upon failure
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Config.QueueService">
            <summary>
            An optional paremter that specifies custom queue service in the form of an assembly or web service
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Config.GetSmtpClient">
            <summary>
            Return a configured SmtpClient.
            Returns NULL if configuration items are not correctly defined.
            If the Userid or password are not provided then default credentials is implied
            if the UserId is set to 'NoSmtpCredentials' and the Password is set to some non-empty value
              then we set EnableSsl to false and assume no credentials are required
            note: added smtp server port capability by using host:port syntax in Config.SmtpServer
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.Config.Initialize">
            <summary>
            Initialize the configuration. This should be called by the startup code with no threads running
            </summary>
            <remarks>
            Find our configuration file. First look into the registry HKEY_LOCAL_MACHINE/Software/Exago/eWebReportsScheduler/ConfigFile
            If its not found there then see if anything is specified in our exe Config file
            Otherwise we default to eWebReportsScheduler.xml in the same directory as the executable
            </remarks>
        </member>
        <member name="M:WebReports.Api.Scheduler.EventLogger.WriteToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Write a message into the event log
            </summary>
            <param name="argMsg"></param>
            <param name="argEntryType"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.TestConnection">
            <summary>
            Tests connection between web application and scheduler service
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.AddReport(System.Version,System.Guid,System.String)">
            <summary>
            Add a new web report job to the queue
            </summary>
            <param name="version">Version of caller</param>
            <param name="xmlData">XML Data which contains the WebReport specifications</param>
            <returns>Guid which identifies the new job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetJobStatusList(System.Version,WebReports.Api.wrScheduleManagerViewLevel,System.String,System.String,System.Boolean)">
            <summary>
            Get information about all jobs in the system.
            </summary>
            <param name="version">Version of caller</param>
            <returns>An array of JobInfo</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.Flush(System.Version,WebReports.Api.wrScheduleManagerViewLevel,System.String,System.String)">
            <summary>
            Clear all DELETED and ABORTED jobs from the job queue
            </summary>
            <param name="version">Version of caller</param>
            <returns>Number of jobs removed from the Queue</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetJobDetails(System.Version,System.Guid)">
            <summary>
            Obtain details about a specific job. This is generally not required since
            the details are now available in the full status report provided by GetJobStatusList
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetJobStatus(System.Version,System.Guid)">
            <summary>
            Obtain status about a specific job. 
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetMetaContent(System.Version,System.Guid)">
            <summary>
            Obtain the meta content for an html export job.
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetPage(System.Version,System.Guid,System.Int32,System.Int32)">
            <summary>
            Obtain the page content for an html export job.
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetJsonChunks(System.Version,System.Guid,System.Int32,System.Int32)">
            <summary>
            Obtain the output JSON chunks for a JSON export job.
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetJobExportPackageXml(System.Version,System.Guid)">
            <summary>
            Get all export file information (except for data) and return as XML for synchronous report execution
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetJobExportData(System.Version,System.Guid)">
            <summary>
            Get export file data and return as byte array for synchronous report execution
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetSyncronousJobPercent(System.Version)">
            <summary>
            Get total running percent of synchronous jobs
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetSystemResourceValue(System.Version)">
            <summary>
            This function returns two values.  The first being an available resource value, and the second the percent of available job slots 1 / (active jobs vs max jobs)
            The resource value is a number between 0-1 representing resource availability.
            A resource value of 0 indicates no resources are available, and a value of 1 indicates most or all resources are available
            </summary>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetDetailedSystemResources(System.Version)">
            <summary>
            Get numbers indicating cpu% available and memory available
            </summary>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetSystemAudit(System.Version,System.Boolean)">
            <summary>
            Get audit data, including cpu% available, memory available, report execution start, and report execution end
            </summary>
            <param name="version">Version of caller</param>
            <param name="statsOnly">Boolean indicating whether report execution details and/or statistics are collected</param>
            <returns>Dictionary&lt;string, DataSet&gt; object containing pre-formatted execution and/or statistics details</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.KillJob(System.Version,System.Guid)">
            <summary>
            Kill an existing job
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId">Guid which identifies an existing job</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.UpdateSchedule(System.Version,System.Guid,System.String)">
            <summary>
            Update the report specification for an existing web report
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId">Guid which identifies an existing job</param>
            <param name="xmlData">XML data providing WebReport specification</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.ExecuteScheduledJobImmediate(System.Version,System.Guid)">
            <summary>
            Execute the scheduled job
            </summary>
            <param name="version"></param>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.UpdateReport(System.Version,System.String,System.String)">
            <summary>
            Update all scheduled reports based on the report ID
            </summary>
            <param name="version">Version of caller</param>
            <param name="reportId">Guid which identifies an existing report</param>
            <param name="xmlData">XML data providing WebReport specification</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.DeleteReport(System.Version,System.String)">
            <summary>
            Delete all scheduled reports based on the report ID
            </summary>
            <param name="version">Version of caller</param>
            <param name="reportId">Guid which identifies an existing report</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.RenameReport(System.Version,System.String,System.String)">
            <summary>
            Rename all scheduled reports based on the report ID
            </summary>
            <param name="version">Version of caller</param>
            <param name="reportId">Guid which identifies an existing report</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetFilterDropdownData(System.Version,System.String,System.String,System.String,System.String,System.Int32,System.String,WebReports.Api.Scheduler.ParameterDropdownContent)">
            <summary>
            Get dropdown filter values
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="reportXml">Xml for current report</param>
            <param name="dropdownFilterColumnName">Name of filter column name</param>
            <param name="editValue">Starting value typed in edit box</param>
            <param name="dropdownFilterDataType">Data type of filter column name</param>
            <param name="filterDelimitedString">Delimited Filter string required for current user session</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetCanReportEntitiesRangeSelect(System.Version,System.String,System.String)">
            <summary>
            Get boolean indicating whether or not all entities in the report support range selection
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="reportXml">Xml for current report</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetEntityColumns(System.Version,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get columns for a specific entity (schema)
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="entityName">Name of entity</param>
            <param name="includeEntityName">Whether to include entity name in each column name</param>
            <param name="isDbName">Whether incoming entityName is alias or db name</param>
            <param name="getActualNames">Whether to sort by db or alias name</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.GetDataSourceObjectNames(System.Version,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get object names for a specific entity
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="objectType">data source object type (tables, views, etc.)</param>
            <param name="dbType">data source type (SQL Server, Oracle, etc.)</param>
            <param name="dataConnStr">data source connection string</param>
            <param name="checkReturnType">Whether to validate return type for custom data sources</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.TestDataSourceConnection(System.Version,System.String,System.String,System.String,System.String)">
            <summary>
            Test data source connection
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="dbType">data source type (SQL Server, Oracle, etc.)</param>
            <param name="dataConnStr">data source connection string</param>
            <param name="sqlStmt">if not null, validates sql statement</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.IReportSchedulerObject.SetLoggingLevel(WebReports.Api.Scheduler.LoggingLevel)">
            <summary>
            Set the current system logging level
            </summary>
            <param name="level"></param>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.JobInfo">
            <summary>
            Standard information block about the current job
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.ActiveJobInfo">
            <summary>
            Information about the current execution job
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.MaxExecuteTime">
            <summary>
            Maximum number of seconds of execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.GotFromQueueService">
            <summary>
            Whether the job was gotten from queue service instead of local queue
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.Execute">
            <summary>
            Job should run itself and return a completion code, zero imples all good with the world
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.Reschedule">
            <summary>
            Job should compute its next execute time or delete itself if completed
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.Save">
            <summary>
            Write the job XML to disk
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.Delete">
            <summary>
            Delete the XML file representing the job
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.FreeXml">
            <summary>
            Releases memory required for job execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.XMLData">
            <summary>
            The XML backing contained in memory
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.IsScheduleable">
            <summary>
            Returns a boolean indicating if job can be scheduled
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.IsSuspendable">
            <summary>
            Returns a boolean indicating if job can be suspended
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.IsTopPriority">
            <summary>
            Returns a boolean indicating if job is maximum priority
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.Job.IsSynchronous">
            <summary>
            Returns a boolean indicating if job is synchronous
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.ReloadJob">
            <summary>
            Reloads job
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.Job.OnScheduleUpdate">
            <summary>
            Called when the schedule linked to the job is about to be updated (pertains to WebReportJobs only).
            </summary>
        </member>
        <member name="T:WebReports.Api.Scheduler.JobInfo">
            <summary>
            Basic job information
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.JobInfo.XMLData">
            <summary>
            Specifics about the job. This is only used when sending 
            the job information to an external client
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.JobInfo.IsExecutionCache">
            <summary>
            We cache this information here from the schedule.
            This is NOT saved in the XML but loaded with the job xml;
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.JobInfo.ThinXML">
            <summary>
            Removes the "config" and "report" sections from XMLData to reduce the memory footprint
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.ReportScheduleInfo.FormattedEmailSubject">
            <summary>
            Returns email subject with any non-hidden parameters swapped for the actual parameter values
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.ReportScheduleInfo.FormattedEmailBody">
            <summary>
            Returns email body with any non-hidden parameters swapped for the actual parameter values
            </summary>
        </member>
        <member name="T:WebReports.Api.Scheduler.ApiReportScheduleInfo">
            <summary>
            Object for the user that contains jobId as well as schedule info. 
            This class specific to the getters that the new api interface provides
            it provides the jobId as well as the ReportScheduleInfo to the user so the other important methods (like update) can be used.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateImmediateSchedule(System.String,WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run immediately. Report will be executed exactly one time
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateOnceScheduleByDateTime(System.DateTime,System.String,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run once at a specific date and time. Report will be executed exactly one time
            </summary>
            <param name="schedDateTime">The date to run the schedule.  If the schedTime parameter is null, the scheduler will use the time value of this parameter</param>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateEveryWeekdaySchedule(System.String,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run every weekday. Report will be executed with no end condition
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateEveryWeekdaySchedule(System.String,System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run every weekday. Report will be executed the number of times specified in rangeEndAfterNOcurrences
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateEveryWeekdaySchedule(System.String,System.DateTime,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run every weekday. Report will be executed until the specified rangeEndDate
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateEveryNDaySchedule(System.String,System.Int32,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a daily interval. Report will be executed with no end condition
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNDays">Indicates the interval at which to run the schedule (e.g. every 10 days).  If everyWeekday is true this parameter will be ignored</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateEveryNDaySchedule(System.String,System.Int32,System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a daily interval. Report will be executed the number of times specified in rangeEndAfterNOccurrences
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNDays">Indicates the interval at which to run the schedule (e.g. every 10 days).  If everyWeekday is true this parameter will be ignored</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateEveryNDaySchedule(System.String,System.Int32,System.DateTime,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a daily interval. Report will be executed until the rangeEndDate
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNDays">Indicates the interval at which to run the schedule (e.g. every 10 days).  If everyWeekday is true this parameter will be ignored</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateDailySchedule(System.String,System.Boolean,System.Int32,System.DateTime,System.Boolean,System.Int32,System.Nullable{System.DateTime},WebReports.Api.Scheduler.SchedulerEmailInfo,System.Nullable{System.TimeSpan})">
            <summary>
            Schedule a report to be run on a daily interval. Report will be executed until the recurrence completion conditions have been met
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyWeekday">Indicates whether to run the schedule every weekday.  If true the everyNDays parameter will be ignored</param>
            <param name="everyNDays">Indicates the interval at which to run the schedule (e.g. every 10 days).  If everyWeekday is true this parameter will be ignored</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeNoEndDate">Indicates to the scheduler whether or not to ever cease running this schedule.  If true, the rangeEndAfterOccurrences and rangeEndDate parameters are ignored</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the rangeStartDate parameter</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateWeeklySchedule(System.String,System.Int32,System.Collections.Generic.List{System.DayOfWeek},System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a weekly interval.  Report will be executed with no end condition
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="days">Days on which the schedule is to be run</param>
            <param name="everyNWeeks">Indicates the interval at which to run the schedule (e.g. every 2 weeks)</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="SchedulerEmailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateWeeklySchedule(System.String,System.Int32,System.Collections.Generic.List{System.DayOfWeek},System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a weekly interval. Report will be executed the number of times specified in endAfterNOccurrences
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="days">Days on which the schedule is to be run</param>
            <param name="everyNWeeks">Indicates the interval at which to run the schedule (e.g. every 2 weeks)</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="SchedulerEmailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId string that uniquely identifies the newly created job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateWeeklySchedule(System.String,System.Int32,System.Collections.Generic.List{System.DayOfWeek},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a weekly interval.  Report will be executed until the rangeEndDate
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="days">Days on which the schedule is to be run</param>
            <param name="everyNWeeks">Indicates the interval at which to run the schedule (e.g. every 2 weeks)</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="SchedulerEmailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateWeeklySchedule(System.String,System.Int32,System.Collections.Generic.List{System.DayOfWeek},System.DateTime,System.Boolean,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a weekly interval. Report will be executed until the recurrence completion conditions have been met
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="days">Days on which the schedule is to be run</param>
            <param name="everyNWeeks">Indicates the interval at which to run the schedule (e.g. every 2 weeks)</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeNoEndDate">Indicates to the scheduler whether or not to ever cease running this schedule.  If true, the rangeEndAfterOccurrences and rangeEndDate parameters are ignored</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="SchedulerEmailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlyScheduleByNumericDay(System.String,System.Int32,System.Int32,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a specifc day each month. Executions will continue indefinitely
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlyScheduleByNumericDay(System.String,System.Int32,System.Int32,System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a specifc day each month. Report will be executed a specific number of times 
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlyScheduleByNumericDay(System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a specifc day each month. Executions will continue until the specified end date
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlyScheduleByDescriptionDay(System.String,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a described day each month. Executions will continue indefinitely
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlyScheduleByDescriptionDay(System.String,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a described day each month. Executions will continue for a specific number of occurrences.
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlyScheduleByDescriptionDay(System.String,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a described day each month. Executions will continue until the specified range end date.
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateMonthlySchedule(System.String,System.Int32,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Boolean,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a monthly interval. Report will be executed until the recurrence completion conditions have been met
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="everyNMonths">Indicates the interval at which to run the schedule (e.g. every 2 months)</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.  If greater than zero, <paramref name="ordinal"/> and <paramref name="dayOfWeek"/> will be ignored.</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeNoEndDate">Indicates to the scheduler whether or not to ever cease running this schedule.  If true, the rangeEndAfterOccurrences and rangeEndDate parameters are ignored</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlyScheduleByNumericDay(System.String,System.Int32,System.Int32,System.DateTime,System.Boolean,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a specific day each year.  Executions will continue indefinitely. 
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule.</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeNoEndDate">Indicates to the scheduler whether or not to ever cease running this schedule.  If true, the rangeEndAfterOccurrences and rangeEndDate parameters are ignored</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlyScheduleByNumericDay(System.String,System.Int32,System.Int32,System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a specific day each year.  Executions will continue for a specific number of occurrences. 
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule.</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlyScheduleByNumericDay(System.String,System.Int32,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a specific day each year.  Executions will continue until the specified range end date. 
            </summary>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule.</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.</param>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlyScheduleByDescriptionDay(System.String,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a described day each year.  Executions will continue indefinitely.
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule.</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlyScheduleByDescriptionDay(System.String,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Int32,System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a described day each year. Report will be executed a specific number of times.
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule.</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlyScheduleByDescriptionDay(System.String,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a described day each year. Report will be executed until the specified range end date.
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule.</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.CreateYearlySchedule(System.String,System.Int32,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.DateTime,System.Boolean,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},WebReports.Api.Scheduler.SchedulerEmailInfo)">
            <summary>
            Schedule a report to be run on a yearly interval. Report will be executed until the recurrence completion conditions have been met
            </summary>
            <param name="name">The name of the schedule as it appears in the Schedule Manager</param>
            <param name="numericMonth">The numeric month (1-12) on which to run the schedule. Always used.</param>
            <param name="numericDay">The numeric day of each month (e.g. 17) on which to run the schedule.  If greater than zero, weekOfMonth and dayOfWeek will be ignored.</param>
            <param name="ordinal">Taken in context with <paramref name="dayOfWeek"/>, describes when during the month to run the schedule. (e.g. 'Third')</param>
            <param name="dayOfWeek">The 'described' day of each week (e.g. 'Weekday') on which to run the schedule.  Used in conjunction with <paramref name="ordinal"/>.</param>
            <param name="rangeStartDate">The date on which to begin running the schedule.  If schedTime (below) is null, eWebReports will use the time component of this parameter as the schedule time</param>
            <param name="rangeNoEndDate">Indicates to the scheduler whether or not to ever cease running this schedule.  If true, the rangeEndAfterOccurrences and rangeEndDate parameters are ignored</param>
            <param name="rangeEndAfterNOccurrences">Indicates to the scheduler to cease running this schedule after a fixed number of ocurrences.  If greater than zero this value will take precedence over rangeEndDate</param>
            <param name="rangeEndDate">Indicates to the scheduler to cease running by a specific date.  Ignored if either rangeNoEndDate is true or rangeEndAfterNOccurrences is greater than zero</param>
            <param name="schedTime">The time to run the schedule.  If null, the scheduler will use the time value of the schedDateTime parameter</param>
            <param name="emailInfo">Information on email addresses, subject and body. Null tells the scheduler to store output in the location specified by report_path in the scheduler config file</param>
            <returns>jobId String that represents that unique job</returns> 
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.ExecuteScheduledJobImmediate(System.Int32,System.Guid)">
            <summary>
            [EX-9209] Start execution of a schedule job - i.e. generate the cache
            </summary>
            <param name="hostIdx">Index of the host, if -1 we will locate the job by searching for it</param>
            <param name="jobId">Job Id of the cache job</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetInfoForCacheJob(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get Schedule information, including HostIdx, for a cached job
            We are using the TimeStamp in SchedulerJob to age the cache. 
            Currently set to 20s.
            Note that if we get a null SchedulerJob we creaet on with a null JobInfo so 
            we don't keep looking if we did not find it
            [EX-10007]
            </summary>
            <param name="reportId"></param>
            <param name="companyId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetHostIdxForJob(System.Guid)">
            <summary>
            Find the host which is running the indicated job [EX-9209]
            TODO SRM Cache this information so we don't have to ask again for this session
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetJobInfoXml(System.Int32,System.String)">
            <summary>
            Obtain the job info for the indicated jobId from the indicated host.
            </summary>
            <param name="hostIdx">index into the host table, specifies where the job should be</param>
            <param name="jobId">specifies the job</param>
            <returns>String containing the XML representation of the job information</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.WriteJobExportData(System.Int32,System.Guid,WebReports.Api.Execute.ActiveRemoteExecution,System.Boolean)">
            <summary>
            Gets the execution data from the scheduler and writes all relavant files to disk so they can be accessed through the web.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetReportScheduleInfo(System.String,System.String)">
            <summary>
            Get the reportScheduleInfo object associated with a jobId or a scheduleName
            returns reportScheduleInfo where it can be modified then re-added
            For internal use.
            </summary>
            <param name="jobId">jobId converted from GUID Defines a unique scheduling job</param>
            <param name="scheduleName">name of schedule. provided to give another way to grab ReportScheduleInfo</param>
            <returns>ApiReportScheduleInfo ScheduleInfo that is associated with the jobId or scheduleName provided</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetReportScheduleInfoByJobId(System.String)">
            <summary>
            Calls GetReportScheduleInfo with scheduleName. This method is for intuitive calling of the GetReportScheduleInfo by jobId
            </summary>
            <param name="jobId">jobId that uniquely identifies a schedule</param>
            <returns>ReportScheduleInfo that matches the jobId provided</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetFirstApiReportScheduleInfoByScheduleName(System.String)">
            <summary>
            Calls GetReportScheduleInfo with scheduleName. This method is for intuitive calling of the GetReportScheduleInfo by name
            </summary>
            <param name="scheduleName">Name of the schedule to be found</param>
            <returns>ApiReportScheduleInfo The first ReportScheduleInfo that has a matching name</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetApiReportScheduleInfoListByName(System.String)">
            <summary>
            Gets a List of reportScheduleInfos that all have the same name. scheduleName is not unique, so it is possible to have multiple reportScheduleInfos.
            </summary>
            <param name="scheduleName">Name that identifies a job</param>
            <returns>List of ApiReportScheduleInfo</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.GetReportScheduleHostIdx(System.String)">
            <summary>
            Searches all of the available hosts for job with matching jobId. Returns hostIdx.
            Mostly used internally so the user of the API does not need to interact with hostIdx
            Throws an expection if the provided jobId could not be retrieved from any host
            </summary>
            <param name="jobId">jobId converted from GUID Defines a unique scheduling job</param>
            <returns>hostIdx the index of the host computer where the schedule resides</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.DeleteSchedulerJob(System.String)">
            <summary>
            Convenience method for deleting jobs by jobId. Throws an exception if the jobId provided is not found on 
            </summary>
            <param name="jobId">jobId converted from GUID Defines a unique scheduling job</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.RecreateReportScheduleInfo(WebReports.Api.Scheduler.ReportScheduleInfo,WebReports.Api.Scheduler.ReportScheduleInfo.RecurrencePatternType,System.String)">
            <summary>
            Function that recreates ReportScheduleInfo with a specific RecurrencePattern. Mimics the way ReportScheduleInfo is "updated" from the UI.
            Called by SetRecurrencePattern Api methods to convert from ReportScheduleInfo*Pattern* to ReportScheduleInfo then to a new ReportScheduleInfo*Pattern*
            </summary>
            <param name="package">ReportScheduleInfo to be recreated</param>
            <param name="targetRecurrencePattern"> The RecurrencePattern that ReportScheduleInfo will be recreated to match</param>
            <param name="exportType">File type of the report to be exported</param>
            <returns>ReportScheduleInfo a modified version of the reportscheduleinfo provided </returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetRecurrencePatternOnce(WebReports.Api.Scheduler.ReportScheduleInfo,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Convenience method that sets the provided ReportScheduleInfo's RecurrencePattern to Once with the provided parameters.
            </summary>
            <param name="scheduleInfo">ReportScheduleInfo to be edited</param>
            <param name="isImmediate">Boolean determining whether or not the report should be executed now or at another date</param>
            <param name="onceDate">Optional parameter. If isImmediate is false, this will be used to determine the date when the report will be executed</param>
            <returns>ReportScheduleInfoOnce Modified ReportScheduleInfo with the Recurrence pattern set to once</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetRecurrencePatternDaily(WebReports.Api.Scheduler.ReportScheduleInfo,System.Boolean,System.Int32)">
            <summary>
            Convenience method that sets the provided ReportScheduleInfo's RecurrencePattern to Daily with provided parameters.
            </summary>
            <param name="scheduleInfo">ReportScheduleInfo to be edited</param>
            <param name="isEveryNDays">Boolean determining the type of Daily Pattern the report will be executed on</param>
            <param name="everyNDays">The number of days inbetween executions of the job</param>
            <returns>ReportScheduleInfoDaily Modified ReportScheduleInfo with the Recurrence pattern set to Daily</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetRecurrencePatternWeekly(WebReports.Api.Scheduler.ReportScheduleInfo,System.Int32,System.Boolean[])">
            <summary>
            Convenience method that sets the provided ReportScheduleInfo's RecurrencePattern to Weekly with provided parameters.
            </summary>
            <param name="scheduleInfo">ReportScheduleInfo to be edited</param>
            <param name="everyNWeeks">The number of weeks inbetween executions of the job</param>
            <param name="dayOfWeek">Boolean Array representing the days of the week that the job will execute on</param>
            <returns>ReportScheduleInfoWeekly Modified ReportScheduleInfo with the Recurrence pattern set to weekly</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetRecurrencePatternMonthly(WebReports.Api.Scheduler.ReportScheduleInfo,System.Boolean,System.Int32,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.Int32)">
            <summary>
            Convenience method that sets the provided ReportScheduleInfo's RecurrencePattern to Monthly with provided parameters.
            </summary>
            <param name="scheduleInfo">ReportScheduleInfo to be edited</param>
            <param name="isSpecificDayofMonth">Boolean representing the type of monthly pattern that the job will be executed on</param>
            <param name="specificDayOfMonth">Number representing the day of the month the job will be executed on</param>
            <param name="specificEveryNMonths">Number of months between executions of the job</param>
            <param name="relativeWeekOfMonth">The week of the N month that the job will be executed on</param>
            <param name="relativeDayOfWeek">The day of M week that the job will be executed on</param>
            <param name="relativeEveryNMonths">The number of weeks between job executions</param>
            <returns>ReportScheduleInfoMonthly Modified ReportScheduleInfo with the Recurrence pattern set to monthly</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetRecurrencePatternYearly(WebReports.Api.Scheduler.ReportScheduleInfo,System.Boolean,System.Int32,System.Int32,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType,WebReports.Api.Scheduler.ReportScheduleInfo.DayOfWeekType,System.Int32)">
            <summary>
            Convenience method that sets the provided ReportScheduleInfo object's recurrence pattern to yearly
            </summary>
            <param name="scheduleInfo">ReportScheduleInfo to be modified</param>
            <param name="isSpecificDayOfYear">Boolean representing the type of yearly pattern that the job will be executed on</param>
            <param name="specificMonthOfYear">Number representing the month of the year the job will be executed on</param>
            <param name="specificDayOfMonth">The Day of the month that the job will be executed on</param>
            <param name="relativeWeekOfMonth">The week of the N month that the job will be executed on</param>
            <param name="relativeDayOfWeek">The day of M week that the job will be executed on</param>
            <param name="relativeMonthOfYear">The month that the job will be executed in</param>
            <returns>ReportScheduleInfoYearly Modified ReportScheduleInfo with the Recurrence pattern set to yearly</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetFilters(System.String)">
            <summary>
            Override report filters with provided filter string.
            </summary>
            <param name="FilterGridInfo"> String representation of all filters</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetExecParameters(WebReports.Api.Common.ParameterCollection)">
            <summary>
            Sets ExecParameters for execution. 
            </summary>
            <param name="parameters">List of parameter to be executed</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.SetScheduleRepeatEvery(WebReports.Api.Scheduler.ReportScheduleInfo,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Update the provided scheduleInfo with the provided values. If there are no value supplied for a given RepeatEvery_____ load scheduleInfo's value
            </summary>
            <param name="scheduleInfo">ScheduleInfo to be modified</param>
            <param name="RepeatEveryHours">Number representing the hour at which the schedule will repeat</param>
            <param name="RepeatEveryMinutes">Number representing the minutes at which the schedule will repeat</param>
            <param name="RepeatEveryEndTime">Number representing the time at which the schedule will stop repeating</param>
            <returns>ReportScheduleInfo Modified ReportScheduleInfo with the updated repeat values</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportScheduler.UpdateExistingSchedule(WebReports.Api.Scheduler.ReportScheduleInfo,System.String)">
            <summary>
            Sends the schedule to be updated. 
            </summary>
            <param name="package">presumably modified ReportScheduleInfo that is going to be udpated</param>
            <param name="jobId">jobId converted from GUID Defines a unique scheduling job</param>
        </member>
        <member name="T:WebReports.Api.Scheduler.SchedulerJobCache">
            <summary>
            This class is used to save information about the cache jobs.
            In order to reduce the number of calls to the scheduler while
            not restructuring the code too much we will save the data we 
            get for a period of time. [EX-10007]
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.ClearJob(System.String)">
            <summary>
            Clear any existing cache for the indicate job
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.ClearReport(System.String)">
            <summary>
            Clear any existing cache for the indicate report
            </summary>
            <param name="reportId"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.GetJob(System.String)">
            <summary>
            Return job information.
            Note that the JobInfo will be null if we did not have
            job information. This is how we remember that we
            did not find the job before rather than just did not look
            </summary>
            <param name="jobKey"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.HasValidData(System.String)">
            <summary>
            Return true if we have a valid data block
            </summary>
            <param name="jobKey"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.NoJobFound(System.String)">
            <summary>
            Return true if we recently searched and found no job for the key
            No Job is recorded as HostIdx = -1
            </summary>
            <param name="jobKey"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.Add(WebReports.Api.Scheduler.SchedulerJob,System.String)">
            <summary>
            Add job info. Update existing or add new
            If we are passed NULL then no job was found so we record this
            </summary>
            <param name="job"></param>
            <param name="jobKey"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJobCache.JobKey(System.String,System.String,System.String)">
            <summary>
            Return a string to be used as a key for accessing the cache
            </summary>
            <param name="reportId"></param>
            <param name="companyId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.AddReport(System.Version,System.Guid,System.String)">
            <summary>
            Add a new WebReportJob using the supplied information (should not called if client is managing own queue)
            </summary>
            <param name="version">Version of caller</param>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetJobStatusList(System.Version,WebReports.Api.wrScheduleManagerViewLevel,System.String,System.String,System.Boolean)">
            <summary>
            Return to the client an Array of JobInfo objects from all the defined jobs.
            We also populate the JobDetails block from the job itself.
            </summary>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetJobCacheList(System.Version,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Get a list of the cache jobs for the indicated reportid.
            Optionsally filter by companyid/userid
            [EX-10007]
            </summary>
            <returns>List of XML strings containing job information</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.Flush(System.Version,WebReports.Api.wrScheduleManagerViewLevel,System.String,System.String)">
            <summary>
            Remove all jobs from the queue which are marked for delete or which abended
            </summary>
            <param name="version">Version of caller</param>
            <returns>the number of jobs from the queue</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetJobDetails(System.Version,System.Guid)">
            <summary>
            Return the details for a specific job.
            </summary>
            <param name="JobId">Guid which identifies an existing job</param>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetJobExportPackageXml(System.Version,System.Guid)">
            <summary>
            Return the Report for a specific job; used for synchronous WebReport jobs only
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId">Guid which identifies an existing job</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetSystemResourceValue(System.Version)">
            <summary>
            This function returns two values.  The first being an available resource value, and the second the percent of available job slots 1 / (active jobs vs max jobs)
            The resource value is a number between 0-1 representing resource availability.
            A resource value of 0 indicates no resources are available, and a value of 1 indicates most or all resources are available
            </summary>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetDetailedSystemResources(System.Version)">
            <summary>
            Get numbers indicating cpu% available ([0]) and memory available ([1])
            </summary>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetSystemAudit(System.Version,System.Boolean)">
            <summary>
            Get host audit data, including cpu% available, memory available, report exeution start, and report execution end
            </summary>
            <param name="version">Version of caller</param>
            <param name="statsOnly">Dictates whether the intention is to collect statistics only or both 
            statistics and report execution details.</param>
            <returns>Dictionary&lt;string, DataSet&gt; object typically containing three dictionary keys: SystemStatistics,
            ExecutionDetails, and ReportAudit.  SystemStatistics are created here, manually.  ExecutionDetails and ReportAudit
            comprise data extracted from the scheduler's monitoring database, consisting of report executions details.</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetSyncronousJobPercent(System.Version)">
            <summary>
            Return to the total running percent of syncronous jobs
            </summary>
            <param name="version">Version of caller</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetJobStatus(System.Version,System.Guid)">
            <summary>
            Return the Status for a specific job.
            [EX-9209] We now return information even when the job
            is not executing. In all cases we send back info about
            the state of the job case and last execution time
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId">string which identifies an existing job</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.KillJob(System.Version,System.Guid)">
            <summary>
            Remove the specified job from the queue. Note that this will only work if the job is currently not executing
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.UpdateSchedule(System.Version,System.Guid,System.String)">
            <summary>
            Update the report specification for an existing web report
            </summary>
            <param name="version">Version of caller</param>
            <param name="JobId">Guid which identifies an existing job</param>
            <param name="xmlData">XML data providing WebReport specification</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.UpdateReport(System.Version,System.String,System.String)">
            <summary>
            Update all scheduled reports based on the report ID
            </summary>
            <param name="version">Version of caller</param>
            <param name="reportId">Guid which identifies an existing report</param>
            <param name="xmlData">XML data providing WebReport specification</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.ExecuteScheduledJobImmediate(System.Version,System.Guid)">
            <summary>
            [EX-9209] Cause the job to be executed immediately. 
            We do this by setting the next execute time to now
            </summary>
            <param name="version"></param>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.DeleteReport(System.Version,System.String)">
            <summary>
            Delete all scheduled reports based on the report ID
            </summary>
            <param name="version">Version of caller</param>
            <param name="reportId">Guid which identifies an existing report</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.RenameReport(System.Version,System.String,System.String)">
            <summary>
            Rename all scheduled reports based on the report ID
            </summary>
            <param name="version">Version of caller</param>
            <param name="reportId">Guid which identifies an existing report</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetFilterDropdownData(System.Version,System.String,System.String,System.String,System.String,System.Int32,System.String,WebReports.Api.Scheduler.ParameterDropdownContent)">
            <summary>
            Get dropdown filter values
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">xml for current user configuration</param>
            <param name="reportXml">Xml for current report</param>
            <param name="dropdownFilterColumnName">Name of filter column name</param>
            <param name="editValue">Starting value typed in edit box</param>
            <param name="dropdownFilterDataType">Data type of filter column name</param>
            <param name="filterDelimitedString">Delimited Filter string required for current user session</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetCanReportEntitiesRangeSelect(System.Version,System.String,System.String)">
            <summary>
            Get boolean indicating whether or not all entities in the report support range selection
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="reportXml">Xml for current report</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetEntityColumns(System.Version,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get columns for a specific entity (schema)
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="entityName">Name of entity</param>
            <param name="includeEntityName">Whether to include entity name in each column name</param>
            <param name="isDbName">Whether incoming entityName is alias or db name</param>
            <param name="getActualNames">Whether to sort by db or alias name</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.GetDataSourceObjectNames(System.Version,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get object names for a specific entity
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="objectType">data source object type (tables, views, etc.)</param>
            <param name="dbType">data source type (SQL Server, Oracle, etc.)</param>
            <param name="dataConnStr">data source connection string</param>
            <param name="checkReturnType">Whether to validate return type for custom data sources</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ReportSchedulerObject.TestDataSourceConnection(System.Version,System.String,System.String,System.String,System.String)">
            <summary>
            Test data source connection
            </summary>
            <param name="version">Version of caller</param>
            <param name="configXml">Xml for current user configuration</param>
            <param name="dbType">data source type (SQL Server, Oracle, etc.)</param>
            <param name="dataConnStr">data source connection string</param>
            <param name="sqlStmt">if not null, validates sql statement</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ScheduleCalculator.#ctor(WebReports.Api.Scheduler.ReportScheduleInfo,WebReports.Api.Common.PageInfo,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:WebReports.Api.Scheduler.ScheduleCalculator"/> class.
            </summary>
            <param name="argScheduleInfo">The schedule info</param>
            <param name="pageInfo">The PageInfo object</param>
            <param name="now">The value to use for "now" (typically should be DateTime.Now, can be changed for testing)</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.ScheduleCalculator.IsBlockCurrent(System.DateTime)">
            <summary>
            Determine if the current block is on a valid day
            </summary>
            <param name="blockStart"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ScheduleCalculator.WeekDayOfMonth(System.Int32,System.Int32,System.DayOfWeek,WebReports.Api.Scheduler.ReportScheduleInfo.WeekOfMonthType)">
            <summary>
            Return the specified day of the week
            </summary>
            <param name="year">Year</param>
            <param name="month">Month</param>
            <param name="dayOfWeek">Day of the week</param>
            <param name="weekOfMonthType">Which week (first,second,etc)</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ScheduleCalculator.NextWeekday(System.DateTime)">
            <summary>
            If the specified date is not a weekday then advance it to one
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.ScheduleCalculator.NextWeeklyDate(System.DateTime,System.DateTime,System.Int32,System.Boolean[])">
            <summary>
            Returns the next date starting from (and including) searchDate that matches the weekly pattern provided.
            </summary>
            <param name="searchDate">The reference date from which to search</param>
            <param name="startDate">The date on which the schedule was originally started</param>
            <param name="weeklyInterval">How many weeks between runs (every one week, two weeks, etc.)</param>
            <param name="dayToRun">Boolean array matching the date of the week we are allowed to run</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerHost.GetHostAudit(System.Boolean)">
            <summary>
            Retrieve audit information from Scheduler.
            </summary>
            <param name="statsOnly">Dictates whether statistics are collected or both statistics and execution details</param>
            <returns>Dictionary&lt;string, DataSet&gt; object containing execution details and/or server statistics information.</returns>
        </member>
        <member name="T:WebReports.Api.Scheduler.SchedulerJob">
            <summary>
            Provide an interface to manipulate the schedule associated with a job in the scheduler.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.GetReportEntities(System.Boolean)">
            <summary>
            Returns a list of entities directly tied to the report, or a list of entities belonging to all of the reports in the case of chained reports
            </summary>
            <param name="onlyCommonEntities">Whether or not to return all unique entities, or only entities common to all reports in a chained report</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.UpdateExecParameterValues">
            <summary>
            Updates parameter values in SchedulerJob.Report.ExecParameters with the values stored in the schedule file in case a value
            is stored with the schedule and not with the parameter definition.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.AddUpdateParameter(System.String,System.String)">
            <summary>
            Adds/Updates a parameter in the active config as well as updates the corresponding XML document
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.LoadXml(System.String,System.String,System.String,System.String,WebReports.Api.Scheduler.Job)">
            <summary>
            Create xmlDoc from jobFn, then load pageInfo and Report objects
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.GetJobExportDataListXml">
            <summary>
            Get the export specifications in XML
            (you know this should be a class)
            </summary>
            <returns>XML encoded export rules</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.AddJobExportData(System.String)">
            <summary>
            Adds various bits of metadata about the job to the xmldoc. Actual output data is retrieved in GetJobExportBinaryData; executed from scheduler service
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.GetJobExportBinaryData(System.String,System.String)">
            <summary>
            Gets the execution output; executed from scheduler service
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.WriteJobExportData(WebReports.Api.Execute.ActiveRemoteExecution,System.Byte[])">
            <summary>
            Takes execution data returned from the scheduler and writes to the local drive and cloud storage
            </summary>
            <param name="execution">The execution</param>
            <param name="exportData">The binary output data from the executed report (PDF/xls/HTML/etc. file)</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.GetXml(WebReports.Api.Scheduler.ReportScheduleInfo)">
            <summary>
            Update the XML image with the ReportScheduleInfo provided and return the complete XML
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SchedulerJob.CanUserEditCacheSchedule(WebReports.Api.wrCacheVisibility)">
            <summary>
            If this is a cache job does the user have update permissions.
            The user cannot update the job if its scheduled with a higher scope
            that the user is allowed to allocate
            </summary>
        </member>
        <member name="T:WebReports.Api.Scheduler.MainThread.ActiveJobCollection">
            <summary>
            A thread safe collection of active jobs.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.Add(WebReports.Api.Scheduler.Job)">
            <summary>
            Adds a job to the active job collection.
            </summary>
            <param name="job">The job to add</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.Remove(WebReports.Api.Scheduler.Job)">
            <summary>
            Removes a new job from the active job collection.
            </summary>
            <param name="job">The job to remove</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.Iterate(System.Action{WebReports.Api.Scheduler.Job})">
            <summary>
            Iterates through the active job collection, calling callback with each job in the collection. Note you cannot
            alter the active job collection from within the callback.
            </summary>
            <param name="callback">The delegate method to call for each job within the collection</param>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.Count">
            <summary>
            Retrieve the current number of active jobs in the collection.
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.SynchronousJobCount">
            <summary>
            Retrieve the current number of synchronous active jobs in the collection.
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.NonSuspendableJobCount">
            <summary>
            Retrieve the current number of non-suspendable active jobs in the collection.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.Suspend">
            <summary>
            Suspend all suspendable active jobs in the collection.
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.ActiveJobCollection.Unsuspend">
            <summary>
            Unsuspend any previously suspended active jobs in the collection.
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.Sleeping">
            <summary>
            Indicates if we are in a sleeping state
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.AbortRequest">
            <summary>
            Set to request that the thread do an orderly shutdown. 
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.Running">
            <summary>
            Currently Not Used
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.ConsoleInd">
            <summary>
            See if we have a Console or are a service
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.RunJobThread(System.Object)">
            <summary>
            This is the process that will be run as a thread to execute a job
            </summary>
            <param name="jobObject"></param>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.IdleCpu">
            <summary>
            Amount of idle cpu time as calculated during the last polling interval
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.MainThread.FreeMemory">
            <summary>
            Amount of free memory on the system as calculated during the last polling interval
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.RunService">
            <summary>
            Main Service Start Here
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.GetActiveCacheJobs">
            <summary>
            Return a list of GUID associated with active cache jobs
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.MainThread.CleanupFolder(System.String,System.Boolean)">
            <summary>
            Clean up all the files in the indicated directory if they
            are older than the value specified in Config.MaxTempFileAge minutes.
            If checkForCacheJobs is active we will not delete files which are associated
            with an active cache job
            </summary>
            <param name="path"></param>
            <param name="checkForCacheJobs"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.SendEmailJob.SetXML(System.String,System.Boolean)">
            <summary>
            Loads the XML for the email job
            </summary>
            <param name="value">The XML of the email job</param>
            <param name="createNewJobId">Whether a new job Id should be created, which depends on whether we are creating a new one (True), or loading an existing job (False)</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.SendEmailJob.Execute">
            <summary>
            Executes job; in this case sends email of completed report job
            </summary>
            <returns>A boolean that indicates whether the job has been completed</returns>
        </member>
        <member name="M:WebReports.Api.Scheduler.SendEmailJob.Reschedule">
            <summary>
            Reschedules job in case in which email was not sent on previous execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.SendEmailJob.IsScheduleable">
            <summary>
            Returns a boolean indicating if job can be scheduled
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.SendEmailJob.IsSuspendable">
            <summary>
            Returns a boolean indicating if job can be suspended
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.SendEmailJob.IsTopPriority">
            <summary>
            Returns a boolean indicating if job is maximum priority
            </summary>
        </member>
        <member name="P:WebReports.Api.Scheduler.SendEmailJob.IsSynchronous">
            <summary>
            Returns a boolean indicating if job is synchronous
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.SendEmailJob.LoadJobInfo(System.Boolean)">
            <summary>
            Load the Schedule Info from the report parameters XML file
            </summary>
        </member>
        <member name="T:WebReports.Api.Scheduler.WebReportJob">
            <summary>
            This is the primary web report job manager class. It is constructed to manage a specific web report which is described by the XML data
            provided by the XMLData property. Note that the backing xml store will be written to when the XMLData property is written. We will also
            examine the schedule information obtained from this data and reestablish the mob parameters
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.WebReportJob.SetXML(System.String,System.Boolean)">
            <summary>
            Sets the internal XML content.  If it was previously null, then we also reload the JobInfo object
            and recalculate the next run date
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebReports.Api.Scheduler.WebReportJob.AddOutputJob(WebReports.Api.Scheduler.SchedulerJob)">
            <summary>
            Adds either a SendEmailJob or DiskJob to send or store the report output
            </summary>
            <param name="schedulerJob">The schedule job of the executed report we want to send</param>
        </member>
        <member name="M:WebReports.Api.Scheduler.WebReportJob.LoadJobInfo(System.Boolean)">
            <summary>
            Load the Schedule Info from the report parameters XML file
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.WebReportJob.ResetFromXML(System.Boolean)">
            <summary>
            Reset all information from the XML backing store
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.WebReportJob.GetJobExportPackage">
            <summary>
            Returns the "export package" as an XML string.  The export package contains information about the
            job, but does not contain the binary output data (PDF/xls/HTML/etc. file).
            </summary>
        </member>
        <member name="M:WebReports.Api.Scheduler.WebReportJob.GetJobExportData">
            <summary>
            Returns the binary output of the executed report (PDF/xls/HTML/etc. file)
            </summary>
        </member>
        <member name="T:WebReports.Api.SqlUtils.DbObjectFactory">
            <summary>
            Generic means of creating database objects for use with the associated DBSqlHandler
            </summary>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbObjectFactory.GetConnection(WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType)">
            <summary>
            Given the type of database, this will create and return an associated database Connection object.  If
            an unhandled DataSourceType is provided, a SQLite database Connection object will be returned.
            </summary>
            <param name="db">The DataSourceType object denoting the type of database for which to create a Connection.</param>
            <returns>A database Connection object corresponding to the aforementioned DataSourceType object.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.SqlUtils.DbObjectFactory.GetDataAdapter(WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType)" -->
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.SqlUtils.DbObjectFactory.GetCommand(WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType)" -->
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.SqlUtils.DbObjectFactory.GetParameter(WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType)" -->
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.SqlUtils.DbObjectFactory.GetParameter(WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType,System.String,System.Object)" -->
        <member name="T:WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType">
            <summary>
            As enumeration of the currently handled DataSource types.
            </summary>
        </member>
        <member name="T:WebReports.Api.SqlUtils.DbSqlHandler">
            <summary>
            Manage and handle SQL interaction with the given DataSourceType.
            </summary>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.#ctor(WebReports.Api.SqlUtils.DbObjectFactory.DataSourceType,System.String)">
            <summary>
            When a new SQLHandler is instantiated, initialize and open the connection.
            </summary>
            <param name="dataSourceType">The DataSourceType object denoting the type of database for which to create a Connection.</param>
            <param name="connStr">Database connection string necessary to interact with the database.</param>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.Clear">
            <summary>
            In an effort to reuse a SQLHandler object, this method allows for clearning out a previous SQL
            statement so that it can be used again.
            </summary>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.InitConnection">
            <summary>
            Initialize the connection to the database.  Connection string lives in the main project's 
            web.config via standard configuration.If SqlConnection is created successfully or pre-exists, 
            open the connection.If failure of any sort, clean up the SqlConnection and
            re-throw the error to be managed at a higher level.
            </summary>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.ExecuteNQCmd">
            <summary>
            Executes a non-query SQL statement (meant for use with INSERT or UPDATE statements).  There
            is an assumption that a Stmt and, possibly, this.SqlParams are set prior to calling this method.  
            If not, an exception will be thrown.
            </summary>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.ExecuteScalarCmd">
            <summary>
            Executes a SQL query (meant for use with SELECT statements returning a single value).  There
            is an assumption that a Stmt and, possibly, this.SqlParams are set prior to calling this method.  
            If not, an exception will be thrown.
            </summary>
            <returns>The queried Object</returns>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.ExecuteReadCmd">
            <summary>
            Executes a SQL query (meant for use with SELECT statements returning a full DataSet object).  There
            is an assumption that a Stmt and, possibly, this.SqlParams are set prior to calling this method.  If not,
            an exception will be thrown.
            </summary>
            <returns>The resulting query's DataSet object</returns>
        </member>
        <member name="M:WebReports.Api.SqlUtils.DbSqlHandler.ExecTransaction">
            <summary>
            Executes a series of SQL commands, which may be a mixture of INSERT, UPDATE, SELECT, or DELETE.  In standard
            Transaction fashion, all changes will be committed or, if error, none will be.  There is 
            an assumption that SqlTxnCmds and, possibly, this.SqlParams objects are set prior to calling this method.  If not,
            an exception will be thrown.  Results of SQL commands will be saved back to SqlTxnCmds object for 
            subsequent reference.
            </summary>
            <returns>List of SqlTxnObjects containing the results of each SQL statement in the transaction.</returns>
        </member>
        <member name="T:WebReports.Api.SqlUtils.SqlTxnObject">
            <summary>
            Object used for processing multiple SQL statements in a transaction (which requires a specific order).
            </summary>
        </member>
        <member name="M:WebReports.Api.SqlUtils.SqlTxnObject.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="s">A SQL statement.</param>
            <param name="i">Index for identification and ordering purposes.</param>
        </member>
        <member name="M:WebReports.Api.Visualization.VisualizationReport.ContainsWidgetTypes">
            <summary>
            Returns an array of Type objects describing which widget types the visualization contains ie. [Chart, Map, Gauge, ...]
            </summary>
        </member>
        <member name="M:WebReports.Api.Visualization.VisualizationReport.Serialize">
            <summary>
            Serializes current DashboardReport object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.ClearData">
            <summary>
            Resets the map state so it can receive fresh data.  This is used when a map appears in a group in a report; the data must be cleared after every iteration so it doesn't accumulate.
            </summary>
        </member>
        <member name="P:WebReports.Api.Maps.GoogleMap.Name">
            <summary>
            The string sent to the client so the client knows what type of widget this is
            </summary>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.AddData(System.Int32,System.String,System.String)">
            <summary>
            Used to add data to the map instance during report execution.
            </summary>
            <param name="dataCellIndex">The Widget.DataCellIds index of the corresponding report cell</param>
            <param name="value">The value to add</param>
            <param name="linkedValue">The link data associated with this point</param>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GetParameters(WebReports.Api.Reports.ReportParameterCollection)">
            <summary>
            Gets parameters used in this widget so the report object can be aware of them.  This makes sure
            the parameters will show up in the parameters dialog if prompting, etc.
            </summary>
            <param name="parameters">The collection to be augmented with this widget's parameters.</param>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.AddDataValue(System.String,System.Int32)">
            <summary>
            Adds a data value to the map, then adds the data point when all values for the current row have been added
            </summary>
            <param name="value">The data value</param>
            <param name="position">The index of the data value</param>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.AddLocationData(System.String,System.Int32)">
            <summary>
            Adds a location component to the map, then adds the total location (eg. Walla Walla, Washington) when all tiers are filled
            </summary>
            <param name="location">The location component eg. "Washington" or "Walla Walla"</param>
            <param name="position">The tier that the location component represents</param>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.AddPiecewiseColorValue(System.String,System.Int32)">
            <summary>
            Adds a piecewise color value to the map, then adds the data point when all values for the current row have been added
            </summary>
            <param name="value">The data value</param>
            <param name="position">The index of the data value</param>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GetWidgetDataParcel(System.Boolean,WebReports.Api.Reports.Report,System.Boolean)">
            <summary>
            Returns a JSON string that should be passed to the FusionChartWidget object on the client for Javascript rendering
            </summary>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.SetConditionalDropPinColors(WebReports.Api.Maps.GoogleMapDataObject[],System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}}})">
            <summary>
            Calculates the aggregate values for the drop pins and evaluates the conditional formats against the 
            location data and the aggregate data. Assigns the conditional format color, if there is a match
            </summary>
            <param name="objs"></param>
            <param name="valueDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.CalculateAggregates(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}}})">
            <summary>
            Calculates the aggregates of the values for all the data points
            </summary>
            <param name="valueDictionary">A dictionary that contains all the locations as keys, and a list of the individual data
            points for each location as the values</param>
            <returns>A dictionary that contains all the locations as keys, and a list of all aggregate calculations for each location as the values</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GetConditionalPointColor(System.Collections.Generic.List{System.String},System.String[],System.Collections.Generic.List{System.Object})">
            <summary>
            Creates the parameters we need to calculate the conditional format formulas, and 
            evaluates the conditional formula for the given data point
            </summary>
            <param name="locationData">The parts of the address</param>
            <param name="metricLabel">The label for the metric we are using in our evaluation</param>
            <param name="value">The aggregate value of the drop pin's data, with the given metric label</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.BuildLocationName(System.Collections.Generic.List{System.String})">
            <summary>
            Takes in a list of strings and concatenates them into a single string that we will geocode
            </summary>
            <param name="locationData">location segments (city name, state name, country name, etc)</param>
            <returns>A single string, the location name</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GetImage(WebReports.Api.Reports.Cell,System.Boolean,System.Double)">
            <summary>
            Renders a static image representation of the Map
            </summary>
            <param name="reportCell">The report cell that we are rendering to (or null if we just want a preview)</param>
            <returns>The image content as a Base64-encoded string</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.CheckSubmitData">
            <summary>
            Submit the data into our list of points once all the relevant data has been set
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebReports.Api.Maps.GoogleMap.GeocodeData(WebReports.Api.Common.PageInfo,WebReports.Api.Maps.GoogleMapDataObject[],System.Collections.Generic.List{System.String}@,System.Boolean)" -->
        <member name="M:WebReports.Api.Maps.GoogleMap.GetPolygons(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Searches for and returns the polygons we need from the SQLite polygon database
            </summary>
            <param name="PolygonNames">List of unique identifier names of the polygons we want</param>
            <returns>A list containing all polygon names, and a list containing all polygon objects</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GoogleGeocodeRequest(WebReports.Api.Common.PageInfo,System.String,System.String)">
            <summary>
            Sends a single geocode request to Google, returns the status of the request and the geocode result
            </summary>
            <param name="searchString">The location name to search</param>
            <param name="GoogleMapKey">The API key from the Admin Console</param>
            <returns>Class that contains the Geocode request's search status and the result of the request</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GoogleGeocodeRequestAsyncCallback(WebReports.Api.Common.PageInfo,WebReports.Api.Maps.GoogleMapLocationData,System.String,System.Collections.Concurrent.ConcurrentBag{WebReports.Api.Maps.GoogleMap.GoogleGeocodeReturn}@)">
            <summary>
            
            </summary>
            <param name="locationToSearch"></param>
            <param name="GoogleMapKey"></param>
            <param name="geocodeResults"></param>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.SetUpSQLiteLocationDatabase(System.String)">
            <summary>
            Tries to connect to the Map location cache on the server. If it can't find the file, it creates a new one
            </summary>
            <param name="MapCachePath">File location string</param>
            <returns>The connection string that is used in later code to query and update the database</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.GetFullParsedGoogleGeocodeResult(WebReports.Api.Common.PageInfo,WebReports.Api.Maps.GoogleMap.GoogleGeocodeReturn,System.String,System.Boolean,System.Boolean)">
            <summary>
            Takes in a result from a Google geocode request. Will make a second request if needed, to update region names to be 
            in a consistent language (english)
            </summary>
            <param name="geodoceReturn">Result to be parsed</param>
            <param name="locationsAreStreetAddresses">If true, we will need to make a second "generic" geocode request</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.ParseGoogleGeocodeReturn(WebReports.Api.Common.PageInfo,System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Takes the return value from a Google Geocode request and parses it into the data strings that we are interested in
            </summary>
            <param name="result">The raw geocode request return value</param>
            <param name="GoogleMapKey">The Google Map API Key from the Admin Console</param>
            <param name="keepTrying">True if we are performing a static execution (we only see each data point once), false otherwise (if the search fails, we will try it again later)</param>
            <returns>An object that contains a string value for each region type</returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.BuildPlaceHolderString(System.Collections.Generic.List{System.String},System.Data.SQLite.SQLiteCommand@)">
            <summary>
            Builds the parameterized string that we will use to query the SQLite database. 
            Also adds the parameter values to the SQLite command object
            </summary>
            <param name="searchStrings">List of strings to be parameterized</param>
            <param name="cmd">SQLite command object that we need to add the variable parameters to</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Maps.GoogleMap.BuildBatchInsertString(System.Collections.Generic.List{System.String},System.Collections.Generic.List{WebReports.Api.Maps.ParsedGeocodeValues},System.Data.SQLite.SQLiteCommand@)">
            <summary>
            Builds the specail SQLite statement for batch insertion into the cache
            </summary>
            <param name="dataPointNames">List of names of the locations to be inserted</param>
            <param name="dataPointDetails">List of geocoded info to be inserted</param>
            <returns>string to be used as part of SQLite command to batch insert newly geocoded data</returns>
        </member>
        <member name="M:WebReports.Api.Maps.Map.ClearData">
            <summary>
            Resets the map state so it can receive fresh data.  This is used when a map appears in a group in a report; the data must be cleared after every iteration so it doesn't accumulate.
            </summary>
        </member>
        <member name="P:WebReports.Api.Maps.Map.Name">
            <summary>
            The string sent to the client so the client knows what type of widget this is
            </summary>
        </member>
        <member name="M:WebReports.Api.Maps.Map.AddData(System.Int32,System.String,System.String)">
            <summary>
            Used to add data to the map instance during report execution.
            </summary>
            <param name="dataCellIndex">The Widget.DataCellIds index of the corresponding report cell</param>
            <param name="value">The value to add</param>
            <param name="linkedValue">The link data associated with this point</param>
        </member>
        <member name="M:WebReports.Api.Maps.Map.GetParameters(WebReports.Api.Reports.ReportParameterCollection)">
            <summary>
            Gets parameters used in this widget so the report object can be aware of them.  This makes sure
            the parameters will show up in the parameters dialog if prompting, etc.
            </summary>
            <param name="parameters">The collection to be augmented with this widget's parameters.</param>
        </member>
        <member name="M:WebReports.Api.Maps.Map.AddLocationData(System.String,System.Int32)">
            <summary>
            Adds a location component to the map, then adds the total location (eg. Walla Walla, Washington) when all tiers are filled
            </summary>
            <param name="location">The location component eg. "Washington" or "Walla Walla"</param>
            <param name="position">The tier that the location component represents</param>
        </member>
        <member name="M:WebReports.Api.Maps.Map.AddDataValue(System.String,System.Int32)">
            <summary>
            Adds a data value to the map, then adds the data point when all values for the current row have been added
            </summary>
            <param name="value">The data value</param>
            <param name="position">The index of the data value</param>
        </member>
        <member name="M:WebReports.Api.Maps.Map.GetWidgetDataParcel(System.Boolean,WebReports.Api.Reports.Report,System.Boolean)">
            <summary>
            Returns a JSON string that should be passed to the FusionChartWidget object on the client for Javascript rendering
            </summary>
        </member>
        <member name="M:WebReports.Api.Maps.Map.GetImage(WebReports.Api.Reports.Cell,System.Boolean,System.Double)">
            <summary>
            Renders a static image representation of the Map
            </summary>
            <param name="reportCell">The report cell that we are rendering to (or null if we just want a preview)</param>
            <returns>The image content as a Base64-encoded string</returns>
        </member>
        <member name="M:WebReports.Api.Maps.Map.CheckSubmitData">
            <summary>
            Submit the data into our list of points once all the relevant data has been set
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.GoogleMapWidgetFactory.AfterWidgetPropertiesLoad(WebReports.Api.Widgets.Widget)">
            <summary>
            Called after the WidgetFactory loads widget-common properties from the report file, like DataCellIds, allowing the factory
            implementation to perform version upgrades, etc.
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.TabularReportWidgetFactory.AfterWidgetPropertiesLoad(WebReports.Api.Widgets.Widget)">
            <summary>
            Called after the WidgetFactory loads widget-common properties from the report file, like DataCellIds, allowing the factory
            implementation to perform version upgrades, etc.
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.FusionChartWidgetFactory.AfterWidgetPropertiesLoad(WebReports.Api.Widgets.Widget)">
            <summary>
            Called after the WidgetFactory loads widget-common properties from the report file, like DataCellIds, allowing the factory
            implementation to perform version upgrades, etc.
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.GaugeWidgetFactory.AfterWidgetPropertiesLoad(WebReports.Api.Widgets.Widget)">
            <summary>
            Called after the WidgetFactory loads widget-common properties from the report file, like DataCellIds, allowing the factory
            implementation to perform version upgrades, etc.
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.GeoChartWidgetFactory.AfterWidgetPropertiesLoad(WebReports.Api.Widgets.Widget)">
            <summary>
            Called after the WidgetFactory loads widget-common properties from the report file, like DataCellIds, allowing the factory
            implementation to perform version upgrades, etc.
            </summary>
        </member>
        <member name="F:WebReports.Api.Widgets.Widget.MinAutoHeight">
            <summary>
            The minimum height in pixels for a fit-to-cell widget in an auto-height cell
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.Widget.Name">
            <summary>
            The string sent to the client so the client knows what type of widget this is
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.Widget.IsInReportCell">
            <summary>
            Determines whether this widget is in a cell in the active report (if such a report exists)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Widgets.Widget.ValidateCellIds(System.Boolean)">
            <summary>
            Checks to make sure all cells referenced within the widget still exist on the report
            </summary>
            <returns>True if all the cell IDs validate</returns>
        </member>
        <member name="M:WebReports.Api.Widgets.Widget.LoadWidgetParcelFromJson(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Creates a WidgetParcel object from its client-side JSON representation.
            </summary>
            <param name="json">The JSON string sent from the client.  All complex types (eg. (.*)WidgetDataParcel" types used in WidgetParcel.data) within must also be serialized to JSON (JSON embedded in JSON) to avoid complicated deserialization in the AJAX layer.</param>
            <returns>The server-side representation of the WidgetParcel</returns>
        </member>
        <member name="T:WebReports.Api.Widgets.WidgetParcel">
            <summary>
            The "Widget Parcel" specification.  This is a package sent between server and client to represent widget state.
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetParcel.Clone">
            <summary>
            Creates a deep copy of the WidgetParcel
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetParcel.UpdateParameter(WebReports.Api.Common.PageInfo,WebReports.Api.Common.Parameter)">
            <summary>
            Helper function that will check for a parameter's existence. If it does exist, update the value, otherwise add it
            </summary>
            <param name="param">parameter to be updated</param>
        </member>
        <member name="T:WebReports.Api.Widgets.ConditionalFormatItem">
            <summary>
            Used in conditional chart formatting,
            represents all formats that might be applied to a given chart
            </summary>
        </member>
        <member name="F:WebReports.Api.Widgets.WidgetFactory.WidgetTypes">
            <summary>
            Widget names and associated types
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.WidgetDataParcelType">
            <summary>
            Gets the type of the widget client parcel used to send widget implementation-specific info to and from the client
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.WidgetType">
            <summary>
            Gets the type of the widget class produced by the factory implementation ie Chart, Map, Gauge
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.RemoteJavascriptUrls">
            <summary>
            Gets a list of the remote Javascript resource the widget requires (eg. new string[] { "https://www.google.com/jsapi" })
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.JavascriptSrc">
            <summary>
            Gets all the Javascript source that the widget requires.  Use this getter to include script for a widget
            if the script doesn't exist internally in the Resources dll.
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.InternalJavascriptFiles">
            <summary>
            A list of the Javascript resources that a widget needs eg. { "TabularReportWidget", "SimpleLayoutAdvancedPreviewCtrl", "GridCtrl" }
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.ToolbarIconUrl">
            <summary>
            Gets a URL to a 16px by 16px png image to use for the Design screen toolbar as a button to access the widget wizard
            </summary>
        </member>
        <member name="P:WebReports.Api.Widgets.WidgetFactory.WizardControlType">
            <summary>
            Peter: WRITE ME!
            </summary>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetFactory.LoadFromWidgetParcel(WebReports.Api.Common.SessionInfo,System.String,WebReports.Api.Widgets.WidgetParcel)">
            <summary>
            Loads a widget instance from a WidgetParcel
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="widgetName">Name of the widget</param>
            <param name="widgetParcel">The WidgetParcel object</param>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetFactory.LoadFromDataRow(System.Data.DataRow,WebReports.Api.Common.SessionInfo,System.String)">
            <summary>
            Loads a widget instance from a data row (used when loading from report XML)
            </summary>
            <param name="dr">The DataRow</param>
            <param name="pageInfo">The PageInfo object</param>
            <param name="widgetName">The widget name</param>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetFactory.SaveToDataRow(WebReports.Api.Common.PageInfo,WebReports.Api.Widgets.Widget,System.Data.DataSet,System.String)">
            <summary>
            Saves the widget to a DataSet (used when saving to report XML)
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="widget">The widget to save</param>
            <param name="ds">The DataSet to save to</param>
            <param name="widgetName">The widget name</param>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetFactory.GetInstance(System.String)">
            <summary>
            Gets a widget factory instance given the widget name
            </summary>
            <param name="widgetName">The widget name</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Widgets.WidgetFactory.GetJavascriptSrcFromResources(System.String[])">
            <summary>
            Gets the javascript source from embedded scripts in the Resources project.  Used for internally-stored widgets.
            </summary>
            <param name="scripts">The scripts names (eg. new string[] { "GeoChart", "GeoChartKeys" })</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.TabularReports.TabularReport.GetParameters(WebReports.Api.Reports.ReportParameterCollection)">
            <summary>
            Gets parameters used in this widget so the report object can be aware of them.  This makes sure
            the parameters will show up in the parameters dialog if prompting, etc.
            </summary>
            <param name="parameters">The collection to be augmented with this widget's parameters.</param>
        </member>
        <member name="P:WebReports.Api.TabularReports.TabularReport.Name">
            <summary>
            The string sent to the client so the client knows what type of widget this is
            </summary>
        </member>
        <member name="M:WebReports.Api.TabularReports.TabularReport.GetWidgetDataParcel(System.Boolean,WebReports.Api.Reports.Report,System.Boolean)">
            <summary>
            Returns a JSON string that should be passed to the widget object on the client for Javascript rendering
            </summary>
        </member>
        <member name="F:WebReports.Api.TabularReports.TabularReportWidgetDataParcel.ReportData">
            <summary>
            The serialized client report data to use during execution
            </summary>
        </member>
        <member name="F:WebReports.Api.TabularReports.TabularReportWidgetDataParcel.ExecuteParams">
            <summary>
            The ExecuteParams from report execution, serialized to JSON.  Used to create a new instance of HtmlViewer on the client
            </summary>
        </member>
        <member name="F:WebReports.Api.TabularReports.TabularReportWidgetDataParcel.Report">
            <summary>
            In sample data mode, the 2D array maps to table cells in which the corresponding HTML string should be put.
            </summary>
        </member>
        <member name="F:WebReports.Api.TabularReports.TabularReportWidgetDataParcel.NumPages">
            <summary>
            The number of pages that the executed report is.  This is needed in HTMLViewer when IsCompletedExecution is true and paging is turned off.
            </summary>
        </member>
        <member name="M:WebReports.Api.Charts.FusionChart.CanTypeBeMultiSeries(WebReports.Api.Charts.ChartType)">
            <summary>
            Returns true if the chart type can represent multi-series data
            </summary>
        </member>
        <member name="M:WebReports.Api.Charts.FusionChart.ExecuteWithSampleData(WebReports.Api.Reports.Report)">
            <summary>
            Fills the chart with sample data based on the report layout
            </summary>
            <param name="report">The report from which to base the sample data</param>
        </member>
        <member name="M:WebReports.Api.Charts.FusionChart.EvaluateConditionalChartFormat(WebReports.Api.Charts.ChartDataPoint,System.String)">
            <summary>
            Evaluate a point against the conditional format formulas provided by the UI. 
            </summary>
            <param name="point">The current point being evaluated for conditional coloring</param>
            <param name="seriesName">String name of the series that the point belongs to</param>
            <returns>String hexcolor of this particular point</returns>
        </member>
        <member name="M:WebReports.Api.Charts.FusionChart.GetWidgetDataParcel(System.Boolean,WebReports.Api.Reports.Report,System.Boolean)">
            <summary>
            Returns a JSON string that should be passed to the FusionChartWidget object on the client for Javascript rendering
            </summary>
        </member>
        <member name="M:WebReports.Api.Charts.FusionChart.ReplaceBenchmarkLineParameterValues">
            <summary>
            Replaces any parameters contained within benchmark line values with their runtime values
            </summary>
            <exception cref="T:System.Exception">Parameter provided for chart benchmark line value must have a number value</exception>
        </member>
        <member name="M:WebReports.Api.Charts.Chart.#ctor(WebReports.Api.Common.SessionInfo,System.Int32)">
            <summary>
            Instantiates a new chart object with the given ID, or a GUID ID if none is provided
            </summary>
            <param name="pageInfo">The pageInfo Object</param>
            <param name="id">The desired ID for the chart</param>
        </member>
        <member name="M:WebReports.Api.Charts.Chart.ClearData">
            <summary>
            Resets the chart state so it can receive fresh data.  This is used when a chart appears in a group in a report; the data must be cleared after every iteration so it doesn't accumulate.
            </summary>
        </member>
        <member name="M:WebReports.Api.Charts.Chart.AddData(System.Int32,System.String,System.String)">
            <summary>
            Used to add data to the chart instance during report execution.
            </summary>
            <param name="dataCellIndex">The Widget.DataCellIds index of the corresponding report cell</param>
            <param name="value">The value to add</param>
            <param name="linkedValue">The link data associated with this point</param>
        </member>
        <member name="M:WebReports.Api.Charts.Chart.GetParameters(WebReports.Api.Reports.ReportParameterCollection)">
            <summary>
            Gets parameters used in this widget so the report object can be aware of them.  This makes sure
            the parameters will show up in the parameters dialog if prompting, etc.
            </summary>
            <param name="parameters">The collection to be augmented with this widget's parameters.</param>
        </member>
        <member name="P:WebReports.Api.Charts.Chart.Name">
            <summary>
            The string sent to the client so the client knows what type of widget this is
            </summary>
        </member>
        <member name="M:WebReports.Api.Charts.Chart.GetImage(WebReports.Api.Reports.Cell,System.Boolean,System.Double)">
            <summary>
            Renders the chart object as an image
            </summary>
            <param name="cell">The cell that the chart resides in, or null if we want a preview</param>
            <returns>The chart image as a PNG image in base64 form</returns>
        </member>
        <member name="T:WebReports.Api.Charts.ChartDataAdder">
            <summary>
            A ChartDataAdder handles the logic during report execution of adding incoming data
            to a chart instance.  There is a different ChartDataAdder for each method a chart
            can have to consume data (see the ChartDataMethod enum).
            </summary>
        </member>
        <member name="M:WebReports.Api.Charts.ChartDataAdder.GetInstance(WebReports.Api.Common.PageInfo,System.Collections.Generic.List{WebReports.Api.Charts.ChartDataSeries},WebReports.Api.Charts.Chart)">
            <summary>
            Returns the appropriate instance of a ChartDataAdder depending on which data
            method the chart is using.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="data">The chart data object to fill</param>
            <param name="chart">The Chart object</param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Charts.ChartDataMethod">
            <summary>
            Describes the different ways in which a chart can consume data from a report
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ChartDataMethod.SeriesInColumns">
            <summary>
            The chart consumes one cell for data labels, and N cell for data values, where
            there are N series in the chart and each data value cell represents a series of data.
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ChartDataMethod.PointsInCells">
            <summary>
            The chart consumes N pairs of cells representing N points in the chart.  The first cell
            in each pair represents a data value and the second cell represents a data label. This
            method of consumption is only suitable for single-series charts.
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ChartDataMethod.Legacy">
            <summary>
            The pre-v2016.1 method.  The chart consumes one cell for data values, one cell for data
            labels, and optionally one cell for series labels which designate to which series each
            label and value belong.
            </summary>
        </member>
        <member name="T:WebReports.Api.Charts.ExpressViewChartDesignPaneLocation">
            <summary>
            Describes the different ways in which a chart can consume data from a report
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ExpressViewChartDesignPaneLocation.None">
            <summary>
            No chart is shown, only the tabular report
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ExpressViewChartDesignPaneLocation.Top">
            <summary>
            The chart is shown above the tabular report
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ExpressViewChartDesignPaneLocation.Bottom">
            <summary>
            The chart is shown below the tabular report
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.ExpressViewChartDesignPaneLocation.Full">
            <summary>
            The chart fills the canvas, no tabular report is shown
            </summary>
        </member>
        <member name="T:WebReports.Api.Charts.RenderType">
            <summary>
            Used for cominbation charts. Fills in Render Types for series
            </summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.Static">
            <summary>The line will be displayed at the user-input static value from the "value" field</summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.Min">
            <summary>The line will be displayed at the minimum value of the data set</summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.Max">
            <summary>The line will be displayed at the maximum value of the data set</summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.Mean">
            <summary>The line will be displayed at the mean value of the data set</summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.Median">
            <summary>The line will be displayed at the median value of the data set</summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.StdDevP">
            <summary>A line will be displayed representing the mean of the data set plus its standard deviation times value (population-based stdev)</summary>
        </member>
        <member name="F:WebReports.Api.Charts.BenchmarkLineFunction.StdDevS">
            <summary> A line will be displayed representing the mean of the data set plus its standard deviation times value (sample-based stdev)</summary>
        </member>
        <member name="T:WebReports.Api.Charts.ChartYAxis">
            <summary>
            Contains the formatting values for a single axis, to be used in a multi-axis line chart
            </summary>
        </member>
        <member name="T:WebReports.Api.Charts.ChartYAxesCollection">
            <summary>
            Contains the formatting values of up to three different Y axes,
            used in a multi-axis line chart
            </summary>
        </member>
        <member name="M:WebReports.Api.Composite.Chained.ChainedReport.GetInnerXml">
            <summary>
            Returns inner xml contents of chained report.  Used for embedding chained report into a scheduler file
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Composite.Chained.ChainedReport.GetEntities(System.Boolean)">
            <summary>
            Returns a list of entities belonging to all of the child reports
            </summary>
            <param name="onlyCommonEntities">Whether or not to return all unique entities, or only entities common to all child reports</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Composite.Chained.ChainedReport.ContainsWidgetTypes">
            <summary>
            Returns an array of Type objects describing which widget types the chained report contains ie. [Chart, Map, Gauge, ...]
            </summary>
        </member>
        <member name="M:WebReports.Api.Composite.Chained.ChainedReport.Serialize">
            <summary>
            Serializes current DashboardReport object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="F:WebReports.Api.Composite.Chained.ReportNoDataRenderAction.Skip">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.Composite.Chained.ReportNoDataRenderAction.Show">
            <remarks/>
        </member>
        <member name="P:WebReports.Api.Composite.CompositeReportItem.EmbeddedReport">
            <summary>
            For use with scheduling or remote executing chained reports.  The report contents will be stored here as embedded xml representing the report itself.
            </summary>
        </member>
        <member name="M:WebReports.Api.Composite.CompositeReportItem.SetFilterValue(System.String,WebReports.Api.wrFilterOperator,System.Collections.Generic.List{System.String})">
            <summary>
            Set a filter value for this report item. If the filter value already exists it will be overriden, otherwise a new filter value will be created.
            </summary>
            <param name="filterName">The name of the filter on the report that is to be given a value.</param>
            <param name="filterOperator">The operator to apply the filter value to.</param>
            <param name="filterValues">An array of strings which represent the values. The number of entries required is dependent on the filter operator.</param>
        </member>
        <member name="M:WebReports.Api.Composite.CompositeReportItem.SetParameterValue(System.String,System.String)">
            <summary>
            Set a parameter value for this report item. If the parameter value already exists it will be overriden, otherwise a new parameter value will be created.
            </summary>
            <param name="parameterName">The name of the parameter on the report that is to be given a value.</param>
            <param name="parameterValue">The value to give the parameter.</param>
        </member>
        <member name="F:WebReports.Api.Composite.FilterValue.reportFilterIndex">
            <summary>
            If the filter is at the report level, this is the index of this prompting filter in the child report's 
            original list of filters
            </summary>
        </member>
        <member name="P:WebReports.Api.Composite.FilterValue.AddFilterWhenMissing">
            <summary>
            If a corresponding report filter does not match, add one automatically during report execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Composite.FilterValue.ReportFilterIndex">
            <summary>
            If the filter is at the report level, this is the index of this prompting filter in the child report's 
            original list of filters
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardReport.Layout">
            <summary>
            Collection of dashboard tiles, defines the position, size, and content of each tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardReport.ParameterModels">
            <summary>
            List of prompting parameters from the dashboard reports, and their settings
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardReport.CanvasFormat">
            <summary>
            Defines the styling of the canvas and default tile formatting
            </summary>
        </member>
        <member name="P:WebReports.Api.Composite.Dashboard.DashboardReport.ChainedReport">
            <summary>
            ChainedReport representation of the component dashboard reports
            </summary>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardReport.ConvertFromLegacyDashboard(System.String,System.String,WebReports.Api.Common.PageInfo)">
            <summary>
            Called when we are loading a legacy dashboard. Converts it to the new format
            </summary>
            <param name="report">The report to convert</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardReport.BuildExpressViewFromLegacy(WebReports.Api.Composite.Dashboard.LegacyEmbeddedVizItem,System.Int32,WebReports.Api.Composite.Dashboard.DashboardReport,WebReports.Api.Common.PageInfo)">
            <summary>
            Converts a legacy embedded viz item into an ExpressView with a chart
            </summary>
            <param name="oldViz">The legacy item to convert</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardReport.ConvertLegacyChartAppearance(WebReports.Api.Charts.ChartWidgetDataParcel)">
            <summary>
            Converts the widgetDataParcel from a legacy dashboard to an ExpressView chart appearance object
            </summary>
            <param name="widgetData">The legacy data to convert</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardReport.Serialize">
            <summary>
            Serializes current DashboardReport object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardReport.ContainsWidgetTypes">
            <summary>
            Returns an array of Type objects describing which widget types the dashboard contains ie. [Chart, Map, Gauge, ...]
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardItem.Id">
            <summary>
            The unique identifier assigned to the tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardItem.Bounds">
            <summary>
            The location and size of the tile, given in percent canvas size
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardItem.Format">
            <summary>
            Styling of the tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardItem.AllowAlign">
            <summary>
            Don't really know about the rest of these
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTextItem.Text">
            <summary>
            String displayed in the tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTextItem.TextSettings">
            <summary>
            Styling for the tile content text
            </summary>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardAdvancedReportItem.SetFilterValue(System.String,WebReports.Api.wrFilterOperator,System.Collections.Generic.List{System.String},WebReports.Api.Common.PageInfo)">
            <summary>
            Set a filter value for this report item. If the filter value already exists it will be overriden, otherwise a new filter value will be created.
            </summary>
            <param name="filterName">The name of the filter on the report that is to be given a value.</param>
            <param name="filterOperator">The operator to apply the filter value to.</param>
            <param name="filterValues">An array of strings which represent the values. The number of entries required is dependent on the filter operator.</param>
        </member>
        <member name="M:WebReports.Api.Composite.Dashboard.DashboardAdvancedReportItem.SetParameterValue(System.String,System.String)">
            <summary>
            Set a parameter value for this report item. If the parameter value already exists it will be overriden, otherwise a new parameter value will be created.
            </summary>
            <param name="parameterName">The name of the parameter on the report that is to be given a value.</param>
            <param name="parameterValue">The value to give the parameter.</param>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.FontFamily">
            <summary>
            The font family to use for the title
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.FontSize">
            <summary>
            Size of the title font
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.FontColor">
            <summary>
            Color of the title text
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.FontWeight">
            <summary>
            Title styling
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.HorizontalAlign">
            <summary>
            Horizontal alignment for title - left, center, right, or justify
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.VerticalAlign">
            <summary>
            Vertical alignment for title - top, middle, or bottom
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.Underline">
            <summary>
            Title decoration - none, single, or double
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileTextFormatting.WrapText">
            <summary>
            Whether or not we should wrap the text in the tile 
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardExpressViewItem.ReportName">
            <summary>
            The name of the base report, if there is one
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardExpressViewItem.ExpressView">
            <summary>
            If the ExpressView was created on the dashboard (no base report exists), we store the report here
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardExpressViewItem.DashboardVisualizationFilters">
            <summary>
            Filters from the advanced filter window for a dashboard visualization
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardImageItem.Image">
            <summary>
            Image file
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardImageItem.ImageName">
            <summary>
            Image file name
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardUrlItem.Url">
            <summary>
            Url path string
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.FieldName">
            <summary>
            The name of the field to filter on
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.Break">
            <summary>
            If FieldName is a formula that contains a call to an aggregate function, Break represents
            the sort on which to perform aggregations.  Eg. do the count for each Employee, or for each
            Order, etc.
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.PullReportSettings">
            <summary>
            If true, we are converting a legacy report-level prompting filter, and we do not know
            the values or operator. We need to get them on the client side
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.Operator">
            <summary>
            The filter operator enum
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.Values">
            <summary>
            The selected value(s) of the filter
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.FilterLevel">
            <summary>
            Defines whether the report is dashboard-wide or only applies to one report
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.Prompting">
            <summary>
            True if the user should be prompted for the filter value at execution
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.Interactive">
            <summary>
            True if the user can change the filter value after execution
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.WithOperator">
            <summary>
            How the UI of the filter appears
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.DataType">
            <summary>
            The data type of the selected filter field
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.ReportTiles">
            <summary>
            The IDs of the tiles that are affected by this filter
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.InteractiveBasicStyle">
            <summary>
            Only relevant for basic interactive filters. Defines the filter style
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.IsFromReport">
            <summary>
            True if the filter was created from a report's prompting filter. False 
            if it was created by the user in the dashboard pane, or in a tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.ReportFilterIndex">
            <summary>
            If the filter is at the report level, this is the index of this prompting filter in the child report's 
            original list of filters
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.Orientation">
            <summary>
            Only relevant for basic interactive filters. Defines whether the filter is horizontal
            or vertical
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.ContentFormatting">
            <summary>
            Only relevant for basic interactive filters. Defines the style of the filter text content
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.DataFormat">
            <summary>
            Only relevant for basic interactive filters. Defines the filter data content formatting
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.SortDirection">
            <summary>
            The direction in which the dynamic filter values are sorted
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.PullFromDatabase">
            <summary>
            True if the dynamic filter pulls values from the database when changed. False if it pulls from a cached file
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.FilterTitle">
            <summary>
            The user-facing title of the filter item
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.SelectorHorizontalAlign">
            <summary>
            The horizontal align of the selector
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.SelectorVerticalAlign">
            <summary>
            The vertical align of the selector
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardFilterItem.SelectorColor">
            <summary>
            The color of the selector
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.CanvasFit">
            <summary>
            How/if the tile borders are stretched horizontally/vertically to fit the canvas
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.CanvasHeight">
            <summary>
            If the canvas is specified as "fit none", the height of the canvas in pixels
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.CanvasWidth">
            <summary>
            If the canvas is specified as "fit none" or "fit width", the width of the canvas in pixels
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.CanvasBackgroundColor">
            <summary>
            Background fill color
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.CanvasBackgroundOpacity">
            <summary>
            Percent opacity of the background
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.DefaultTileBackgroundColor">
            <summary>
            The background color applied to all new tiles
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.DefaultTileBackgroundOpacity">
            <summary>
            The background opacity applied to all new tiles
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.DefaultTileTitleBackgroundColor">
            <summary>
            The background color applied to the title of all new tiles
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.DefaultTileTitleBackgroundOpacity">
            <summary>
            The background opacity applied to the title of all new tiles
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.DefaultTileBorders">
            <summary>
            The border formatting applied to all new tiles
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.DefaultTileHasShadows">
            <summary>
            If true, all new tiles will have a shadow
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardCanvasFormat.IsGridSnappingEnabled">
            <summary>
            Whether or not tiles will snap to the grid
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.Title">
            <summary>
            The title (header) of the tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.ShowTitleOnOutput">
            <summary>
            Whether or not to render the tile header. This no longer only applies to 'On Output'/execution. 
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TileFit">
            <summary>
            How/if the content is stretched horizontally/vertically to fit the tile
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TitleFont">
            <summary>
            The font family to use for the title
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TitleFontSize">
            <summary>
            Size of the title font
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TitleFontColor">
            <summary>
            Color of the title text
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TitleFontWeight">
            <summary>
             Title styling
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TitleHorizontalAlign">
            <summary>
            Horizontal alignment for title - left, center, right, or justify
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TitleUnderline">
            <summary>
            Title decoration - none, single, or double
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.HasTileBackground">
            <summary>
            True if the user defined a color for the tile background 
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TileBackgroundColor">
            <summary>
            Color for the tile background, set by the user
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TileBackgroundOpacity">
            <summary>
            Percent opacity of the tile background 
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.HasTileTitleBackground">
            <summary>
            True if the user defined a color for the background of the tile title
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TileTitleBackgroundColor">
            <summary>
            Color for the background of the tile title, set by the user
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.TileTitleBackgroundOpacity">
            <summary>
            Percent opacity of the background for the tile title
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.Borders">
            <summary>
            Object that contains the styling for the tile borders
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileFormat.HasTileShadow">
            <summary>
            True if the user wants the tile to be rendered with a shadow
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.UniformBorders">
            <summary>
            True if the styling for the "top" border should be applied to all borders
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.TopBorderColor">
            <summary>
            Color of the top tile border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.TopBorderWeight">
            <summary>
            Thickness of the top border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.BottomBorderColor">
            <summary>
            Color of the bottom tile border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.BottomBorderWeight">
            <summary>
            Thickness of the bottom border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.LeftBorderColor">
            <summary>
            Color of the left tile border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.LeftBorderWeight">
            <summary>
            Thickness of the left border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.RightBorderColor">
            <summary>
            Color of the right tile border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.RightBorderWeight">
            <summary>
            Thickness of the right border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.TileBorderFormat.BorderRadius">
            <summary>
            The roundness of the tile border
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileDimensions.height">
            The height of the canvas tile, given in percent canvas height 
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileDimensions.width">
            The width of the canvas tile, given in percent canvas width 
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileDimensions.top">
            The space between the top edge of the canvas and the top edge of the tile, given in percent canvas height 
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardTileDimensions.left">
            The space between the left edge of the canvas and the left edge of the tile, given in percent canvas width 
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.FilterStyle.Horizontal">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.FilterStyle.Vertical">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardLayoutFit.All">
            <summary>
            All tiles are resized horizontally and vertically to fit on the canvas
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardLayoutFit.Width">
            <summary>
            Tiles are resized horizontally to fit within a specified canvas width
            </summary>
        </member>
        <member name="F:WebReports.Api.Composite.Dashboard.DashboardLayoutFit.None">
            <summary>
            The tiles are not resized. The canvas has specified height and width
            </summary>
        </member>
        <member name="T:WebReports.Api.Composite.Dashboard.LegacyDashboard">
            <summary>
            Used as a reference when converting legacy dashboards
            </summary>
        </member>
        <member name="F:WebReports.Api.wrReportType.Advanced">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrReportType.Standard">
            <remarks/>
            This needs to be listed after "Advanced" so it will be used during a ToString() operation instead of "Advanced"
            This is to address a forward compatibility issue where advanced reports created in a newer version cannot be
            opened in an older version.  Ths issue also affects opening and saving a pre-existing standard report without
            making any changes to the report itself.
            At some point in the future the order of these can be switched back so that "Advanced" will be saved to the
            report xml instead.
        </member>
        <member name="F:WebReports.Api.wrReportType.Express">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrReportType.Dashboard">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrReportType.Chained">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrReportType.Visualization">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrReportType.ExpressView">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrVerticalAlign.Top">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrVerticalAlign.Middle">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrVerticalAlign.Bottom">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrHorizontalAlign.Left">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrHorizontalAlign.Center">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrHorizontalAlign.Right">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrHorizontalAlign.Justify">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.EqualTo">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.NotEqualTo">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.LessThan">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.LessThanOrEqualTo">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.GreaterThan">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.GreaterThanOrEqualTo">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.StartsWith">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.NotStartsWith">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.EndsWith">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.NotEndsWith">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.Contains">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.NotContains">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.Between">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.NotBetween">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.OneOf">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterOperator.NotOneOf">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Html">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Excel">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Pdf">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Rtf">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Csv">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Word">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Default">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Print">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Empty">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrExportType.Json">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterType.SingleChoice">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterType.MultiChoice">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterType.RangeSlider">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrFilterType.SingleSlider">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrSortDirection.Ascending">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrSortDirection.Descending">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.DefaultBoolean.Default">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.DefaultBoolean.True">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.DefaultBoolean.False">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.TextFormatType.General">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.TextFormatType.Number">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.TextFormatType.Date">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.TextFormatType.Text">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrParentReportType.None">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrParentReportType.Dashboard">
            <remarks/>
        </member>
        <member name="F:WebReports.Api.wrParentReportType.Chained">
            <remarks/>
        </member>
        <member name="T:WebReports.Api.ExecuteData.DataTagger">
            <summary>
            The DataRowTagger class allows the tagging of some underlying data. A tag is essentially some Guid created by
            the exploiter of this class.
            </summary>
        </member>
        <member name="M:WebReports.Api.ExecuteData.DataTagger.#ctor(System.String)">
            <summary>
            Create a new data tagger.
            </summary>
            <param name="fn">The filename to store the tagging results in</param>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteFilters.Filter(WebReports.Api.ExecuteData.ExecuteDataTable,System.Int64)">
            <summary>
            Filter the current data row
            </summary>
            <param name="executeDt">The execute data table, cursor currently pointing to some data row to determine filtering</param>
            <param name="filePos">The position of the cursor</param>
            <returns>true if the data row should be included in the report, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteFilters.Finalize(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Finalize any filter data
            </summary>
            <param name="executeDt">The execute data table, cursor currently pointing to some data row to determine filtering</param>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteBreakField.AddBreakField(System.String)">
            <summary>
            Add a new field to the list of break fields.
            The additional functionality was moved from IsBreak() which was performing this test
            everytime it was called and seems to be using a lot of CPU in the process.
            So now we do it only when adding the elements to the list.
            WARNING: We do have the list protected so it possible that other components might
            directly add things to the list.
            EX-9962
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteBreakField.CurrentBreakValue(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            In some cases (single row in first group) IsBreak can't be used to extract the group value, so it needs to be done here instead.
            </summary>
            <param name="executeDt"></param>
            <param name="saveGroupValues"></param>
        </member>
        <member name="T:WebReports.Api.ExecuteData.ExecuteDataTable.ExecuteDataMode">
            <summary>
            Enumeration for controlling the way data is processed/saved/returned by the ExecuteReport and ExecuteDataTable classes
            </summary>
        </member>
        <member name="F:WebReports.Api.ExecuteData.ExecuteDataTable.ExecuteDataMode.Standard">
            <summary>
            Indicates that the data should be treated as though this is a "normal" execution or re-execution.
            If the data file exists, it will be used, if not, it will be created from the data source.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExecuteData.ExecuteDataTable.ExecuteDataMode.TopN">
            <summary>
            TopN indicates that the data will be re-generated based on a tree containing an ordered/filtered
            set of data specific to the Top-N records meeting the user requirements.  New data will not be
            read from the data source, nor will it be read unaltered from the existing intermediate file.
            </summary>
        </member>
        <member name="F:WebReports.Api.ExecuteData.ExecuteDataTable.ExecuteDataMode.Resume">
            <summary>
            Resume indicates that any existing intermediate files will be appended with additional data
            pulled from the data source before returning the updated data table.  The resulting table
            will be automatically "fast forwarded" to the beginning of the new data rows.
            </summary>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataTable.ExecuteDataObjectToString(System.Object,System.Boolean,System.Int32,System.String)">
            <summary>
            Converts an object from the execution DataTable to a string, with special handling for dates
            </summary>
            <param name="obj">The object from the DataTable</param>
            <param name="treatAsDateTime">true if the object should be parsed as a DateTime string regardless of the column type</param>
            <param name="nullValue">The value to return if <paramref name="obj"/> is null</param>
            <returns>A string representation <paramref name="obj"/></returns>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataTable.FastForward(System.Int32)">
            <summary>
            This method has the effect of moving the row pointer ahead by "rowNum" rows.
            This can be used to set the start point when called before any processing has begun.
            </summary>
            <param name="rowNum">Number of rows to increment the current pointer.</param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.ExecuteData.ExecuteDataBuilder">
            <summary>
            This class is responsible for retrieving, combining, filtering, and sorting the data that is required for a specific report.
            </summary>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataBuilder.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.Report,WebReports.Api.Execute.ActiveLocalExecution)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="report">The report object this data builder should retrieve data for.</param>
            <param name="execution">The execution object describing this execution.</param>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataBuilder.Execute">
            <summary>
            Retrieve the data that is required. Note this is a very expensive function, this is the heavy hitter that will go out and query all required datasources, will
            combine any multi-data sources together, and will do any cartesian processing.
            </summary>
            <returns>A DataTable containing all the data, sorted and filtered appropriately. Each column is a relevant data field in Entity.ColumnName format</returns>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataBuilder.TransformEntityCheck">
            <summary>
            If the report contains transform entities (vertical tables), determine if they can be
            converted to SQL type objects which join in the database in order to improve performance
            </summary>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataBuilderDataCollection.ContainsEntityList(System.Collections.Generic.List{WebReports.Api.Reports.Entity})">
            <summary>
            Retrieves the data builder object that best matches the entities provided. The best match is the data builder object that
            contains all entities provided and has the fewest additional entities.
            </summary>
            <param name="entities">The entities that the data builder object must contain.</param>
            <returns>The data builder object that is best suited for the entities provided.</returns>
        </member>
        <member name="M:WebReports.Api.ExecuteData.ExecuteDataBuilderData.FilterByMultiDataSourceFormulas(System.Boolean)">
            <summary>
            Filters the combined data by filter formulas
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.RemoteExecution.#ctor">
            <summary>
            This constructor should not be used, it's used for serialization purposes.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.RemoteExecution.#ctor(WebReports.Api.Common.PageInfo,System.Guid,System.String,WebReports.Api.wrExportType)">
            <summary>
            Create a new remote active execution object. A remote active execution object represents a job run on another machine.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="execute">The local execution object that is to be converted to a remote execution</param>
        </member>
        <member name="P:WebReports.Api.Execute.RemoteExecution.RemoteJobId">
            <summary>
            The remote job ID for this execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.RemoteExecution.CacheJobId">
            <summary>
            If this is a cache exection then save that job id [EX-9209]
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.RemoteExecution.RemoteHostIdx">
            <summary>
            The remote host index for this execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.RemoteExecution.IsVisualizationReport">
            <summary>
            Flag whether this is a visualization on a dashboard; need to serialize for web farm case if report has not been saved yet
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.RemoteExecution.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.RemoteExecution.Save">
            <summary>
            Serializes current CompletedExecute object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:WebReports.Api.Execute.RemoteExecution.Load(WebReports.Api.Common.PageInfo,System.String,System.String,System.Guid)">
            <summary>
            Create a new CompletedExecute object from the execution's ID.
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="T:WebReports.Api.Execute.LocalExecution">
            <summary>
            A completed execution object represents an already completed executed process.  An already completed execution object is not managed in memory by ExecutionManager, it is
            serialized to a file.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.LocalExecution.#ctor">
            <summary>
            This constructor should not be used, it's used for serialization purposes.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.Phase">
            <summary>
            The current phase of execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.PercentageOfPhase">
            <summary>
            The current percentage completion of the current phase.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.NumPages">
            <summary>
            The number of output pages currently written.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.RowOverflow">
            <summary>
            Returns a boolean whether or not any of the executed sql statements for the report were actually limited by the EffectiveDbRowLimit
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.Message">
            <summary>
            Any message that might have been issued during execution. Relevant when the current phase is ExceptionThrown or UserMessage.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.LocalExecution.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.DataFn">
            <summary>
            The full file path to the data file for this execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.IntermediateFn">
            <summary>
            The full file path to any intermediate file for this execution.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.IsCancel">
            <summary>
            Whether the execution has been canceled or in the process of canceling.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.LocalExecution.DataExists">
            <summary>
            Has the data file been created yet.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.LocalExecution.Save(WebReports.Api.Common.PageInfo)">
            <summary>
            Serializes current CompletedExecute object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:WebReports.Api.Execute.LocalExecution.Load(WebReports.Api.Common.PageInfo,System.String,System.String,System.Guid)">
            <summary>
            Create a new CompletedExecute object from the execution's ID.
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:WebReports.Api.Execute.LocalExecution.AddEndChar(System.String)">
            <summary>
            Determine the type of path separater used and add one at the end if it does not exist
            EX-10282
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.#ctor(WebReports.Api.Common.PageInfo,System.Guid,WebReports.Api.Reports.ReportObject,WebReports.Api.wrExportType)">
            <summary>
            Create a new local active execution object. A local active execution object will be run on this machine.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="guid">The ID to assign this execution</param>
            <param name="reportObject">The report object that is to be executed</param>
            <param name="exportType">The export type to execute to</param>
        </member>
        <member name="P:WebReports.Api.Execute.ActiveLocalExecution.ReportObject">
            <summary>
            The report object this execution will be executing.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.ExecuteSync(System.Boolean)">
            <summary>
            Start this execution, this will not return until execution is finished.
            </summary>
            <param name="isLowPriority">Whether the thread of execution should be marked at the lowest priority (or remain its current priority).</param>
            <returns>The results of the execution</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.ExecuteAsync(System.Boolean,System.String)">
            <summary>
            Start this execution, this will return immediate.
            </summary>
            <param name="isLowPriority">Whether the thread of execution should be marked at the lowest priority (or remain its current priority).</param>
            <param name="sessionId">The session id that "owns" this execution</param>
            <returns>True if the execution was successfully started, false otherwise.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.Cancel">
            <summary>
            Cancel this execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.Transmit(WebReports.Api.Common.PageInfo)">
            <summary>
            Transmit any data to this executions export path, this ensure's all required data is on the local machine.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.CollectGarbage">
            <summary>
            Helper method that will do a garbage collection if the execution requires it (use only if absolutely necessary).
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.Process">
            <summary>
            Process this execution.
            </summary>
            <returns>The results of the execution</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.SetPercentage(System.Int32)">
            <summary>
            Set the current percentage completion for the current phase, this should be called by the executing process.
            </summary>
            <param name="percentage">The current percentage</param>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.SetNumPages(System.Int32)">
            <summary>
            Set the current number of pages written, this should be called by the executing process.
            While the client is polling for execution status, it receives this value for the number
            of pages that have finished being exported.
            EX-9962 we suppress this for every page for efficiencie as it turns out to be quite costly: 20% of total execution time for JSOM output
            but we don't update the internal page count until we save this to disk so that in a webfarm
            situation all servers will report the same number of pages.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.AddSupportFile(System.String)">
            <summary>
            Add a support file associated with the execution, this should be called by the executing process.
            </summary>
            <param name="fileName">The name of the suport file.</param>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseDataQuery">
            <summary>
            Indicate the execution has started querying the data (this resets PercentageOfPhase to 0), this should be called by the executing process.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseDataProcess">
            <summary>
            Indicate the execution has started processing the data (this resets PercentageOfPhase to 0), this should be called by the executing process.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseWriteOutput">
            <summary>
            Indicate the execution has started writing output (this resets PercentageOfPhase to 0), this should be called by the executing process.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseSuccess">
            <summary>
            Indicate the execution has succeed (this resets PercentageOfPhase to 100), this should be called by the executing process.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseNothingQualified">
            <summary>
            Indicate no data qualified for execution (this resets PercentageOfPhase to 100), this should be called by the executing process.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseUserMessage(WebReports.Api.Common.WrUserMessage)">
            <summary>
            Indicate that a user message should be issued as a result of a failed execution, this should be called by the executing process.
            </summary>
            <param name="ex">The user message execption that should be issued to the user.</param>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveLocalExecution.IndicatePhaseException(System.Exception)">
            <summary>
            Indicate that an exception has occurred, this should be called by the executing process.
            </summary>
            <param name="ex">The exception that was thrown.</param>
        </member>
        <member name="P:WebReports.Api.Execute.ActiveLocalExecution.Exception">
            <summary>
            The exception, if there is one
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.ActiveLocalExecution.ExecuteReturnValue">
            <summary>
            Result of report execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.Id">
            <summary>
            The ID of this execution, can be used to retrieve this object through ExecutionManager.GetExecution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.EmbeddedExecutionIds">
            <summary>
            The list of execution Id's associated with embedded executions in composite reports
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.Initiated">
            <summary>
            The date this execution was created.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.ExportType">
            <summary>
            The export type of this execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.Name">
            <summary>
            The name of this execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.DownloadFn">
            <summary>
            The name of the download file for this execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.IExecution.DownloadName">
            <summary>
            The name of the download name for this execution
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.IExecution.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.IExecution.GetTempFn(System.String)">
            <summary>
            Gets the temp filename
            </summary>
            <returns>A string value with the full filename</returns>
        </member>
        <member name="M:WebReports.Api.Execute.IExecution.Dispose">
            <summary>
            Dispose of any resources obtained by this execution
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteChained.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReportAsChained.#ctor">
            <summary>
            Should not be called.  Required for Serialization.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReportAsChained.GetUniqueColumnData(System.String)">
            <summary>
            Get a specific column of data from the last report execution
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:WebReports.Api.Execute.IActiveExecution.ExecuteSync(System.Boolean)">
            <summary>
            Start this execution, this will not return until execution is finished.
            </summary>
            <param name="isLowPriority">Whether the thread of execution should be marked at the lowest priority (or remain its current priority).</param>
            <returns>The results of the execution</returns>
        </member>
        <member name="M:WebReports.Api.Execute.IActiveExecution.ExecuteAsync(System.Boolean,System.String)">
            <summary>
            Start this execution, this will return immediate.
            </summary>
            <param name="isLowPriority">Whether the thread of execution should be marked at the lowest priority (or remain its current priority).</param>
            <param name="sessionId">The session id that "owns" this execution</param>
            <returns>True if the execution was successfully started, false otherwise.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.IActiveExecution.Cancel">
            <summary>
            Cancel this execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.IActiveExecution.Transmit(WebReports.Api.Common.PageInfo)">
            <summary>
            Transmit any data to this executions export path, this ensure's all required data is on the local machine.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.#ctor">
            <summary>
            This constructor should not be used, it's used for serialization purposes.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Execute.ActiveLocalExecution)">
            <summary>
            Create a new remote active execution object. A remote active execution object represents a job run on another machine.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="execute">The local execution object that is to be converted to a remote execution</param>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.ExecuteSync(System.Boolean)">
            <summary>
            Start this execution, this will not return until execution is finished.
            </summary>
            <param name="isLowPriority">Whether the thread of execution should be marked at the lowest priority (or remain its current priority).</param>
            <returns>The results of the execution</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.ExecuteAsync(System.Boolean,System.String)">
            <summary>
            Start this execution, this will return immediate.
            </summary>
            <param name="isLowPriority">Whether the thread of execution should be marked at the lowest priority (or remain its current priority).</param>
            <param name="sessionId">The session id that "owns" this execution</param>
            <returns>True if the execution was successfully started, false otherwise.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.Cancel">
            <summary>
            Cancel this execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.Transmit(WebReports.Api.Common.PageInfo)">
            <summary>
            Transmit any data to this executions export path, this ensure's all required data is on the local machine.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.GetMetaContent">
            <summary>
            Retrieve the HTML meta content for this execution. Only applicable when the remote job is exporting to HTML.
            </summary>
            <returns>The HTML meta content, or null if the meta content hasn't been written yet.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.GetPage(System.Int32,System.Int32)">
            <summary>
            Retrieve an HTML page for this execution. Only applicable when the remote job is exporting to HTML.
            </summary>
            <param name="pageNum">The page number to retrieve</param>
            <returns>The HTML page, or null if the page hasn't been written yet.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ActiveRemoteExecution.GetJsonChunks(System.Int32,System.Int32)">
            <summary>
            Retrieve output json data chunks for this execution. Only applicable when the remote job is exporting to JSON.
            </summary>
            <param name="startChunkNum">The beginning of the range of chunks to retreive (inclusive)</param>
            <param name="endChunkNum">The end of the range of chunks to retreive (exclusive)</param>
        </member>
        <member name="T:WebReports.Api.Execute.ExecutionManager">
            <summary>
            The execution manager manages all asyncronous report executions.  This is a static class, all executions within the application can be accessed
            here.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ExecutionManager.ExecuteSync(WebReports.Api.Common.PageInfo,WebReports.Api.Execute.ActiveLocalExecution,System.Boolean)">
            <summary>
            Execute the provided execution object syncronously (calling Execute.ExecuteSync). Calling this way allows you to retrieve the execution
            object (while it is executing) from another thread. This execution will always be done on the current thread even if remote execution is
            supported.
            </summary>
            <param name="pageInfo">The PageInfo object.</param>
            <param name="execute">The execute object, this is what will be executed synchronously</param>
            <param name="isLowPriority">Whether this thread should be given low priority</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecutionManager.ExecuteAsync(WebReports.Api.Common.PageInfo,WebReports.Api.Execute.ActiveLocalExecution,System.Boolean)">
            <summary>
            Execute the provided execution object asyncronously (calling Execute.ExecuteAsync). Calling this way allows you to later retrieve the execution
            object (while it is executing). It also will handle converting a local execute to a remote execute if remote execution is enabled, in which case
            the Guid returned will identify a newly created RemoteExecute object.
            </summary>
            <param name="pageInfo">The PageInfo object.</param>
            <param name="execute">The execute object, this is what will be executed asyncronously</param>
            <param name="isLowPriority">Whether the execution thread should be given low priority.</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecutionManager.GetExecution(WebReports.Api.Common.PageInfo,System.Guid)">
            <summary>
            Retrieve a previously created execution, based on its Guid.
            </summary>
            <param name="guid">The Guid of the execution to retrieve, this is the Guid returned by Execution.Id</param>
            <returns>The execution object associated with the Guid provided.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecutionManager.GetExecution(WebReports.Api.Common.PageInfo,System.String,System.String,System.Guid)">
            <summary>
            Retrieve a previously created execution, based on its Guid.
            </summary>
            <param name="guid">The Guid of the execution to retrieve, this is the Guid returned by Execution.Id</param>
            <returns>The execution object associated with the Guid provided.</returns>
        </member>
        <member name="T:WebReports.Api.Execute.ExecutionPhase">
            <summary>
            The current phase of execution
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.Initialize">
            <summary>
            The execution has not been started or is currently initializing.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.DatabaseQuery">
            <summary>
            The execution is querying the data required to fullfil the request.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.DatasetProcess">
            <summary>
            The execution is processing the queried data.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.OutputFile">
            <summary>
            The execution is writing it's output file for user consumption.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.Success">
            <summary>
            The execution has successfully completed, the output file has been written.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.NothingQualified">
            <summary>
            The execution has determined that there is nothing to do.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.ExceptionThrown">
            <summary>
            An exception occurred during execution, the exception not meant for user consumption.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.UserMessage">
            <summary>
            An exception occurred during execution, the exception meant for user consumption.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.Canceling">
            <summary>
            The user has cancelled the execution, but the execution is still running.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecutionPhase.Canceled">
            <summary>
            The user has cancelled the execution, and the execution has stopped.
            </summary>
        </member>
        <member name="T:WebReports.Api.Execute.ExecuteStatusData">
            <summary>
            This class represents the current state of an execution, serializable into a single package.
            </summary>
        </member>
        <member name="T:WebReports.Api.Execute.BaseExecution">
            <summary>
            The execution object represents a currently executing process or an already executed process. This is generally a communication object
            between threads: one thread is doing the execution and writing to this object while one or more other threads are able to view the 
            current state of the execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.#ctor">
            <summary>
            This constructor should not be used, it's used for serialization purposes.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.#ctor(System.Guid,System.String,System.String,System.String,WebReports.Api.wrExportType)">
            <summary>
            Create a new execution object.
            </summary>
            <param name="guid">The ID to assign this execution</param>
            <param name="exportPath">The path to store this execution data</param>
            <param name="name">The name of this execution (the report object name)</param>
            <param name="exportType">The export type for this execution</param>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.#ctor(WebReports.Api.Execute.BaseExecution)">
            <summary>
            Create a new execution object from an existing execution object.
            </summary>
            <param name="from"></param>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.Id">
            <summary>
            The ID of this execution, can be used to retrieve this object through ExecutionManager.GetExecution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.EmbeddedExecutionIds">
            <summary>
            The list of execution Id's associated with embedded executions in composite reports
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.Initiated">
            <summary>
            The date this execution was created.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.ExportType">
            <summary>
            The export type of this execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.Name">
            <summary>
            The name of this execution
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.DownloadExt">
            <summary>
            The extension of the file the execution output will use. This should be set before anyone can reliably use DownloadFn/DownloadName.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.Custom">
            <summary>
            Any custom data required by an execution (that must be serialized).
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.DownloadFn">
            <summary>
            The full file path of where this execution will save the execution output to. Note, requires DownloadExt to first be set.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.DownloadName">
            <summary>
            The filename of where this execution will save the execution output to. Note, requires DownloadExt to first be set.
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.DownloadFnNoExtension">
            <summary>
            Full file path of where the execution will save the execution output to, without the file extension
            </summary>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.DownloadNameNoExtension">
            <summary>
            The filename of where this execution will save the execution output to. Note, requires DownloadExt to first be set.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.GetStatus">
            <summary>
            Retrieve the current status of this execution.
            </summary>
            <returns>An ExecuteStatusData object which describes the current state of this execution process.</returns>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.Dispose">
            <summary>
            Dispose of any resources obtained by this execution
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.SetDownloadExt(System.String)">
            <summary>
            Set the download extension, this should be called by the executing process.
            </summary>
            <param name="extension">The extension, should not begin with the "." character.</param>
        </member>
        <member name="P:WebReports.Api.Execute.BaseExecution.SupportFiles">
            <summary>
            The names of any support files that may have been created as part of this execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.BaseExecution.GetTempFn(System.String)">
            <summary>
            The names of any support files that may have been created as part of this execution.
            </summary>
        </member>
        <member name="F:WebReports.Api.Execute.ExecuteReport.IsSqlGenerationExecution">
            <summary>
            When set to true and the report is executed, ExecuteDataBuilder will not
            actually retrieve any data, but will instead throw a WrAllSqlStatementsGeneratedException containing
            all SQL statements that would be generated as a result of the execution.
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.ValidateExportTypeAllowed">
            <summary>
            Throws an exception if the current export type is not allowed
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.GroupTreeExport(WebReports.Api.Reports.ReportExecutionData)">
            <summary>
            The GroupTreeExporter is a special exporter we use to do Top N and sorting on aggregates.
            </summary>
            <param name="exData"></param>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.GetExecutionData(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Prepares the report for execution and grabs the data for an execution from the _intermediate file.
            </summary>
            <param name="exDt">If this is not null then we have an executeDataTable we want to use instead of generating a new one. used for topn</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.InsertDetailSection">
            <summary>
            inserts a detail section into the execute report. Used for TopN when we detect that there is no detail section.
            This is needed because when the intermediate file is written, if there is no detail, the aggregates get recalcuated incorrectly
            </summary>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.GetIntermediateData(WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Generate the _Intermediate file
            </summary>
            <param name="exDt"></param>
            <returns>If exDt is not null, we have a specific ExecuteDataTable we want to use and overwrite the _Intermediate file with</returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.GetExecuteDataTable(System.Collections.Generic.List{System.Int32},WebReports.Api.ExecuteData.ExecuteDataTable.ExecuteDataMode)">
            <summary>
            Executes the report if it hasn’t already executed, returning the 
            executed data.  On subsequent calls it will return the already-executed data without 
            executing again.  If no data qualifies for the report, returns null.
            </summary>
            <param name="dataRowIndexList">List of ints representing the data rows we want to use for the execution. Topn</param>
            <returns></returns>
        </member>
        <member name="M:WebReports.Api.Execute.ExecuteReport.GetExecuteReportGroupTreeJson">
            <summary>
            For Unit tests. Grabs the JSON representation of the group tree that was constructed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket">
            <summary>
            This class contains the value for a single bucket within a CrossTabulation data node. How the data within this bucket is tabulated is determined
            by the implementing class.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket.CreateBucket(WebReports.Api.Reports.ReportCrossTabTabulation.TabulationMethod)">
            <summary>
            Create a new bucket given the tabulation method and the value processor
            </summary>
            <param name="method">The method for tabulating data within this bucket</param>
            <param name="valueProcessor">The processor for how to retrieve the data that belongs to this bucket</param>
            <returns>The appropriate implementation of CrossTabDataDataBucket</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket.Tabulate(WebReports.Api.CrossTab.ICrossTabProcessDataValue,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Tabulate data into this bucket based on the current data row
            </summary>
            <param name="processor">The CrossTab data value processor</param>
            <param name="valueProvider">The data access object</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket_Sum">
            <summary>
            This class contains the value for a single bucket within CrossTabulation data node. Data that falls into this bucket is summed.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket_Sum.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket_Sum.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket_Avg">
            <summary>
            This class contains the value for a single bucket within CrossTabulation data node. Data that falls into this bucket is averaged.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket_Avg.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket_Avg.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket_Min">
            <summary>
            This class contains the value for a single bucket within CrossTabulation data node. The value for this bucket is the minimum of any data that falls into this bucket.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket_Min.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket_Min.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket_Max">
            <summary>
            This class contains the value for a single bucket within CrossTabulation data node. The value for this bucket is the maximum of any data that falls into this bucket.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket_Max.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket_Max.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket_Count">
            <summary>
            This class contains the value for a single bucket within CrossTabulation data node. The value for this bucket is the number of times data falls into this bucket.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket_Count.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket_Count.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataBucket_None">
            <summary>
            This class contains the value for a single bucket within CrossTabulation data node. The value for this bucket is the most recent value that falls into this bucket (not tabulation is done).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataBucket_None.TabulateValue(System.Object)">
            <summary>
            Tabulate data into this bucket given a retrieved value.
            </summary>
            <param name="value">The value to tabulate, type not defined but will not be null</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataBucket_None.Value">
            <summary>
            Retrieve the current value of the bucket.
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDefinitionPreview">
            <summary>
            This class contains the process definition for previewing a CrossTab.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionPreview.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create the processing definition for the supplied CrossTab.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="crossTab">The cross tab to create a process definition for</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionPreview.CreateHeaderDefinition(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Create a header process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
            <returns>The header process definition</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionPreview.CreateDataDefinition(WebReports.Api.Common.PageInfo)">
            <summary>
            Create a data process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <returns>The data process definition</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionPreview">
            <summary>
            This class represents the data definition for previewing a given CrossTab Header (row or column). The preview data definition will attempt to retrieve
            header values using a CellVariable with a name equal to the header source text (there is no token).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionPreview.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Initialize a new CrossTabProcessHeaderDefinitionPreview object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionPreview.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of this header
            </summary>
            <param name="cellVariableDataProvider">The data values to retrieve the value from</param>
            <returns>The current value</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionPreview">
            <summary>
            This class represents the data definition for a given CrossTab Data (tabulation). The preview data definition will attempt to retrieve tabulation
            data using a CellVariable with a name equal to the tabulation source text (there is no token).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionPreview.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Initialize a new CrossTabDataExecuteDataDefinition object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionPreview.CreateDataValueProcessor(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Create the value processor for a given tabulation.
            </summary>
            <param name="tabulation">The tabulation to determine the tabulation method for.</param>
            <returns>The value processor for the tabulation provided</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataValuePreview">
            <summary>
            This class is used to define how to retrieve values for a specific tabulation within a CrossTab when the CrossTab is being previewed.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataValuePreview.#ctor(WebReports.Api.CrossTab.CrossTabPreviewVariable)">
            <summary>
            Create the CrossTabProcessDataValuePreview object.
            </summary>
            <param name="variable">The variable representing what is being tabulated</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataValuePreview.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of data that should be tabulated. This always returns the text provided on the constructor.
            </summary>
            <param name="valueProvider">The data access object (not used)</param>
            <returns>The value of data that should be tabulated</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabPreviewVariable">
            <summary>
            This class is a "dummy" CellVariable which is used for the CrossTab Preview processing. It's only relavent data is
            it's name, which should be the header or tabulation's source text.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreviewVariable.#ctor(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Create the CrossTabPreviewVariable object.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the header or tabulation source</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreviewVariable.GetValue(WebReports.Api.Reports.ICellVariableValueProvider,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the current value of the CellVariable. This intentionally throws an error, this should never be called.
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <param name="allowHiddenColumn">When true, return values from columns that may be hidden (instead of null, which is default behavior)</param>
            <returns>Throws NotImplementedException, this should never be called</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabPreview">
            <summary>
            This class contains the functions to build a CrossTab presentation for purposes of previewing what the CrossTab will look like in an executed report
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Initialize a new CrossTabPreview object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.UpdateVariableProvider(System.String[],System.String[])">
            <summary>
            Update the sectionVariableValueProvider stored in this object
            </summary>
            <param name="keys">The set of variable tokens</param>
            <param name="values">Corresponding set of values</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.Preview(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create a collection of cells which forms a preview of the provided CrossTab.
            </summary>
            <param name="crossTab">The CrossTab to create a preview for</param>
            <returns>The collection of cells representing the preview</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.DoHeaderSetup(WebReports.Api.Reports.ReportCrossTabHeaderCollection,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initialize variables for a header (row or column)
            </summary>
            <param name="headers">The headers that make up this axis</param>
            <param name="keys">The array that will contain the keys for each header</param>
            <param name="valuePrepends">The array that will contain the value prepend for each header</param>
            <param name="defaultPrepend">The default prepend string if a logical one cannot be created</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.FillRowData(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.CrossTab.CrossTabData,System.Int32)">
            <summary>
            Create row data for the current header, recursively row data below the provided row header, and all column/tabulation data.
            </summary>
            <param name="crossTab">The CrossTab data is being created for</param>
            <param name="crossTabData">The CrossTabData object data is being collected into</param>
            <param name="rowHeader">The current row header data is being created for</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.FillColumnData(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.CrossTab.CrossTabData,System.Int32)">
            <summary>
            Create column data for the current header, recursively column data below the provided column header, and all tabulation data
            </summary>
            <param name="crossTab">The CrossTab data is being created for</param>
            <param name="crossTabData">The CrossTabData object data is being collected into</param>
            <param name="colHeader">The current column header data is being created for</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.FillTabData(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.CrossTab.CrossTabData)">
            <summary>
            Create tabulation data, then tell CrossTabData to process the filled in data.
            </summary>
            <param name="crossTab">The CrossTab data is being created for</param>
            <param name="crossTabData">The CrossTabData object data is being collected into</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.GetValue(WebReports.Api.Reports.CellVariable,System.Boolean)">
            <summary>
            Given the name of a variable, return the value
            </summary>
            <param name="variable">The name of the variable</param>
            <param name="convertNullToBlank">When true (default) null values will be converted to blank, when false null will be returned</param>
            <returns>The value of the variable</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetTotalCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader,System.String)">
            <summary>
            Set the total cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <param name="value">The value of the header cell being totalled</param>
            <returns>true if this total cell should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetHeaderStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if this header determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetTotalHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.SetTabStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a total header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="rowHeader">The row header this tabulation is derived from</param>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if this tabulation determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.IsSuppressed(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the column header identified should be suppressed
            </summary>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if the column header should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.IsHeaderPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header cell should cause a page break, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPreview.IsTotalPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header total should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header total cell should cause a page break, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDefinition">
            <summary>
            This abstract class contains the process definition for how data is collected for a given CrossTab.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinition.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create the process definition for the supplied CrossTab.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="crossTab">The cross tab to create a process definition for</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinition.CreateHeaderDefinition(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Create a header process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
            <returns>The header process definition</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinition.CreateDataDefinition(WebReports.Api.Common.PageInfo)">
            <summary>
            Create a data process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <returns>The data process definition</returns>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabProcessDefinition.ColumnDefinitions">
            <summary>
            Retrieve the column process definitions
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabProcessDefinition.RowDefinitions">
            <summary>
            Retrieve the row process definitions
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabProcessDefinition.DataDefinition">
            <summary>
            Retrieve the data process definitions
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition">
            <summary>
            This abstract class contains the process definition for a header (row or column)
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition.#ctor(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Create a new process definition for a header
            </summary>
            <param name="header">This process definition CrossTab header (will be null in the "CrossTab lister" case)</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of this header given the current data row
            </summary>
            <param name="cellVariableDataProvider">The data access object</param>
            <returns>The string value</returns>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition.Header">
            <summary>
            Retrieve the header associated with this process definition header
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition.NewChildDataHeaderNode(System.String)">
            <summary>
            Create a new CrossTabDataHeaderNode object
            </summary>
            <param name="value">The value of the data header node</param>
            <returns>A new CrossTabDataHeaderNode instance</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataDefinition">
            <summary>
            This abstract class contains the process definition for the data within a CrossTab (the tabulations)
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.AddTabulation(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Add a tabulation to this process definition
            </summary>
            <param name="tabulation">The tabulation to add</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.NumberOfTabulations">
            <summary>
            Retrieve the number of tabulations within this process definition
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.NewDataDataNode">
            <summary>
            Create a new CrossTabDataDataNode object
            </summary>
            <returns>A new CrossTabDataDataNode instance</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.SetTabulationSwitch(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Globally set whether the values should be tabulated for each tabulation
            </summary>
            <param name="valueProvider">The data access object</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.GetDataValueProcessor(System.Int32)">
            <summary>
            Determine whether a specific tabulation should be tabulated, depending on what SetTabulationSwitch has determined. The default implementation
            always returns true.
            </summary>
            <param name="tabulationIndex">The tabulation to check for, the index is the number the tabulation was added to the process definition</param>
            <returns>true if the tabulation provided should be tabulated, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.CreateTabulationMethod(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Create the tabulation method for a given tabulation. The default implementation returns the tabulation method defined in the tabulation object.
            </summary>
            <param name="tabulation">The tabulation to determine the tabulation method for.</param>
            <returns>The tabulation method for the tabulation provided</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinition.CreateDataValueProcessor(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Create the value processor for a given tabulation.
            </summary>
            <param name="tabulation">The tabulation to determine the tabulation method for.</param>
            <returns>The value processor for the tabulation provided</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.ICrossTabProcessDataValue">
            <summary>
            This interface is used to define how to retrieve values for a specific tabulation within a CrossTab
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabProcessDataValue.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of data that should be tabulated, based on the current data row.
            </summary>
            <param name="valueProvider">The data access object</param>
            <returns>The value of data that should be tabulated</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDefinitionExecute">
            <summary>
            This class contains the process definition for executing a CrossTab.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionExecute.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create the processing definition for the supplied CrossTab.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="crossTab">The cross tab to create a process definition for</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionExecute.CreateHeaderDefinition(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Create a header process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
            <returns>The header process definition</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionExecute.CreateDataDefinition(WebReports.Api.Common.PageInfo)">
            <summary>
            Create a data process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <returns>The data process definition</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionExecute">
            <summary>
            This class represents the data definition for executing a given CrossTab Header (row or column).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionExecute.#ctor(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Initialize a new CrossTabProcessHeaderDefinitionExecute object
            </summary>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionExecute.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of this header
            </summary>
            <param name="cellVariableDataProvider">The data values to retrieve the value from</param>
            <returns>The current value</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionExecute">
            <summary>
            This class represents the data definition for a given CrossTab Data (tabulation).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionExecute.#ctor(System.Collections.Generic.HashSet{WebReports.Api.Reports.Entity})">
            <summary>
            Initialize a new CrossTabProcessDataDefinitionExecute object
            </summary>
            <param name="headerEntities">The entities that make up the CrossTab headers</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionExecute.CreateDataValueProcessor(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Create the value processor for a given tabulation.
            </summary>
            <param name="tabulation">The tabulation to determine the tabulation method for.</param>
            <returns>The value processor for the tabulation provided</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionExecute.SetTabulationSwitch(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Globally set whether the values should be tabulated for each tabulation
            </summary>
            <param name="valueProvider">The data access object</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionExecute.GetDataValueProcessor(System.Int32)">
            <summary>
            Determine whether a specific tabulation should be tabulated, depending on what SetTabulationSwitch has determined.
            </summary>
            <param name="tabulationIndex">The tabulation to check for, the index is the number the tabulation was added to the process definition</param>
            <returns>true if the tabulation provided should be tabulated, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataValueExecute">
            <summary>
            This class is used to define how to retrieve values for a specific tabulation within a CrossTab when the CrossTab is being executed.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataValueExecute.#ctor(WebReports.Api.Reports.CellFormula)">
            <summary>
            Initialize a new CrossTabProcessDataValueExecute object
            </summary>
            <param name="formula">The formula that should be used for retrieving the current value of what should be tabulated</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataValueExecute.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of data that should be tabulated.
            </summary>
            <param name="valueProvider">The data access object</param>
            <returns>The value of data that should be tabulated</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabExecute">
            <summary>
            This class contains the functions to build a CrossTab presentation for purposes of executing a CrossTab within a report
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabExecute.CrossTabDataGroup">
            <summary>
            Each CrossTab has a definition and one or more CrossTabData instances. An instance is saved everytime the section associated
            with the CrossTab breaks. We hold the instances in a queue for later retrieval, the last one is "the working one".
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.UpdateVariableProvider(System.String[],System.String[])">
            <summary>
            Update the sectionVariableValueProvider stored in this object
            </summary>
            <param name="keys">The set of variable tokens</param>
            <param name="values">Corresponding set of values</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTabCollection)">
            <summary>
            Initialize a new CrossTabExecute object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="crossTabs">The CrossTabs to collect data for</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabExecute.NumColumnsRequired">
            <summary>
            Retrieve the number of columns required for this execution, based on all the CrossTabData that has been collected thusfar.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.Process(System.Int32,WebReports.Api.ExecuteData.ExecuteDataTable)">
            <summary>
            Process the current data and collect into the CrossTab specified
            </summary>
            <param name="id">The id of the CrossTab to collect data in</param>
            <param name="executeDt"> The data to capture from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.Save(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Save the CrossTab data collected for later processing. Any subsequent CrossTabDataCollector.Process call will collect data
            into a new pool.
            </summary>
            <param name="crossTab">The CrossTab whose data should be saved (and re-initialize for more processing)</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.FillCrossTab(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.Reports.ExecuteCellCollection,WebReports.Api.Export.IExporter,WebReports.Api.Reports.SectionVariableValueProvider,System.Int32)">
            <summary>
            Retrieve the CrossTab data most earliest collected for a given CrossTab and fill the provided cellCollection. Once a 
            CrossTab is retrieved it is removed from the collector, subsequent calls will give you the next most earliest collected.
            </summary>
            <param name="crossTab">The CrossTab to fill the cellCollection with</param>
            <param name="cellCollection">The collection of cells to fill</param>
            <param name="exporter">The exporter to provide the cell collections representing the CrossTab</param>
            <param name="startRow">The row to start within the <paramref name="cellCollection"/></param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.FillCrossTabHeader(WebReports.Api.Reports.ExecuteCellCollection,System.Int32)">
            <summary>
            Retrieve the CrossTab header of the current CrossTab being filled by FillCrossTab.
            </summary>
            <param name="cellCollection">The cell collection to fill with the CrossTab header</param>
            <param name="startRow">The row to start within the <paramref name="cellCollection"/></param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabExecute.NumRowsInCurrentHeader">
            <summary>
            Retrieve the number of rows that exist in the current CrossTab being filled by FillCrossTab.
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabExecute.ShouldWriteHeaderOnPage">
            <summary>
            Whether the current CrossTab being filled by FillCrossTab should have it's header written at the start of a new page.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetTotalCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader,System.String)">
            <summary>
            Set the total cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <param name="value">The value of the header cell being totalled</param>
            <returns>true if this total cell should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetHeaderStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if this header determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetTotalHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetExecuteCellData(WebReports.Api.Reports.Cell,WebReports.Api.Reports.Cell,System.String)">
            <summary>
            Provides a common method which sets text and style for incoming executeCell based on incoming sourceCell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if this sourceCell determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetExecuteAdjustmentCellData(WebReports.Api.Reports.Cell,WebReports.Api.Reports.Cell)">
            <summary>
            Provides a common method which sets style for incoming adjustment executeCell based on incoming sourceCell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.SetTabStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a tabulation cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="rowHeader">The row header this tabulation is derived from</param>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if this tabulation determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.IsSuppressed(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the column header identified should be suppressed
            </summary>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if the column header should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.IsHeaderPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header cell should cause a page break, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabExecute.IsTotalPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header total should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header total cell should cause a page break, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabBuild">
            <summary>
            This class contains the functions to build a CrossTab presentation for purposes of adding a CrossTab to a report
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.#ctor(WebReports.Api.Common.PageInfo)">
            <summary>
            Create the CrossTab build object
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.UpdateVariableProvider(System.String[],System.String[])">
            <summary>
            Update the sectionVariableValueProvider stored in this object
            </summary>
            <param name="keys">The set of variable tokens</param>
            <param name="values">Corresponding set of values</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.Build(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Build a CrossTab
            </summary>
            <param name="crossTab">The CrossTab to build</param>
            <returns>A collection of cells which will contain the CrossTab in it's entirety</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetTotalCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader,System.String)">
            <summary>
            Set the total cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <param name="value">The value of the header cell being totalled</param>
            <returns>true if this total cell should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetHeaderStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if this header determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetTotalHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.SetTabStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a tabulation cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="rowHeader">The row header this tabulation is derived from</param>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if this tabulation determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.IsSuppressed(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the column header identified should be suppressed
            </summary>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if the column header should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.IsHeaderPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header cell should cause a page break, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabBuild.IsTotalPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header total should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header total cell should cause a page break, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.ICrossTabPresentationStyle">
            <summary>
            This interface defines the callback mechanism for setting cells and cell styles while building the CrossTab presentation
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.UpdateVariableProvider(System.String[],System.String[])">
            <summary>
            Update the sectionVariableValueProvider stored in this object
            </summary>
            <param name="keys">The set of variable tokens</param>
            <param name="values">Corresponding set of values</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetLabelCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the label cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetTotalCell(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader,System.String)">
            <summary>
            Set the total cell information
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <param name="value">The value of the header cell being totalled</param>
            <returns>true if this total cell should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetHeaderStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if this header determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetTotalHeaderRowAdjustmentStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a total header row adjustment cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="header">The header that this cell was produced from</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.SetTabStyle(WebReports.Api.Reports.Cell,WebReports.Api.Reports.ReportCrossTabTabulation,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Set the cell style information for a tabulation cell
            </summary>
            <param name="cell">The cell to set</param>
            <param name="tabulation">The tabulation that this cell was produced from</param>
            <param name="rowHeader">The row header this tabulation is derived from</param>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if this tabulation determined the row should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.IsSuppressed(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the column header identified should be suppressed
            </summary>
            <param name="colHeader">The column header this tabulation is derived from</param>
            <returns>true if the column header should be suppressed, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.IsHeaderPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header cell should cause a page break, false otherwise</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.ICrossTabPresentationStyle.IsTotalPageBreak(WebReports.Api.Reports.ReportCrossTabHeader)">
            <summary>
            Determine if the header total should have a pagebreak before it
            </summary>
            <param name="header">The header that this cell was produced from</param>
            <returns>true if the header total cell should cause a page break, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabPresentation">
            <summary>
            This class is reponsible for processing a CrossTab and creating the appropriate report representation
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.TotalNumberColumnsRequired(WebReports.Api.CrossTab.CrossTabData)">
            <summary>
            Retrieve the number of column cells required for a given CrossTabData object
            </summary>
            <param name="crossTabData">The CrossTabData object to calculate the number of columns for</param>
            <returns>The number of columns required to present this CrossTabData object in report form</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.ColSpanLastRowHeader(WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Retrieve the number of column cells the last row header will span
            </summary>
            <param name="crossTab">The CrossTab to calculate the colspan for</param>
            <returns>The number of columns the last row header will span</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.NumberItems(WebReports.Api.CrossTab.CrossTabDataHeaderNode,System.Int32,System.Int32)">
            <summary>
            Retrieve the number of items that exist under a given data header node.
            </summary>
            <param name="node">The data header node to calculate for</param>
            <param name="numCellsPerBranch">The number of cells to add to the data header node if the data node is a branch</param>
            <returns>The number of cells required for a given data header node</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.#ctor(WebReports.Api.CrossTab.CrossTabData,WebReports.Api.CrossTab.ICrossTabPresentationStyle)">
            <summary>
            Create a new instance of the presentation processor
            </summary>
            <param name="crossTabData">The CrossTabData object that contains the CrossTab data to present</param>
            <param name="style">The presentation style callback</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.PresentCrossTab(WebReports.Api.Common.PageInfo)">
            <summary>
            Present a CrossTab in its entirety, returning a collection of cell's which represents the CrossTab
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <returns>The collection of cells which represent the CrossTab presentation</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.ExportCrossTab(WebReports.Api.Common.PageInfo,WebReports.Api.Export.IExporter,WebReports.Api.Reports.ExecuteCellCollection,System.Int32,System.Int32)">
            <summary>
            Export a CrossTab to the exporter provided. This function uses a callback mechanism (unlike PresentCrossTab which returns the entire CrossTab at once) which allows for much larger
            CrossTabs to be processed.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="exporter">The exporter to pass the CrossTab to as it is being built</param>
            <param name="table">A collection of cells which contain a static portion of where the CrossTab lies on the report, this is used if there are items to the left and/or above the CrossTab</param>
            <param name="startRow">The row number within table the CrossTab should be placed at</param>
            <param name="startCol">The column number within table the CrossTab should be placed at</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.FillCrossTabHeader(WebReports.Api.Reports.ExecuteCellCollection,System.Int32,System.Int32)">
            <summary>
            Fill a collection of cells with just the header of the CrossTab.
            </summary>
            <param name="table">The collection of cells to fill with the CrossTab header, the number of columns must be at least TotalNumberColumnsRequired and the number of rows must be at least NumberRowsInHeader.</param>
            <param name="startRow">The row number in the table to start filling with CrossTab data.</param>
            <param name="startCol">The column number in the table to start filling with CrossTab data.</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabPresentation.NumberRowsInHeader">
            <summary>
            Retrieve the number of row cells required for the header of a given CrossTabData object.
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabPresentation.StartColumn">
            <summary>
            Retrieve the column this CrossTab should start in.
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabPresentation.WriteHeaderPerPage">
            <summary>
            Retrieve whether the header for this CrossTab should be displayed each page.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.FillCrossTabHeader(WebReports.Api.Reports.ExecuteCellCollection,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fill a collection of cells with just the header of the CrossTab.
            </summary>
            <param name="table">The collection of cells to fill with the CrossTab header. The table is assumed to be big enough.</param>
            <param name="startRow">The row number in the table to start filling with CrossTab data.</param>
            <param name="startCol">The column number in the table to start filling with CrossTab data.</param>
            <param name="calculateForData">When true, this processing will do some additional calculating required for subsequent calls to FillCrossTabData</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.FillCrossTabData(WebReports.Api.Export.IExporter,WebReports.Api.Reports.ExecuteCellCollection,System.Int32,System.Int32)">
            <summary>
            Fill a collection of cells with the CrossTab data. Note FillCrossTabHeader with calculateForData=true must be called at least once before this method.
            </summary>
            <param name="exporter">The exporter to pass the CrossTab to as it is being built</param>
            <param name="table">The collection of cells to fill with the CrossTab data. The table is assumed to be big enough.</param>
            <param name="startRow">The row number in the table to start filling with CrossTab data.</param>
            <param name="startCol">The column number in the table to start filling with CrossTab data.</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.FillCrossTabColumnHeader(WebReports.Api.Reports.ExecuteCellCollection,System.Int32,WebReports.Api.CrossTab.CrossTabDataHeaderNode,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fill in a header column, and all header columns below this one (recursively).
            </summary>
            <param name="table">The collection of cells to fill with the CrossTab header.</param>
            <param name="headerNum">The header number to fill from</param>
            <param name="node">The header data node whose children make up this header</param>
            <param name="rowIndex">The row index into table to start this header</param>
            <param name="colIndex">The column index into table to start this header</param>
            <param name="calculateForData">When true, this processing will do some additional calculating required for subsequent calls to FillCrossTabData</param>
            <returns>The number of column cells this column header spans</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.FillCrossTabRowHeader(WebReports.Api.Export.IExporter,WebReports.Api.Reports.ExecuteCellCollection,System.Int32,WebReports.Api.CrossTab.CrossTabDataHeaderNode,System.Int32,System.Int32)">
            <summary>
            Fill in a header row as well as all tabulation data associated with it, and all header rows below this one (recursively).
            </summary>
            <param name="exporter">The exporter to pass the CrossTab to as it is being built</param>
            <param name="table">The collection of cells to fill with the CrossTab data.</param>
            <param name="headerNum">The header number to fill from</param>
            <param name="node">The header data node whose children make up this header</param>
            <param name="rowIndex">The row index into table to start this header</param>
            <param name="colIndex">The column index into table to start this header</param>
            <returns>The number of row cells this row header spans</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.FillCrossTabTabulationData(WebReports.Api.Reports.ExecuteCellCollection,WebReports.Api.CrossTab.CrossTabDataHeaderNode,System.Int32)">
            <summary>
            Fill in a row's tabulation data.
            </summary>
            <param name="table">The collection of cells to fill with the CrossTab data.</param>
            <param name="rowNode">The row node of data to fill</param>
            <param name="rowIndex">The row index into table to write this tabulation data</param>
            <returns>The number of row cells this tabulation data spans</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.CreateCells(WebReports.Api.Common.PageInfo,System.Int32,System.Int32)">
            <summary>
            Create and initialize a collection of cells.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="maxRows">The maximum number of rows for this table</param>
            <param name="numCellCols">The number of columns for this table</param>
            <returns>The collection of cells, all cells initialized appropriately</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabPresentation.Export(WebReports.Api.Export.IExporter,WebReports.Api.Reports.ExecuteCellCollection,System.Int32,System.Boolean)">
            <summary>
            Export the collection of cells provided, if the static merge table exists the results will be merged appropriately.
            </summary>
            <param name="exporter">The exporter to pass the CrossTab to as it is being built</param>
            <param name="cells">The collection of cells to export</param>
            <param name="numRowsToExport">The number of rows to export to the exporter</param>
            <returns>true when data was exported, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabData">
            <summary>
            This class contains all data collected for a given CrossTab.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabData.CreateCrossTabData(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.CrossTab.CrossTabProcessDefinition)">
            <summary>
            Create a new CrossTabData object, the object returned depends on the type of CrossTab (matrix or list)
            </summary>
            <param name="crossTab">The CrossTab to create this data for</param>
            <param name="processDef">The process definition for how the data should be collected</param>
            <returns>The CrossTabData object</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabData.#ctor(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.CrossTab.CrossTabProcessDefinition)">
            <summary>
            Initialize a new CrossTabData object. Initiating a CrossTabData object represents a matrix of data
            </summary>
            <param name="crossTab">The CrossTab to create this data for</param>
            <param name="processDef">The process definition for how the data should be collected</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabData.CrossTab">
            <summary>
            Retrieve the CrossTab that this data is associated with
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabData.RootColumn">
            <summary>
            Retrieve the root column header node for this data. The root node has no value, but have children which 
            represent the data for the first column header. If there are two column headers, each child will have its own
            children (and so forth). This node should also be used in GetDataNode when the tabulation node required is the
            grand total column tabulation.
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabData.RootRow">
            <summary>
            Retrieve the root rowheader node for this data. The root node has no value, but have children which 
            represent the data for the first row header. If there are two row headers, each child will have its own
            children (and so forth). This node should also be used in GetDataNode when the tabulation node required is the
            grand total row tabulation.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabData.Process(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Process data for collection
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabData.GetDataNode(WebReports.Api.CrossTab.CrossTabDataHeaderNode,WebReports.Api.CrossTab.CrossTabDataHeaderNode)">
            <summary>
            Retrieve the data node which represents the data for the cross-tabulation of a row node and a column node. Providing
            a data header node at a level which is not the "end" node will result in a subtotal or grand total tabulation.
            </summary>
            <param name="rowNode">The row node for the data</param>
            <param name="columnNode">The column node for the data</param>
            <returns>The data node, or null if no such data exists (there was no cross-related data).</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabData.GetDataNode(WebReports.Api.CrossTab.CrossTabDataHeaderNode,WebReports.Api.CrossTab.CrossTabDataHeaderNode,System.Boolean)">
            <summary>
            Retrieve the data node which represents the data for the cross-tabulation of a row node and a column node. If the node
            doesn't exist, it will be created if indicated so.
            </summary>
            <param name="level1HdrNode">The first axis node for the data</param>
            <param name="level2HdrNode">The second axis node for the data</param>
            <param name="createIfNull">If there isn't a data node for this cross tabulation, one will be created</param>
            <returns>The data node, or null if no such data exists (there was no cross-related data) and createIfNull is false.</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabData.GetHeaderDictionary(WebReports.Api.CrossTab.CrossTabDataHeaderNode,System.Boolean)">
            <summary>
            Retrieve the second level lookup dictionary which which represents the data for the first axis node specified. If the node
            doesn't exist, it will be created if indicated so.
            </summary>
            <param name="level1HdrNode">The first axis node for the data</param>
            <param name="createIfNull">If there isn't a dictionary for this first level node, one will be created</param>
            <returns>The second level lookup dictionary, or null if no such data exists (there was no data) and createIfNull is false.</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabListData">
            <summary>
            This class contains all data collected for a given CrossTab, it override certine CrossTabData functions to allow for a CrossTab which does not
            have both a row header and a column header (creating a list of data instead). TODO: This isn't fully supported.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabListData.#ctor(WebReports.Api.Reports.ReportCrossTab,WebReports.Api.CrossTab.CrossTabProcessDefinition)">
            <summary>
            Create a new CrossTabListData object
            </summary>
            <param name="crossTab">The CrossTab to create this data for</param>
            <param name="processDef">The process definition for how the data should be collected</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabListData.Process(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Process data for collection
            </summary>
            <param name="cellVariableDataProvider">The data provider</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabListData.GetDataNode(WebReports.Api.CrossTab.CrossTabDataHeaderNode,WebReports.Api.CrossTab.CrossTabDataHeaderNode)">
            <summary>
            Retrieve the data node which represents the data for the cross-tabulation of a row node and a column node.
            </summary>
            <param name="rowNode">The row node for the data</param>
            <param name="columnNode">The column node for the data</param>
            <returns>The data node, or null if no such data exists (there was no data).</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabNullHeaderDef">
            <summary>
            This class is as a special header definition for when dealing with a CrossTab list. Only the root node of the non-existent
            header in the list should have this as its definition.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabNullHeaderDef.#ctor">
            <summary>
            Initialize a null header definition
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabNullHeaderDef.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of this header given the current data row. Returns an empty string.
            </summary>
            <param name="cellVariableDataProvider">The data access object</param>
            <returns>The string value</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataHeaderNode">
            <summary>
            A data header node contains a value and children of 0 or more data header nodes (like a tree). A data header node has a unique
            value amongst its siblings, making every path from root data header node to leaf data header node a unique chain of values.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataHeaderNode.#ctor">
            <summary>
            Initialize a new CrossTabDataheaderNode object for when it is a root node *AND* the root node has no header (CrossTab list dummy node)
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataHeaderNode.#ctor(System.Int32)">
            <summary>
            Initialize a new CrossTabDataheaderNode object for when it is a nonroot node *AND* the root node has no header (CrossTab list dummy node)
            </summary>
            <param name="value">The dummy value of the header node</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataHeaderNode.#ctor(System.String,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition,System.Boolean)">
            <summary>
            Initialize a new CrossTabDataHeaderNode object for when there is a header
            </summary>
            <param name="value">The value of this node (when null, this is the root node)</param>
            <param name="childHeaderDef">The header definition which defines how this node's children gets its values (when null, this node has no children)</param>
            <param name="hasTotal">Whether this node should have a total aggregation</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataHeaderNode.Value">
            <summary>
            Retrieve the value for this node
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataHeaderNode.HasTotal">
            <summary>
            Retrieve whether this data node has a total associated with it
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataHeaderNode.Children">
            <summary>
            Retrieve this nodes children nodes. If this node has no children, an array of length 0 is returned
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataHeaderNode.ChildrenDictionary">
            <summary>
            Retrieve this nodes children nodes as a dictionary, keyed by the value of the child node.
            </summary>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataHeaderNode.ChildrenHeaderDef">
            <summary>
            Retrieve the header definition of this node's children. Will be null if this node cannot have children
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataHeaderNode.Process(WebReports.Api.Reports.ICellVariableValueProvider,System.Collections.Generic.List{WebReports.Api.CrossTab.CrossTabDataHeaderNode})">
            <summary>
            Process data for collection
            </summary>
            <param name="cellVariableDataProvider">The data access object</param>
            <param name="nodes">The list of nodes that are involved in the processing path (will be added to)</param>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabDataDataNode">
            <summary>
            A data data node contains all tabulation buckets for a unique CrossTabulation.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataNode.#ctor(System.Collections.Generic.List{WebReports.Api.Reports.ReportCrossTabTabulation.TabulationMethod})">
            <summary>
            Initialize a new CrossTabDataDataNode object
            </summary>
            <param name="method">The tabulation method for each tabulation that make up this data node</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabDataDataNode.Process(WebReports.Api.CrossTab.CrossTabProcessDataDefinition,WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Process data for collection, it is assumed CrossTabProcessDataDefinition.SetTabulationSwitch has been called
            </summary>
            <param name="dataDef">The data definition object</param>
            <param name="cellVariableDataProvider">The data access object</param>
        </member>
        <member name="P:WebReports.Api.CrossTab.CrossTabDataDataNode.Values">
            <summary>
            Retrieve the values of this tabulation, each entry in the array is a tabulation value
            </summary>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDefinitionBuild">
            <summary>
            This class contains the process definition for building a cross tab.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionBuild.#ctor(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTab)">
            <summary>
            Create the processing definition for the supplied CrossTab.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="crossTab">The cross tab to create a process definition for</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionBuild.CreateHeaderDefinition(WebReports.Api.Common.PageInfo,WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Create a header process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
            <returns>The header process definition</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDefinitionBuild.CreateDataDefinition(WebReports.Api.Common.PageInfo)">
            <summary>
            Create a data process definition
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <returns>The data process definition</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionBuild">
            <summary>
            This class represents the data definition for building a given CrossTab Header (row or column).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionBuild.#ctor(WebReports.Api.Reports.ReportCrossTabHeader,WebReports.Api.CrossTab.CrossTabProcessHeaderDefinition)">
            <summary>
            Initialize a new CrossTabBuildHeaderDefinition object
            </summary>
            <param name="header">This process definition CrossTab header</param>
            <param name="child">This header's child header, can be null if this header has no child</param>
            <param name="isForPreview">When true, this process definition is for creating a preview</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessHeaderDefinitionBuild.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of this header
            </summary>
            <param name="cellVariableDataProvider">The data values to retrieve the value from</param>
            <returns>The current value</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionBuild">
            <summary>
            This class represents the data definition for a given CrossTab Data (tabulation).
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionBuild.#ctor">
            <summary>
            Initialize a new CrossTabPreviewDataDefinition object
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionBuild.CreateTabulationMethod(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Create the tabulation method for a given tabulation. This always returns a tabulation method of "None" to allow for building the CrossTab in the report designer.
            </summary>
            <param name="tabulation">The tabulation to determine the tabulation method for.</param>
            <returns>The tabulation method of "None" for the tabulation provided</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataDefinitionBuild.CreateDataValueProcessor(WebReports.Api.Reports.ReportCrossTabTabulation)">
            <summary>
            Create the value processor for a given tabulation.
            </summary>
            <param name="tabulation">The tabulation to determine the tabulation method for.</param>
            <returns>The value processor for the tabulation provided</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabProcessDataValueBuild">
            <summary>
            This class is used to define how to retrieve values for a specific tabulation within a CrossTab when the CrossTab is being built.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataValueBuild.#ctor(System.String)">
            <summary>
            Initialize a new CrossTabProcessDataValueBuild object
            </summary>
            <param name="text">The text that should be returned when requested</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabProcessDataValueBuild.GetValue(WebReports.Api.Reports.ICellVariableValueProvider)">
            <summary>
            Retrieve the current value of data that should be tabulated. This always returns the text provided on the constructor.
            </summary>
            <param name="valueProvider">The data access object (not used)</param>
            <returns>The value of data that should be tabulated</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabSorter">
            <summary>
            This abstract class represents a CrossTab sorting heuristic. Each unique instance extends this base class, there should be one for each ReportCrossTabHeader.CrossTabSortMethod defined.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSorter.GetSorter(WebReports.Api.Reports.ReportCrossTabHeader.CrossTabSortMethod,WebReports.Api.wrSortDirection,System.Boolean,WebReports.Api.CrossTab.CrossTabData)">
            <summary>
            Create and retrieve new sorter instance, based on the parameters provided.
            </summary>
            <param name="sortMethod">The method for sorting the CrossTab</param>
            <param name="sortDirection">The direction of the sort</param>
            <param name="isRow">Whether this sorter will be sorting a row header (true) or a column header (false)</param>
            <param name="crossTabData">The CrossTab data that will be sorted</param>
            <returns>The CrossTabSorter that will sort the header appropriately</returns>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSorter.#ctor(WebReports.Api.wrSortDirection)">
            <summary>
            Initialize a new CrossTabSorter instance
            </summary>
            <param name="sortDirection">The direction of the sort</param>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabSortHeaderStringValue">
            <summary>
            This sorting class sorts a CrossTab header by its header value, treating the value as a string
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSortHeaderStringValue.#ctor(WebReports.Api.wrSortDirection)">
            <summary>
            Initialize a new CrossTabSortHeaderStringValue instance
            </summary>
            <param name="sortDirection">The direction of the sort</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSortHeaderStringValue.Compare(WebReports.Api.CrossTab.CrossTabDataHeaderNode,WebReports.Api.CrossTab.CrossTabDataHeaderNode)">
            <summary>
            Performs a comparison of two objects of two CrossTabDataHeaderNode objects and returns a value indicating whether one object is less
            than, equal to, or greater than the other.
            </summary>
            <param name="node1">The first node to compare</param>
            <param name="node2">The second node to compare</param>
            <returns>A signed integer that indicates the relative values of x and y</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabSortHeaderNumberValue">
            <summary>
            This sorting class sorts a CrossTab header by its header value, treating the value as a number. If the header value is not a number it falls back to a string comparison.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSortHeaderNumberValue.#ctor(WebReports.Api.wrSortDirection)">
            <summary>
            Initialize a new CrossTabSortHeaderNumberValue instance
            </summary>
            <param name="sortDirection">The direction of the sort</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSortHeaderNumberValue.Compare(WebReports.Api.CrossTab.CrossTabDataHeaderNode,WebReports.Api.CrossTab.CrossTabDataHeaderNode)">
            <summary>
            Performs a comparison of two objects of two CrossTabDataHeaderNode objects and returns a value indicating whether one object is less
            than, equal to, or greater than the other.
            </summary>
            <param name="node1">The first node to compare</param>
            <param name="node2">The second node to compare</param>
            <returns>A signed integer that indicates the relative values of x and y</returns>
        </member>
        <member name="T:WebReports.Api.CrossTab.CrossTabSortTabularGrandTotal">
            <summary>
            This sorting class sorts a CrossTab header by its tabulated grand total value. If there is no tabulated grand total or the grand total isn't a number, it falls back to a string comparison.
            </summary>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSortTabularGrandTotal.#ctor(WebReports.Api.wrSortDirection,WebReports.Api.CrossTab.CrossTabData,System.Boolean)">
            <summary>
            Initialize a new CrossTabSortTabularGrandTotal instance
            </summary>
            <param name="sortDirection">The direction of the sort</param>
            <param name="crossTabData">The CrossTab data that will be sorted</param>
            <param name="isRow">Whether this sorter will be sorting a row header (true) or a column header (false)</param>
        </member>
        <member name="M:WebReports.Api.CrossTab.CrossTabSortTabularGrandTotal.Compare(WebReports.Api.CrossTab.CrossTabDataHeaderNode,WebReports.Api.CrossTab.CrossTabDataHeaderNode)">
            <summary>
            Performs a comparison of two objects of two CrossTabDataHeaderNode objects and returns a value indicating whether one object is less
            than, equal to, or greater than the other.
            </summary>
            <param name="node1">The first node to compare</param>
            <param name="node2">The second node to compare</param>
            <returns>A signed integer that indicates the relative values of x and y</returns>
        </member>
        <member name="M:WebReports.Api.Gauges.Gauge.GetParameters(WebReports.Api.Reports.ReportParameterCollection)">
            <summary>
            Gets parameters used in this widget so the report object can be aware of them.  This makes sure
            the parameters will show up in the parameters dialog if prompting, etc.
            </summary>
            <param name="parameters">The collection to be augmented with this widget's parameters.</param>
        </member>
        <member name="P:WebReports.Api.Gauges.Gauge.Name">
            <summary>
            The string sent to the client so the client knows what type of widget this is
            </summary>
        </member>
        <member name="T:WebReports.Api.wrFilterAndOrWithNext">
            <summary>
            The possible ways to concatenate two filters together.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrFilterAndOrWithNext.And">
            <summary>
            The first filter is ANDed with the next filter.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrFilterAndOrWithNext.Or">
            <summary>
            The first filter is ORed with the next filter.
            </summary>
        </member>
        <member name="T:WebReports.Api.wrScheduleManagerViewLevel">
            <summary>
            Note that the values must be in rising value so higher permissions have higher values
            </summary>
        </member>
        <member name="T:WebReports.Api.wrCacheVisibility">
            <summary>
            Execution Cache Visibility
            [EX-10007]
            </summary>
        </member>
        <member name="T:WebReports.Api.wrApiAction">
            <summary>
            The API actions supported by eWebReports when the application is accessed.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.Default">
            <summary>
            If a Report object is loaded then this is equivalent to ExecuteReport, otherwise this is equivalent to Home.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.Home">
            <summary>
            Open the home page.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.ExecuteReport">
            <summary>
            Execute the Report object currently loaded.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.EditReport">
            <summary>
            Edit the Report object currently loaded.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.NewReport">
            <summary>
            Open the New Report Wizard for an Advanced Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.NewAdvancedReport">
            <summary>
            Open the New Report Wizard for an Advanced Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.NewCrossTabReport">
            <summary>
            Open the New Report Wizard for a CrossTab Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.NewExpressReport">
            <summary>
            Open the New Report Wizard for an Express Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.NewDashboardReport">
            <summary>
            Create a new Dashboard Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.NewExpressView">
            <summary>
            Create a new Dashboard Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.ScheduleReport">
            <summary>
            Create a new Scheduled Report.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrApiAction.ScheduledReportsManager">
            <summary>
            Show Scheduled Reports Manager.
            </summary>
        </member>
        <member name="T:WebReports.Api.wrUiManagedShowType">
            <summary>
            The desired behavior for UI elements that can be contextually shown or hidden .
            </summary>
        </member>
        <member name="F:WebReports.Api.wrUiManagedShowType.Auto">
            <summary>
            Allow the Exago runtime to deteremine when to show the managed element.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrUiManagedShowType.Always">
            <summary>
            Always show the managed element
            </summary>
        </member>
        <member name="F:WebReports.Api.wrUiManagedShowType.Never">
            <summary>
            Always hide the managed element.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrUiManagedShowType.Default">
            <summary>
            This value should only be used in Report-specific or other non-global applications.  It indicates that Exago should use the global Admin Setting.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrExpressViewJoinAlgorithm.Legacy">
            <summary>
            Legacy represents the old join path algorithm used by ExpressView(which does not require you to add categories in join order like with advanced reports)
            This algorithm is slow and does not treat Join weights right.
            </summary>
        </member>
        <member name="F:WebReports.Api.wrExpressViewJoinAlgorithm.Standard">
            <summary>
            Standard is the new join path algorithm that treats join weights the way they deserve(as a cost instead of a suggestion).
            </summary>
        </member>
        <member name="T:WebReports.Api.wrDockLocation">
            <summary>
            Where the dock window is anchored to
            </summary>
        </member>
        <member name="T:WebReports.Api.DataFieldsDisplay">
            <summary>
            What data fields should be enabled in the data fields tree, in relation to the fields on the report
            </summary>
        </member>
        <member name="F:WebReports.Api.DataFieldsDisplay.All">
            <summary>
            Allow any field from any source to be added to the report
            </summary>
        </member>
        <member name="F:WebReports.Api.DataFieldsDisplay.AnyPath">
            <summary>
            Allow user to add any field that can be joined through any join path to fields that are already on the report
            </summary>
        </member>
        <member name="F:WebReports.Api.DataFieldsDisplay.Direct">
            <summary>
            Only allow user to add fields that can be directly joined to fields that exist on the report
            </summary>
        </member>
        <member name="T:WebReports.Api.wrTutorialAvailability">
            <summary>
            Whether a tutorial will be shown by default and enabled or disabled
            </summary>
        </member>
        <member name="F:WebReports.Api.wrTutorialAvailability.Enabled">
            <summary>
            The tutorial is enabled and shown by default
            </summary>
        </member>
        <member name="F:WebReports.Api.wrTutorialAvailability.EnabledOff">
            <summary>
            The tutorial can be shown, but is not by default
            </summary>
        </member>
        <member name="F:WebReports.Api.wrTutorialAvailability.Disabled">
            <summary>
            The tutorial is not shown an cannot be 
            </summary>
        </member>
        <member name="T:WebReports.Api.wrLinkedReportDisplay">
            <summary>
            How the window appears when a linked report cell is clicked
            </summary>
        </member>
        <member name="F:WebReports.Api.wrLinkedReportDisplay.Cursor">
            <summary>
            Window will display at the cursor
            </summary>
        </member>
        <member name="F:WebReports.Api.wrLinkedReportDisplay.ScreenCenter">
            <summary>
            Window will display at the center of the screen
            </summary>
        </member>
        <member name="F:WebReports.Api.wrLinkedReportDisplay.NewTab">
            <summary>
            A new tab will be opened for the linked report
            </summary>
        </member>
        <member name="T:WebReports.Api.ObjectAffinity">
            <summary>
            Used to indicate if objects are Global or associated with an individual report.
            These are currently used for Entity and Join objects defined in the API which are then attached
            to the specific report.
            </summary>
        </member>
        <member name="M:WebReports.Api.Roles.DataObjectRowCollection.GetDataObjectRow(System.String)">
            <summary>
            Return the first object with the specified name.
            Note that these are search for by DbName
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="T:WebReports.Api.Roles.Folder">
            <summary>
            Summary description for Folder
            </summary>
        </member>
        <member name="T:WebReports.Api.Theme.ReportTheme">
            <summary>
            This abstract class represents the different report themes that can be loaded, as well as static functions to retrieve the themes
            </summary>
        </member>
        <member name="F:WebReports.Api.Theme.ReportTheme.ThemeNameCustom">
            <summary>The theme name for when something isn't using a predefined theme (it's a custom theme)</summary>
        </member>
        <member name="F:WebReports.Api.Theme.ReportTheme.LanguageIdAppend">
            <summary>The string that should be appended to the file name within a language file to languagize a theme name</summary>
        </member>
        <member name="T:WebReports.Api.Theme.ReportTheme.ReportThemeType">
            <summary>
            The types of report themes
            </summary>
        </member>
        <member name="M:WebReports.Api.Theme.ReportTheme.GetThemeList(WebReports.Api.Common.PageInfo,WebReports.Api.Theme.ReportTheme.ReportThemeType)">
            <summary>
            Retrieve a list of themes that are a certain type. Themes are in the installation path "Themes" folder (for eWebReports default
            themes) as well as in the root reports folder (for client specific reports).
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="type">The type of theme to retrieve</param>
            <returns>A list of the available themes for that type</returns>
        </member>
        <member name="M:WebReports.Api.Theme.ReportTheme.GetTheme(WebReports.Api.Common.PageInfo,WebReports.Api.Theme.ReportTheme.ReportThemeType,System.String)">
            <summary>
            Retrieve a theme. This function first checks the root report directory, if it doesn't exist there the installation path "Themes" folder is checked
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="theme">The theme to retrieve</param>
            <returns>The theme, or null if no such theme exists</returns>
        </member>
        <member name="M:WebReports.Api.Theme.ReportTheme.Exists(WebReports.Api.Common.PageInfo,WebReports.Api.Theme.ReportTheme.ReportThemeType,System.String)">
            <summary>
            Determine if a theme exists. This function first checks the root report directory, if it doesn't exist there the installation path "Themes" folder is checked
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="theme">The theme to retrieve</param>
            <returns>true if the theme exists, false otherwise</returns>
        </member>
        <member name="T:WebReports.Api.Theme.CrossTabReportTheme">
            <summary>
            This represents a CrossTab theme. A CrossTab theme must have one CrossTab and all the cells that CrossTab references.
            </summary>
        </member>
        <member name="P:WebReports.Api.Theme.CrossTabReportTheme.CrossTab">
            <summary>
            Retrieve the CrossTab definition for this theme
            </summary>
        </member>
        <member name="P:WebReports.Api.Theme.CrossTabReportTheme.Cells">
            <summary>
            Retreive the cells that define this CrossTab theme
            </summary>
        </member>
        <member name="M:WebReports.Api.Theme.CrossTabReportTheme.Load(WebReports.Api.Common.PageInfo,System.Data.DataSet)">
            <summary>
            Load a CrossTab theme from a given dataset
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="ds">The dataset to load the CrossTab theme from</param>
            <returns>The CrossTab theme object</returns>
        </member>
        <member name="M:WebReports.Api.Theme.CrossTabReportTheme.Save(WebReports.Api.Common.PageInfo,System.Int32,System.String)">
            <summary>
            Save the CrossTab identified by <paramref name="crossTabId"/> in the current report
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="crossTabId">The id whose CrossTab should be saved as a theme</param>
            <param name="name">The name of the theme to save the CrossTab as</param>
        </member>
        <member name="T:WebReports.Api.Theme.ExpressReportTheme">
            <summary>
            This represents an Express theme. A Simple theme must have the cells and rows following the layout of a report built by SimpleReportBuilder.
            </summary>
        </member>
        <member name="M:WebReports.Api.Theme.ExpressReportTheme.Load(WebReports.Api.Common.PageInfo,System.Data.DataSet)">
            <summary>
            Load a Simple theme from a given dataset
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="ds">The dataset to load the Express Report theme from</param>
            <returns>The Express Report theme object</returns>
        </member>
        <member name="M:WebReports.Api.Theme.ExpressReportTheme.Save(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Save the simple report as a theme.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the theme to save the Express Report as</param>
        </member>
        <member name="T:WebReports.Api.Theme.ExpressViewTheme">
            <summary>
            This represents an ExpressView theme. An ExpressView theme must have formatting defined for the group headers, group footers, 
            column headers, detail columns, and report footers of an ExpressView
            </summary>
        </member>
        <member name="M:WebReports.Api.Theme.ExpressViewTheme.Load(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Load an ExpressView theme from a given dataset
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="ds">The dataset to load the ExpressView theme from</param>
            <returns>The ExpressView theme object</returns>
        </member>
        <member name="M:WebReports.Api.Theme.ExpressViewTheme.Save(WebReports.Api.Common.PageInfo,WebReports.Api.ExpressView.ExpressViewReportFormatting,System.String)">
            <summary>
            Save the ExpressView as a theme.
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="name">The name of the theme to save the ExpressView as</param>
        </member>
        <member name="M:WebReports.Api.Theme.ExpressViewTheme.LoadData(WebReports.Api.Common.PageInfo,System.String)">
            <summary>
            Loads the theme specified in the dataset into the ExpressView theme
            </summary>
            <param name="ds">Dataset containing the desired theme</param>
        </member>
        <member name="T:WebReports.Api.Theme.ColorTheme">
            <summary>
            This represents a color theme: A list of CSS colors used for charts or maps
            </summary>
        </member>
        <member name="P:WebReports.Api.Theme.ColorTheme.Colors">
            <summary>
            Retrieve the colors for this theme
            </summary>
        </member>
        <member name="M:WebReports.Api.Theme.ColorTheme.Load(WebReports.Api.Common.PageInfo,System.String[])">
            <summary>
            Loads a Color theme from a given dataset
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="colors">The array of CSS color values to load into the theme</param>
            <returns>The ColorTheme object</returns>
        </member>
        <member name="M:WebReports.Api.Theme.ColorTheme.GetColors(WebReports.Api.Common.PageInfo,System.String,WebReports.Api.Theme.ReportTheme.ReportThemeType)">
            <summary>
            Gets an array of hex colors (#XXXXXX) from a given theme
            </summary>
            <param name="pageInfo">The PageInfo object</param>
            <param name="themeName">The name of the theme to read from, or a value from ColorTheme.ColorType</param>
            <param name="themeType">The theme type</param>
        </member>
        <member name="M:WebReports.Api.Theme.ColorTheme.GetThemeListObj(WebReports.Api.Common.PageInfo)">
            <summary>
            Gets a dictionary where the keys are theme name, and the values are theme colors in Hex RGB
            </summary>
            <param name="pageInfo">The PageInfo object</param>
        </member>
        <member name="T:WebReports.Api.XmlDiffPatch.XmlDiffOptions">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiffOptions.uex" path="docs/doc[@for=&quot;XmlDiffOptions&quot;]/*" />
            <summary>
            Options for comparing XML documents. 
            </summary>
        </member>
        <member name="T:WebReports.Api.XmlDiffPatch.XmlDiffAlgorithm">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiffAlgorithm.uex" path="docs/doc[@for=&quot;XmlDiffAlgorithm&quot;]/*" />
            <summary>
              Types of algorithms that can be used for comparing XML documents by XmlDiff. Auto means XmlDiff will
              automatically decide which algorithm to use for the particular case depending on the assumed number 
              of changes.
            </summary>
        </member>
        <member name="T:WebReports.Api.XmlDiffPatch.XmlDiff">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff&quot;]/*" />
            <summary>
               Compares two documents or fragments. 
            </summary>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.XmlDiff1&quot;]/*" />
            <summary>
               Constructs XmlDiff object with default options.
            </summary>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.#ctor(WebReports.Api.XmlDiffPatch.XmlDiffOptions)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.XmlDiff2&quot;]/*" />
            <summary>
               Constructs XmlDiff object with the given options. The values of XmlDiffOptions
               may be combined using the operator '|'.
            </summary>
        </member>
        <member name="F:WebReports.Api.XmlDiffPatch.XmlDiff.NamespaceUri">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.NamespaceUri&quot;]/*" />
            <summary>
               XmlDiff namespace. The diffgram nodes belongs to this namespace.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnoreChildOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnoreChildren&quot;]/*" />
            <summary>
               If true, the order of child nodes of each element will be ignored when comparing 
               the documents/fragments.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnoreComments">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnoreComments&quot;]/*" />
            <summary>
               If true, all comments in the compared documents/fragments will be ignored.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnorePI">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnorePI&quot;]/*" />
            <summary>
               If true, all processing instructions in the compared documents/fragments will be ignored.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnoreWhitespace">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnoreWhitespace&quot;]/*" />
            <summary>
               If true, all whitespace nodes in the compared documents/fragments will be ignored. Also, all
               text nodes and values of attributes will be normalized; whitespace sequences will be replaced
               by single space and beginning and trailing whitespaces will be trimmed.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnoreNamespaces">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnoreNamespace&quot;]/*" />
            <summary>
               If true, the namespaces will be ignored when comparing the names of elements and attributes.
               This also mean that the prefixes will be ignored too as if the IgnorePrefixes option is true.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnorePrefixes">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnorePrefixes&quot;]/*" />
            <summary>
               If true, the prefixes will be ignored when comparing the names of elements and attributes. 
               The namespaces will not ne ignored unless IgnoreNamespaces flag is true.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnoreXmlDecl">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnoreXmlDecl&quot;]/*" />
            <summary>
               If true, the xml declarations will not be compared.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.IgnoreDtd">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.IgnoreDtd&quot;]/*" />
            <summary>
               If true, the xml declarations will not be compared.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.Options">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Options&quot;]/*" />
            <summary>
               Options used when comparing xml documents/fragments.
            </summary>
        </member>
        <member name="P:WebReports.Api.XmlDiffPatch.XmlDiff.Algorithm">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Algorithm&quot;]/*" />
            <summary>
               Algorithm that will be used for XML comparison.
            </summary>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.Compare(System.String,System.String,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Compare1&quot;]/*" />
            <summary>
               Compares two XML documents or fragments.
            </summary>
            <param name="sourceFile">The original xml document or fragment filename</param>
            <param name="changedFile">The changed xml document or fragment filename.</param>
            <param name="bFragments">If true, the passed files contain xml fragments; otherwise the files must contain xml documents.</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.Compare(System.String,System.String,System.Boolean,System.Xml.XmlWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Compare2&quot;]/*" />
            <summary>
               Compares two XML documents or fragments. 
               If the diffgramWriter parameter is not null it will contain the list of changes 
               between the two XML documents/fragments (diffgram).
            </summary>
            <param name="sourceFile">The original xml document or fragment filename</param>
            <param name="changedFile">The changed xml document or fragment filename.</param>
            <param name="bFragments">If true, the passed files contain xml fragments; otherwise the files must contain xml documents.</param>
            <param name="diffgramWriter">XmlWriter object for returning the list of changes (diffgram).</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.Compare(System.Xml.XmlReader,System.Xml.XmlReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Compare3&quot;]/*" />
            <summary>
               Compares two XML documents or fragments.
            </summary>
            <param name="sourceReader">XmlReader representing the original xml document or fragment.</param>
            <param name="changedFile">XmlReaser representing the changed xml document or fragment.</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.Compare(System.Xml.XmlReader,System.Xml.XmlReader,System.Xml.XmlWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Compare4&quot;]/*" />
            <summary>
               Compares two XML documents or fragments.
               If the diffgramWriter parameter is not null it will contain the list of changes 
               between the two XML documents/fragments (diffgram).
            </summary>
            <param name="sourceReader">XmlReader representing the original xml document or fragment.</param>
            <param name="changedFile">XmlReaser representing the changed xml document or fragment.</param>
            <param name="diffgramWriter">XmlWriter object for returning the list of changes (diffgram).</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.Compare(System.Xml.XmlNode,System.Xml.XmlNode)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Compare5&quot;]/*" />
            <summary>
               Compares two XML nodes.
               If the diffgramWriter parameter is not null it will contain the list of changes 
               between the two XML documents/fragments (diffgram).
            </summary>
            <param name="sourceNode">Original XML node</param>
            <param name="changedNode">Changed XML node</param>
            <param name="diffgramWriter">XmlWriter object for returning the list of changes (diffgram).</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.Compare(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.Compare6&quot;]/*" />
            <summary>
               Compares two XML nodes.
               If the diffgramWriter parameter is not null it will contain the list of changes 
               between the two XML documents/fragments (diffgram).
            </summary>
            <param name="sourceNode">Original XML node</param>
            <param name="changedNode">Changed XML node</param>
            <param name="diffgramWriter">XmlWriter object for returning the list of changes (diffgram).</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.ParseOptions(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.ParseOptions&quot;]/*" />
            <summary>
               Translates string representation of XmlDiff options into XmlDiffOptions enum.
            </summary>
            <param name="options">Value of the 'options' attribute of the 'xd:xmldiff' element in diffgram.</param>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlDiff.VerifySource(System.Xml.XmlNode,System.UInt64,WebReports.Api.XmlDiffPatch.XmlDiffOptions,System.UInt64@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlDiff.uex" path="docs/doc[@for=&quot;XmlDiff.VerifySource&quot;]/*" />
            <summary>
               Given a diffgram, this method verifies whether the given document/node is the original
               source document/node for the diffgram. 
            </summary>
            <param name="node">Document/node to be verified.</param>
            <param name="hashValue">Value of the 'srcDocHash' attribute of the 'xd:xmldiff' element in diffgram.
            This is the hash value of the original source document. The document/node is verified if it yields
            the same hash value.</param>
            <param name="options">XmlDiff options selected when the document/node was compared. The hash value 
            of the document/node depends on these options.</param>
            <returns>True if the given document is the original source document for the diffgram.</returns>
        </member>
        <member name="T:WebReports.Api.XmlDiffPatch.XmlPatch">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlPatch.uex" path="docs/doc[@for=&quot;XmlPatch&quot;]/*" />
            <summary>
               XML Patch modifies XML documents or nodes according to the XDL diffgram created by XML Diff.  
            </summary>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlPatch.Patch(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlPatch.uex" path="docs/doc[@for=&quot;XmlPatch.Patch1&quot;]/*" />
            <summary>
               Reads the XDL diffgram from the diffgramFileName and modifies the original XML document
               sourceDoc according to the changes described in the diffgram. 
            </summary>
            <param name="sourceDoc">The original xml document</param>
            <param name="diffgramFileName">XmlReader for the XDL diffgram.</param>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlPatch.Patch(System.String,System.IO.Stream,System.Xml.XmlReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlPatch.uex" path="docs/doc[@for=&quot;XmlPatch.Patch3&quot;]/*" />
            <summary>
               Reads the XDL diffgram from the diffgramFileName and modifies the original XML document
               sourceDoc according to the changes described in the diffgram. 
            </summary>
            <param name="sourceDoc">The original xml document</param>
            <param name="diffgramFileName">XmlReader for the XDL diffgram.</param>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlPatch.Patch(System.Xml.XmlReader,System.IO.Stream,System.Xml.XmlReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlPatch.uex" path="docs/doc[@for=&quot;XmlPatch.Patch3&quot;]/*" />
            <summary>
               Reads the XDL diffgram from the diffgramFileName and modifies the original XML document
               sourceDoc according to the changes described in the diffgram. 
            </summary>
            <param name="sourceDoc">The original xml document</param>
            <param name="diffgramFileName">XmlReader for the XDL diffgram.</param>
        </member>
        <member name="M:WebReports.Api.XmlDiffPatch.XmlPatch.Patch(System.Xml.XmlNode@,System.Xml.XmlReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\XmlPatch.uex" path="docs/doc[@for=&quot;XmlPatch.Patch2&quot;]/*" />
            <summary>
               Reads the XDL diffgram from the diffgramFileName and modifies the original XML document
               sourceDoc according to the changes described in the diffgram. 
            </summary>
            <param name="sourceDoc">The original xml node</param>
            <param name="diffgramFileName">XmlReader for the XDL diffgram.</param>
        </member>
        <member name="F:InputSanitizer.extraHtmlEntities">
            <summary>
            A list of HTML entities that HttpUtility.HtmlDecode will not decode
            </summary>
        </member>
        <member name="M:InputSanitizer.RemoveScriptAttacksSafe(System.String)">
            <summary>
            Sanitizes the input text according to a blacklist of HTML tags and attributes.  This method is considered
            a "safer choice" to RemoveScriptAttacksAggressive, which uses a whitelist and has more potential of
            transforming the input text
            </summary>
        </member>
        <member name="M:InputSanitizer.RemoveScriptAttacksAggressive(System.String)">
            <summary>
            Sanitizes the input text according to a whitelist of HTML tags and a blacklist of attributes.  This method
            is considered a "more dangerous" choice to RemoveScriptAttacksSafe which uses a blacklist instead of a whitelist.
            </summary>
        </member>
        <member name="M:InputSanitizer.DecodeDataUriString(System.String)">
            <summary>
            returns a decoded string if the input text was a data uri of some sort
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:InputSanitizer.RemoveAttackStringsAggressive(System.String@)">
            <summary>
            Performs the string sanitization, returning true if any attacks were removed
            </summary>
        </member>
        <member name="M:InputSanitizer.HtmlDecode(System.String)">
            <summary>
            Call HtmlDecode on the provided string.
            Since HttpUtility.HtmlDecode will not decode certain HTML entities, so we will decode them manually.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:InputSanitizer.RemoveExcelAttacks(System.String)">
            <summary>
            EX-9924: Sanitizes a particular attack that KPMG reported that when opened in Excel,
            allows the user to be potentially phished into running an arbitrary system command.
            </summary>
        </member>
    </members>
</doc>
